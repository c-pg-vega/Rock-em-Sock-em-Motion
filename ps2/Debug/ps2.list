
ps2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000265c  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002818  08002818  00012818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002858  08002858  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002858  08002858  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002858  08002858  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002858  08002858  00012858  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800285c  0800285c  0001285c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002860  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a0  2000000c  0800286c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000ac  0800286c  000200ac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000074b0  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000013c2  00000000  00000000  000274ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a0  00000000  00000000  000288b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006f8  00000000  00000000  00029050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027cbe  00000000  00000000  00029748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007d42  00000000  00000000  00051406  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f492f  00000000  00000000  00059148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0014da77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001dc0  00000000  00000000  0014dac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002800 	.word	0x08002800

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08002800 	.word	0x08002800

080001fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b082      	sub	sp, #8
 8000200:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000202:	f000 fc1a 	bl	8000a3a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000206:	f000 f86b 	bl	80002e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800020a:	f000 f8ed 	bl	80003e8 <MX_GPIO_Init>
  MX_SPI1_Init();
 800020e:	f000 f8ad 	bl	800036c <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 8000212:	2201      	movs	r2, #1
 8000214:	2140      	movs	r1, #64	; 0x40
 8000216:	4825      	ldr	r0, [pc, #148]	; (80002ac <main+0xb0>)
 8000218:	f000 ff20 	bl	800105c <HAL_GPIO_WritePin>
  tx_buf[0] = 0x01;
 800021c:	4b24      	ldr	r3, [pc, #144]	; (80002b0 <main+0xb4>)
 800021e:	2201      	movs	r2, #1
 8000220:	701a      	strb	r2, [r3, #0]
  tx_buf[1] = 0x42;
 8000222:	4b23      	ldr	r3, [pc, #140]	; (80002b0 <main+0xb4>)
 8000224:	2242      	movs	r2, #66	; 0x42
 8000226:	705a      	strb	r2, [r3, #1]
  tx_buf[2] = 0x00;
 8000228:	4b21      	ldr	r3, [pc, #132]	; (80002b0 <main+0xb4>)
 800022a:	2200      	movs	r2, #0
 800022c:	709a      	strb	r2, [r3, #2]
  tx_buf[3] = 0x00;
 800022e:	4b20      	ldr	r3, [pc, #128]	; (80002b0 <main+0xb4>)
 8000230:	2200      	movs	r2, #0
 8000232:	70da      	strb	r2, [r3, #3]
  tx_buf[4] = 0x00;
 8000234:	4b1e      	ldr	r3, [pc, #120]	; (80002b0 <main+0xb4>)
 8000236:	2200      	movs	r2, #0
 8000238:	711a      	strb	r2, [r3, #4]
  data_size = 5;
 800023a:	4b1e      	ldr	r3, [pc, #120]	; (80002b4 <main+0xb8>)
 800023c:	2205      	movs	r2, #5
 800023e:	601a      	str	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000240:	2200      	movs	r2, #0
 8000242:	2140      	movs	r1, #64	; 0x40
 8000244:	4819      	ldr	r0, [pc, #100]	; (80002ac <main+0xb0>)
 8000246:	f000 ff09 	bl	800105c <HAL_GPIO_WritePin>
	  HAL_SPI_TransmitReceive(&hspi1, &tx_buf[0], &rx_buf[0], 1, 100);
 800024a:	2364      	movs	r3, #100	; 0x64
 800024c:	9300      	str	r3, [sp, #0]
 800024e:	2301      	movs	r3, #1
 8000250:	4a19      	ldr	r2, [pc, #100]	; (80002b8 <main+0xbc>)
 8000252:	4917      	ldr	r1, [pc, #92]	; (80002b0 <main+0xb4>)
 8000254:	4819      	ldr	r0, [pc, #100]	; (80002bc <main+0xc0>)
 8000256:	f001 ff30 	bl	80020ba <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(&hspi1, &tx_buf[1], &rx_buf[1], 1, 100);
 800025a:	2364      	movs	r3, #100	; 0x64
 800025c:	9300      	str	r3, [sp, #0]
 800025e:	2301      	movs	r3, #1
 8000260:	4a17      	ldr	r2, [pc, #92]	; (80002c0 <main+0xc4>)
 8000262:	4918      	ldr	r1, [pc, #96]	; (80002c4 <main+0xc8>)
 8000264:	4815      	ldr	r0, [pc, #84]	; (80002bc <main+0xc0>)
 8000266:	f001 ff28 	bl	80020ba <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(&hspi1, &tx_buf[2], &rx_buf[2], 1, 100);
 800026a:	2364      	movs	r3, #100	; 0x64
 800026c:	9300      	str	r3, [sp, #0]
 800026e:	2301      	movs	r3, #1
 8000270:	4a15      	ldr	r2, [pc, #84]	; (80002c8 <main+0xcc>)
 8000272:	4916      	ldr	r1, [pc, #88]	; (80002cc <main+0xd0>)
 8000274:	4811      	ldr	r0, [pc, #68]	; (80002bc <main+0xc0>)
 8000276:	f001 ff20 	bl	80020ba <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(&hspi1, &tx_buf[3], &rx_buf[3], 1, 100);
 800027a:	2364      	movs	r3, #100	; 0x64
 800027c:	9300      	str	r3, [sp, #0]
 800027e:	2301      	movs	r3, #1
 8000280:	4a13      	ldr	r2, [pc, #76]	; (80002d0 <main+0xd4>)
 8000282:	4914      	ldr	r1, [pc, #80]	; (80002d4 <main+0xd8>)
 8000284:	480d      	ldr	r0, [pc, #52]	; (80002bc <main+0xc0>)
 8000286:	f001 ff18 	bl	80020ba <HAL_SPI_TransmitReceive>
	  HAL_SPI_TransmitReceive(&hspi1, &tx_buf[4], &rx_buf[4], 1, 100);
 800028a:	2364      	movs	r3, #100	; 0x64
 800028c:	9300      	str	r3, [sp, #0]
 800028e:	2301      	movs	r3, #1
 8000290:	4a11      	ldr	r2, [pc, #68]	; (80002d8 <main+0xdc>)
 8000292:	4912      	ldr	r1, [pc, #72]	; (80002dc <main+0xe0>)
 8000294:	4809      	ldr	r0, [pc, #36]	; (80002bc <main+0xc0>)
 8000296:	f001 ff10 	bl	80020ba <HAL_SPI_TransmitReceive>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800029a:	2201      	movs	r2, #1
 800029c:	2140      	movs	r1, #64	; 0x40
 800029e:	4803      	ldr	r0, [pc, #12]	; (80002ac <main+0xb0>)
 80002a0:	f000 fedc 	bl	800105c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 80002a4:	2064      	movs	r0, #100	; 0x64
 80002a6:	f000 fc3d 	bl	8000b24 <HAL_Delay>
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80002aa:	e7c9      	b.n	8000240 <main+0x44>
 80002ac:	48000400 	.word	0x48000400
 80002b0:	2000008c 	.word	0x2000008c
 80002b4:	200000a4 	.word	0x200000a4
 80002b8:	20000098 	.word	0x20000098
 80002bc:	20000028 	.word	0x20000028
 80002c0:	20000099 	.word	0x20000099
 80002c4:	2000008d 	.word	0x2000008d
 80002c8:	2000009a 	.word	0x2000009a
 80002cc:	2000008e 	.word	0x2000008e
 80002d0:	2000009b 	.word	0x2000009b
 80002d4:	2000008f 	.word	0x2000008f
 80002d8:	2000009c 	.word	0x2000009c
 80002dc:	20000090 	.word	0x20000090

080002e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	b096      	sub	sp, #88	; 0x58
 80002e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002e6:	f107 0314 	add.w	r3, r7, #20
 80002ea:	2244      	movs	r2, #68	; 0x44
 80002ec:	2100      	movs	r1, #0
 80002ee:	4618      	mov	r0, r3
 80002f0:	f002 fa7e 	bl	80027f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002f4:	463b      	mov	r3, r7
 80002f6:	2200      	movs	r2, #0
 80002f8:	601a      	str	r2, [r3, #0]
 80002fa:	605a      	str	r2, [r3, #4]
 80002fc:	609a      	str	r2, [r3, #8]
 80002fe:	60da      	str	r2, [r3, #12]
 8000300:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000302:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000306:	f000 fee1 	bl	80010cc <HAL_PWREx_ControlVoltageScaling>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000310:	f000 fac2 	bl	8000898 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000314:	2310      	movs	r3, #16
 8000316:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000318:	2301      	movs	r3, #1
 800031a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800031c:	2300      	movs	r3, #0
 800031e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000320:	2360      	movs	r3, #96	; 0x60
 8000322:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000324:	2300      	movs	r3, #0
 8000326:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000328:	f107 0314 	add.w	r3, r7, #20
 800032c:	4618      	mov	r0, r3
 800032e:	f000 ff81 	bl	8001234 <HAL_RCC_OscConfig>
 8000332:	4603      	mov	r3, r0
 8000334:	2b00      	cmp	r3, #0
 8000336:	d001      	beq.n	800033c <SystemClock_Config+0x5c>
  {
    Error_Handler();
 8000338:	f000 faae 	bl	8000898 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800033c:	230f      	movs	r3, #15
 800033e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 8000340:	2300      	movs	r3, #0
 8000342:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000344:	2300      	movs	r3, #0
 8000346:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000348:	2300      	movs	r3, #0
 800034a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800034c:	2300      	movs	r3, #0
 800034e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000350:	463b      	mov	r3, r7
 8000352:	2100      	movs	r1, #0
 8000354:	4618      	mov	r0, r3
 8000356:	f001 fb87 	bl	8001a68 <HAL_RCC_ClockConfig>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000360:	f000 fa9a 	bl	8000898 <Error_Handler>
  }
}
 8000364:	bf00      	nop
 8000366:	3758      	adds	r7, #88	; 0x58
 8000368:	46bd      	mov	sp, r7
 800036a:	bd80      	pop	{r7, pc}

0800036c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800036c:	b580      	push	{r7, lr}
 800036e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000370:	4b1b      	ldr	r3, [pc, #108]	; (80003e0 <MX_SPI1_Init+0x74>)
 8000372:	4a1c      	ldr	r2, [pc, #112]	; (80003e4 <MX_SPI1_Init+0x78>)
 8000374:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000376:	4b1a      	ldr	r3, [pc, #104]	; (80003e0 <MX_SPI1_Init+0x74>)
 8000378:	f44f 7282 	mov.w	r2, #260	; 0x104
 800037c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800037e:	4b18      	ldr	r3, [pc, #96]	; (80003e0 <MX_SPI1_Init+0x74>)
 8000380:	2200      	movs	r2, #0
 8000382:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000384:	4b16      	ldr	r3, [pc, #88]	; (80003e0 <MX_SPI1_Init+0x74>)
 8000386:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800038a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800038c:	4b14      	ldr	r3, [pc, #80]	; (80003e0 <MX_SPI1_Init+0x74>)
 800038e:	2202      	movs	r2, #2
 8000390:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000392:	4b13      	ldr	r3, [pc, #76]	; (80003e0 <MX_SPI1_Init+0x74>)
 8000394:	2201      	movs	r2, #1
 8000396:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000398:	4b11      	ldr	r3, [pc, #68]	; (80003e0 <MX_SPI1_Init+0x74>)
 800039a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800039e:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80003a0:	4b0f      	ldr	r3, [pc, #60]	; (80003e0 <MX_SPI1_Init+0x74>)
 80003a2:	2210      	movs	r2, #16
 80003a4:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_LSB;
 80003a6:	4b0e      	ldr	r3, [pc, #56]	; (80003e0 <MX_SPI1_Init+0x74>)
 80003a8:	2280      	movs	r2, #128	; 0x80
 80003aa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80003ac:	4b0c      	ldr	r3, [pc, #48]	; (80003e0 <MX_SPI1_Init+0x74>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80003b2:	4b0b      	ldr	r3, [pc, #44]	; (80003e0 <MX_SPI1_Init+0x74>)
 80003b4:	2200      	movs	r2, #0
 80003b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80003b8:	4b09      	ldr	r3, [pc, #36]	; (80003e0 <MX_SPI1_Init+0x74>)
 80003ba:	2207      	movs	r2, #7
 80003bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80003be:	4b08      	ldr	r3, [pc, #32]	; (80003e0 <MX_SPI1_Init+0x74>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80003c4:	4b06      	ldr	r3, [pc, #24]	; (80003e0 <MX_SPI1_Init+0x74>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80003ca:	4805      	ldr	r0, [pc, #20]	; (80003e0 <MX_SPI1_Init+0x74>)
 80003cc:	f001 fdd2 	bl	8001f74 <HAL_SPI_Init>
 80003d0:	4603      	mov	r3, r0
 80003d2:	2b00      	cmp	r3, #0
 80003d4:	d001      	beq.n	80003da <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 80003d6:	f000 fa5f 	bl	8000898 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80003da:	bf00      	nop
 80003dc:	bd80      	pop	{r7, pc}
 80003de:	bf00      	nop
 80003e0:	20000028 	.word	0x20000028
 80003e4:	40013000 	.word	0x40013000

080003e8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003e8:	b580      	push	{r7, lr}
 80003ea:	b08e      	sub	sp, #56	; 0x38
 80003ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80003f2:	2200      	movs	r2, #0
 80003f4:	601a      	str	r2, [r3, #0]
 80003f6:	605a      	str	r2, [r3, #4]
 80003f8:	609a      	str	r2, [r3, #8]
 80003fa:	60da      	str	r2, [r3, #12]
 80003fc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80003fe:	4bb2      	ldr	r3, [pc, #712]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000400:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000402:	4ab1      	ldr	r2, [pc, #708]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000404:	f043 0310 	orr.w	r3, r3, #16
 8000408:	64d3      	str	r3, [r2, #76]	; 0x4c
 800040a:	4baf      	ldr	r3, [pc, #700]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 800040c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800040e:	f003 0310 	and.w	r3, r3, #16
 8000412:	623b      	str	r3, [r7, #32]
 8000414:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000416:	4bac      	ldr	r3, [pc, #688]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000418:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800041a:	4aab      	ldr	r2, [pc, #684]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 800041c:	f043 0304 	orr.w	r3, r3, #4
 8000420:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000422:	4ba9      	ldr	r3, [pc, #676]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000424:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000426:	f003 0304 	and.w	r3, r3, #4
 800042a:	61fb      	str	r3, [r7, #28]
 800042c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800042e:	4ba6      	ldr	r3, [pc, #664]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000432:	4aa5      	ldr	r2, [pc, #660]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000434:	f043 0320 	orr.w	r3, r3, #32
 8000438:	64d3      	str	r3, [r2, #76]	; 0x4c
 800043a:	4ba3      	ldr	r3, [pc, #652]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 800043c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800043e:	f003 0320 	and.w	r3, r3, #32
 8000442:	61bb      	str	r3, [r7, #24]
 8000444:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000446:	4ba0      	ldr	r3, [pc, #640]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000448:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800044a:	4a9f      	ldr	r2, [pc, #636]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 800044c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000450:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000452:	4b9d      	ldr	r3, [pc, #628]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000454:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000456:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800045a:	617b      	str	r3, [r7, #20]
 800045c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800045e:	4b9a      	ldr	r3, [pc, #616]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000460:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000462:	4a99      	ldr	r2, [pc, #612]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000464:	f043 0301 	orr.w	r3, r3, #1
 8000468:	64d3      	str	r3, [r2, #76]	; 0x4c
 800046a:	4b97      	ldr	r3, [pc, #604]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 800046c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800046e:	f003 0301 	and.w	r3, r3, #1
 8000472:	613b      	str	r3, [r7, #16]
 8000474:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000476:	4b94      	ldr	r3, [pc, #592]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000478:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800047a:	4a93      	ldr	r2, [pc, #588]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 800047c:	f043 0302 	orr.w	r3, r3, #2
 8000480:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000482:	4b91      	ldr	r3, [pc, #580]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000486:	f003 0302 	and.w	r3, r3, #2
 800048a:	60fb      	str	r3, [r7, #12]
 800048c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048e:	4b8e      	ldr	r3, [pc, #568]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000490:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000492:	4a8d      	ldr	r2, [pc, #564]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 8000494:	f043 0308 	orr.w	r3, r3, #8
 8000498:	64d3      	str	r3, [r2, #76]	; 0x4c
 800049a:	4b8b      	ldr	r3, [pc, #556]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 800049c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800049e:	f003 0308 	and.w	r3, r3, #8
 80004a2:	60bb      	str	r3, [r7, #8]
 80004a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80004a6:	4b88      	ldr	r3, [pc, #544]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 80004a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004aa:	4a87      	ldr	r2, [pc, #540]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 80004ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004b2:	4b85      	ldr	r3, [pc, #532]	; (80006c8 <MX_GPIO_Init+0x2e0>)
 80004b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80004ba:	607b      	str	r3, [r7, #4]
 80004bc:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80004be:	f000 fea9 	bl	8001214 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80004c2:	2200      	movs	r2, #0
 80004c4:	2140      	movs	r1, #64	; 0x40
 80004c6:	4881      	ldr	r0, [pc, #516]	; (80006cc <MX_GPIO_Init+0x2e4>)
 80004c8:	f000 fdc8 	bl	800105c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80004cc:	230c      	movs	r3, #12
 80004ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80004d0:	2302      	movs	r3, #2
 80004d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004d4:	2300      	movs	r3, #0
 80004d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004d8:	2300      	movs	r3, #0
 80004da:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80004dc:	230d      	movs	r3, #13
 80004de:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80004e0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e4:	4619      	mov	r1, r3
 80004e6:	487a      	ldr	r0, [pc, #488]	; (80006d0 <MX_GPIO_Init+0x2e8>)
 80004e8:	f000 fc26 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80004ec:	2307      	movs	r3, #7
 80004ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80004f0:	2312      	movs	r3, #18
 80004f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004f4:	2300      	movs	r3, #0
 80004f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80004f8:	2303      	movs	r3, #3
 80004fa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80004fc:	2304      	movs	r3, #4
 80004fe:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000500:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000504:	4619      	mov	r1, r3
 8000506:	4873      	ldr	r0, [pc, #460]	; (80006d4 <MX_GPIO_Init+0x2ec>)
 8000508:	f000 fc16 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800050c:	2380      	movs	r3, #128	; 0x80
 800050e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000510:	2302      	movs	r3, #2
 8000512:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000514:	2300      	movs	r3, #0
 8000516:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000518:	2300      	movs	r3, #0
 800051a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800051c:	230d      	movs	r3, #13
 800051e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000520:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000524:	4619      	mov	r1, r3
 8000526:	486b      	ldr	r0, [pc, #428]	; (80006d4 <MX_GPIO_Init+0x2ec>)
 8000528:	f000 fc06 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800052c:	233f      	movs	r3, #63	; 0x3f
 800052e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000530:	230b      	movs	r3, #11
 8000532:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000534:	2300      	movs	r3, #0
 8000536:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800053c:	4619      	mov	r1, r3
 800053e:	4866      	ldr	r0, [pc, #408]	; (80006d8 <MX_GPIO_Init+0x2f0>)
 8000540:	f000 fbfa 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000544:	2301      	movs	r3, #1
 8000546:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000548:	2302      	movs	r3, #2
 800054a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000550:	2300      	movs	r3, #0
 8000552:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000554:	2301      	movs	r3, #1
 8000556:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000558:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800055c:	4619      	mov	r1, r3
 800055e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000562:	f000 fbe9 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000566:	230a      	movs	r3, #10
 8000568:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800056a:	230b      	movs	r3, #11
 800056c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000572:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000576:	4619      	mov	r1, r3
 8000578:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800057c:	f000 fbdc 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000580:	2301      	movs	r3, #1
 8000582:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000584:	2302      	movs	r3, #2
 8000586:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000588:	2300      	movs	r3, #0
 800058a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800058c:	2300      	movs	r3, #0
 800058e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000590:	2302      	movs	r3, #2
 8000592:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000594:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000598:	4619      	mov	r1, r3
 800059a:	484c      	ldr	r0, [pc, #304]	; (80006cc <MX_GPIO_Init+0x2e4>)
 800059c:	f000 fbcc 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80005a0:	2302      	movs	r3, #2
 80005a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80005a4:	230b      	movs	r3, #11
 80005a6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005a8:	2300      	movs	r3, #0
 80005aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005b0:	4619      	mov	r1, r3
 80005b2:	4846      	ldr	r0, [pc, #280]	; (80006cc <MX_GPIO_Init+0x2e4>)
 80005b4:	f000 fbc0 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80005b8:	2304      	movs	r3, #4
 80005ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005bc:	2303      	movs	r3, #3
 80005be:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c0:	2300      	movs	r3, #0
 80005c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80005c4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005c8:	4619      	mov	r1, r3
 80005ca:	4840      	ldr	r0, [pc, #256]	; (80006cc <MX_GPIO_Init+0x2e4>)
 80005cc:	f000 fbb4 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80005d0:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80005d4:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005d6:	2302      	movs	r3, #2
 80005d8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005da:	2300      	movs	r3, #0
 80005dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005de:	2300      	movs	r3, #0
 80005e0:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80005e2:	2301      	movs	r3, #1
 80005e4:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005e6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005ea:	4619      	mov	r1, r3
 80005ec:	4838      	ldr	r0, [pc, #224]	; (80006d0 <MX_GPIO_Init+0x2e8>)
 80005ee:	f000 fba3 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80005f2:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80005f6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f8:	2302      	movs	r3, #2
 80005fa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fc:	2300      	movs	r3, #0
 80005fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000600:	2300      	movs	r3, #0
 8000602:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000604:	2303      	movs	r3, #3
 8000606:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000608:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800060c:	4619      	mov	r1, r3
 800060e:	4830      	ldr	r0, [pc, #192]	; (80006d0 <MX_GPIO_Init+0x2e8>)
 8000610:	f000 fb92 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000614:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000618:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800061a:	2302      	movs	r3, #2
 800061c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800061e:	2300      	movs	r3, #0
 8000620:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000622:	2300      	movs	r3, #0
 8000624:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000626:	2301      	movs	r3, #1
 8000628:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	4619      	mov	r1, r3
 8000630:	4826      	ldr	r0, [pc, #152]	; (80006cc <MX_GPIO_Init+0x2e4>)
 8000632:	f000 fb81 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8000636:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800063a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063c:	2302      	movs	r3, #2
 800063e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000640:	2300      	movs	r3, #0
 8000642:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000644:	2300      	movs	r3, #0
 8000646:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000648:	230d      	movs	r3, #13
 800064a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800064c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000650:	4619      	mov	r1, r3
 8000652:	481e      	ldr	r0, [pc, #120]	; (80006cc <MX_GPIO_Init+0x2e4>)
 8000654:	f000 fb70 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8000658:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800065c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800065e:	2302      	movs	r3, #2
 8000660:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000662:	2300      	movs	r3, #0
 8000664:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000666:	2300      	movs	r3, #0
 8000668:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800066a:	230e      	movs	r3, #14
 800066c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000672:	4619      	mov	r1, r3
 8000674:	4815      	ldr	r0, [pc, #84]	; (80006cc <MX_GPIO_Init+0x2e4>)
 8000676:	f000 fb5f 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800067a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800067e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000680:	2302      	movs	r3, #2
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000684:	2300      	movs	r3, #0
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000688:	2303      	movs	r3, #3
 800068a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800068c:	2307      	movs	r3, #7
 800068e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000690:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000694:	4619      	mov	r1, r3
 8000696:	4811      	ldr	r0, [pc, #68]	; (80006dc <MX_GPIO_Init+0x2f4>)
 8000698:	f000 fb4e 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 800069c:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80006a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006a2:	2302      	movs	r3, #2
 80006a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a6:	2300      	movs	r3, #0
 80006a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006aa:	2300      	movs	r3, #0
 80006ac:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80006ae:	2302      	movs	r3, #2
 80006b0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80006b2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006b6:	4619      	mov	r1, r3
 80006b8:	4808      	ldr	r0, [pc, #32]	; (80006dc <MX_GPIO_Init+0x2f4>)
 80006ba:	f000 fb3d 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80006be:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80006c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006c4:	2302      	movs	r3, #2
 80006c6:	e00b      	b.n	80006e0 <MX_GPIO_Init+0x2f8>
 80006c8:	40021000 	.word	0x40021000
 80006cc:	48000400 	.word	0x48000400
 80006d0:	48001000 	.word	0x48001000
 80006d4:	48001400 	.word	0x48001400
 80006d8:	48000800 	.word	0x48000800
 80006dc:	48000c00 	.word	0x48000c00
 80006e0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006e2:	2300      	movs	r3, #0
 80006e4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006e6:	2303      	movs	r3, #3
 80006e8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 80006ea:	2308      	movs	r3, #8
 80006ec:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80006ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006f2:	4619      	mov	r1, r3
 80006f4:	4863      	ldr	r0, [pc, #396]	; (8000884 <MX_GPIO_Init+0x49c>)
 80006f6:	f000 fb1f 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80006fa:	2340      	movs	r3, #64	; 0x40
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006fe:	2302      	movs	r3, #2
 8000700:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000702:	2300      	movs	r3, #0
 8000704:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000706:	2300      	movs	r3, #0
 8000708:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800070a:	230d      	movs	r3, #13
 800070c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800070e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000712:	4619      	mov	r1, r3
 8000714:	485c      	ldr	r0, [pc, #368]	; (8000888 <MX_GPIO_Init+0x4a0>)
 8000716:	f000 fb0f 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800071a:	2380      	movs	r3, #128	; 0x80
 800071c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071e:	2302      	movs	r3, #2
 8000720:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	2300      	movs	r3, #0
 8000724:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000726:	2300      	movs	r3, #0
 8000728:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800072a:	2302      	movs	r3, #2
 800072c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800072e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000732:	4619      	mov	r1, r3
 8000734:	4854      	ldr	r0, [pc, #336]	; (8000888 <MX_GPIO_Init+0x4a0>)
 8000736:	f000 faff 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 800073a:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 800073e:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000740:	2302      	movs	r3, #2
 8000742:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	2300      	movs	r3, #0
 8000746:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000748:	2303      	movs	r3, #3
 800074a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800074c:	230c      	movs	r3, #12
 800074e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000750:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000754:	4619      	mov	r1, r3
 8000756:	484c      	ldr	r0, [pc, #304]	; (8000888 <MX_GPIO_Init+0x4a0>)
 8000758:	f000 faee 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800075c:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000760:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000762:	2302      	movs	r3, #2
 8000764:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000766:	2300      	movs	r3, #0
 8000768:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800076a:	2303      	movs	r3, #3
 800076c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800076e:	230a      	movs	r3, #10
 8000770:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000772:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000776:	4619      	mov	r1, r3
 8000778:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800077c:	f000 fadc 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000780:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000784:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000786:	2300      	movs	r3, #0
 8000788:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800078a:	2300      	movs	r3, #0
 800078c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800078e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000792:	4619      	mov	r1, r3
 8000794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000798:	f000 face 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800079c:	2301      	movs	r3, #1
 800079e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007a0:	2302      	movs	r3, #2
 80007a2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007a4:	2300      	movs	r3, #0
 80007a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007a8:	2303      	movs	r3, #3
 80007aa:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80007ac:	2309      	movs	r3, #9
 80007ae:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007b4:	4619      	mov	r1, r3
 80007b6:	4835      	ldr	r0, [pc, #212]	; (800088c <MX_GPIO_Init+0x4a4>)
 80007b8:	f000 fabe 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80007bc:	2304      	movs	r3, #4
 80007be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007c0:	2302      	movs	r3, #2
 80007c2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007c4:	2300      	movs	r3, #0
 80007c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007c8:	2303      	movs	r3, #3
 80007ca:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80007cc:	230c      	movs	r3, #12
 80007ce:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007d0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007d4:	4619      	mov	r1, r3
 80007d6:	482d      	ldr	r0, [pc, #180]	; (800088c <MX_GPIO_Init+0x4a4>)
 80007d8:	f000 faae 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80007dc:	2378      	movs	r3, #120	; 0x78
 80007de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007e0:	2302      	movs	r3, #2
 80007e2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e4:	2300      	movs	r3, #0
 80007e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e8:	2303      	movs	r3, #3
 80007ea:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007ec:	2307      	movs	r3, #7
 80007ee:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007f0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007f4:	4619      	mov	r1, r3
 80007f6:	4825      	ldr	r0, [pc, #148]	; (800088c <MX_GPIO_Init+0x4a4>)
 80007f8:	f000 fa9e 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80007fc:	2338      	movs	r3, #56	; 0x38
 80007fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000800:	2302      	movs	r3, #2
 8000802:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000804:	2300      	movs	r3, #0
 8000806:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000808:	2303      	movs	r3, #3
 800080a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800080c:	2306      	movs	r3, #6
 800080e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000810:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000814:	4619      	mov	r1, r3
 8000816:	481e      	ldr	r0, [pc, #120]	; (8000890 <MX_GPIO_Init+0x4a8>)
 8000818:	f000 fa8e 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800081c:	2340      	movs	r3, #64	; 0x40
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000820:	2301      	movs	r3, #1
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000824:	2300      	movs	r3, #0
 8000826:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000828:	2300      	movs	r3, #0
 800082a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800082c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000830:	4619      	mov	r1, r3
 8000832:	4817      	ldr	r0, [pc, #92]	; (8000890 <MX_GPIO_Init+0x4a8>)
 8000834:	f000 fa80 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000838:	f44f 7340 	mov.w	r3, #768	; 0x300
 800083c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800083e:	2312      	movs	r3, #18
 8000840:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800084a:	2304      	movs	r3, #4
 800084c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000852:	4619      	mov	r1, r3
 8000854:	480e      	ldr	r0, [pc, #56]	; (8000890 <MX_GPIO_Init+0x4a8>)
 8000856:	f000 fa6f 	bl	8000d38 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800085a:	2301      	movs	r3, #1
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000866:	2300      	movs	r3, #0
 8000868:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800086a:	2302      	movs	r3, #2
 800086c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800086e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000872:	4619      	mov	r1, r3
 8000874:	4807      	ldr	r0, [pc, #28]	; (8000894 <MX_GPIO_Init+0x4ac>)
 8000876:	f000 fa5f 	bl	8000d38 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800087a:	bf00      	nop
 800087c:	3738      	adds	r7, #56	; 0x38
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	48001800 	.word	0x48001800
 8000888:	48000800 	.word	0x48000800
 800088c:	48000c00 	.word	0x48000c00
 8000890:	48000400 	.word	0x48000400
 8000894:	48001000 	.word	0x48001000

08000898 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800089c:	b672      	cpsid	i
}
 800089e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008a0:	e7fe      	b.n	80008a0 <Error_Handler+0x8>
	...

080008a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008a4:	b480      	push	{r7}
 80008a6:	b083      	sub	sp, #12
 80008a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008aa:	4b0f      	ldr	r3, [pc, #60]	; (80008e8 <HAL_MspInit+0x44>)
 80008ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ae:	4a0e      	ldr	r2, [pc, #56]	; (80008e8 <HAL_MspInit+0x44>)
 80008b0:	f043 0301 	orr.w	r3, r3, #1
 80008b4:	6613      	str	r3, [r2, #96]	; 0x60
 80008b6:	4b0c      	ldr	r3, [pc, #48]	; (80008e8 <HAL_MspInit+0x44>)
 80008b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ba:	f003 0301 	and.w	r3, r3, #1
 80008be:	607b      	str	r3, [r7, #4]
 80008c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008c2:	4b09      	ldr	r3, [pc, #36]	; (80008e8 <HAL_MspInit+0x44>)
 80008c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008c6:	4a08      	ldr	r2, [pc, #32]	; (80008e8 <HAL_MspInit+0x44>)
 80008c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008cc:	6593      	str	r3, [r2, #88]	; 0x58
 80008ce:	4b06      	ldr	r3, [pc, #24]	; (80008e8 <HAL_MspInit+0x44>)
 80008d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008d6:	603b      	str	r3, [r7, #0]
 80008d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008da:	bf00      	nop
 80008dc:	370c      	adds	r7, #12
 80008de:	46bd      	mov	sp, r7
 80008e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e4:	4770      	bx	lr
 80008e6:	bf00      	nop
 80008e8:	40021000 	.word	0x40021000

080008ec <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b08a      	sub	sp, #40	; 0x28
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f4:	f107 0314 	add.w	r3, r7, #20
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a17      	ldr	r2, [pc, #92]	; (8000968 <HAL_SPI_MspInit+0x7c>)
 800090a:	4293      	cmp	r3, r2
 800090c:	d128      	bne.n	8000960 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800090e:	4b17      	ldr	r3, [pc, #92]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000910:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000912:	4a16      	ldr	r2, [pc, #88]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000914:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000918:	6613      	str	r3, [r2, #96]	; 0x60
 800091a:	4b14      	ldr	r3, [pc, #80]	; (800096c <HAL_SPI_MspInit+0x80>)
 800091c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800091e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000922:	613b      	str	r3, [r7, #16]
 8000924:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000926:	4b11      	ldr	r3, [pc, #68]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000928:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092a:	4a10      	ldr	r2, [pc, #64]	; (800096c <HAL_SPI_MspInit+0x80>)
 800092c:	f043 0301 	orr.w	r3, r3, #1
 8000930:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000932:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_SPI_MspInit+0x80>)
 8000934:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000936:	f003 0301 	and.w	r3, r3, #1
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800093e:	23f0      	movs	r3, #240	; 0xf0
 8000940:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000942:	2302      	movs	r3, #2
 8000944:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	2300      	movs	r3, #0
 8000948:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094a:	2303      	movs	r3, #3
 800094c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800094e:	2305      	movs	r3, #5
 8000950:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800095c:	f000 f9ec 	bl	8000d38 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000960:	bf00      	nop
 8000962:	3728      	adds	r7, #40	; 0x28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd80      	pop	{r7, pc}
 8000968:	40013000 	.word	0x40013000
 800096c:	40021000 	.word	0x40021000

08000970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000974:	e7fe      	b.n	8000974 <NMI_Handler+0x4>

08000976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000976:	b480      	push	{r7}
 8000978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800097a:	e7fe      	b.n	800097a <HardFault_Handler+0x4>

0800097c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000980:	e7fe      	b.n	8000980 <MemManage_Handler+0x4>

08000982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000982:	b480      	push	{r7}
 8000984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000986:	e7fe      	b.n	8000986 <BusFault_Handler+0x4>

08000988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000988:	b480      	push	{r7}
 800098a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800098c:	e7fe      	b.n	800098c <UsageFault_Handler+0x4>

0800098e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800098e:	b480      	push	{r7}
 8000990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000992:	bf00      	nop
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr

0800099c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009bc:	f000 f892 	bl	8000ae4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009c0:	bf00      	nop
 80009c2:	bd80      	pop	{r7, pc}

080009c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80009c4:	b480      	push	{r7}
 80009c6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80009c8:	4b06      	ldr	r3, [pc, #24]	; (80009e4 <SystemInit+0x20>)
 80009ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009ce:	4a05      	ldr	r2, [pc, #20]	; (80009e4 <SystemInit+0x20>)
 80009d0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009d4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80009d8:	bf00      	nop
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	e000ed00 	.word	0xe000ed00

080009e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80009e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a20 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80009ec:	f7ff ffea 	bl	80009c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80009f0:	480c      	ldr	r0, [pc, #48]	; (8000a24 <LoopForever+0x6>)
  ldr r1, =_edata
 80009f2:	490d      	ldr	r1, [pc, #52]	; (8000a28 <LoopForever+0xa>)
  ldr r2, =_sidata
 80009f4:	4a0d      	ldr	r2, [pc, #52]	; (8000a2c <LoopForever+0xe>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009f8:	e002      	b.n	8000a00 <LoopCopyDataInit>

080009fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009fe:	3304      	adds	r3, #4

08000a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a04:	d3f9      	bcc.n	80009fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a06:	4a0a      	ldr	r2, [pc, #40]	; (8000a30 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a08:	4c0a      	ldr	r4, [pc, #40]	; (8000a34 <LoopForever+0x16>)
  movs r3, #0
 8000a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a0c:	e001      	b.n	8000a12 <LoopFillZerobss>

08000a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a10:	3204      	adds	r2, #4

08000a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a14:	d3fb      	bcc.n	8000a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a16:	f001 fec7 	bl	80027a8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a1a:	f7ff fbef 	bl	80001fc <main>

08000a1e <LoopForever>:

LoopForever:
    b LoopForever
 8000a1e:	e7fe      	b.n	8000a1e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a20:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000a24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a28:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000a2c:	08002860 	.word	0x08002860
  ldr r2, =_sbss
 8000a30:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000a34:	200000ac 	.word	0x200000ac

08000a38 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a38:	e7fe      	b.n	8000a38 <ADC1_IRQHandler>

08000a3a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a3a:	b580      	push	{r7, lr}
 8000a3c:	b082      	sub	sp, #8
 8000a3e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a40:	2300      	movs	r3, #0
 8000a42:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a44:	2003      	movs	r0, #3
 8000a46:	f000 f943 	bl	8000cd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a4a:	2000      	movs	r0, #0
 8000a4c:	f000 f80e 	bl	8000a6c <HAL_InitTick>
 8000a50:	4603      	mov	r3, r0
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d002      	beq.n	8000a5c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a56:	2301      	movs	r3, #1
 8000a58:	71fb      	strb	r3, [r7, #7]
 8000a5a:	e001      	b.n	8000a60 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a5c:	f7ff ff22 	bl	80008a4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a60:	79fb      	ldrb	r3, [r7, #7]
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
	...

08000a6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000a78:	4b17      	ldr	r3, [pc, #92]	; (8000ad8 <HAL_InitTick+0x6c>)
 8000a7a:	781b      	ldrb	r3, [r3, #0]
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	d023      	beq.n	8000ac8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000a80:	4b16      	ldr	r3, [pc, #88]	; (8000adc <HAL_InitTick+0x70>)
 8000a82:	681a      	ldr	r2, [r3, #0]
 8000a84:	4b14      	ldr	r3, [pc, #80]	; (8000ad8 <HAL_InitTick+0x6c>)
 8000a86:	781b      	ldrb	r3, [r3, #0]
 8000a88:	4619      	mov	r1, r3
 8000a8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000a92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a96:	4618      	mov	r0, r3
 8000a98:	f000 f941 	bl	8000d1e <HAL_SYSTICK_Config>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d10f      	bne.n	8000ac2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	2b0f      	cmp	r3, #15
 8000aa6:	d809      	bhi.n	8000abc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	6879      	ldr	r1, [r7, #4]
 8000aac:	f04f 30ff 	mov.w	r0, #4294967295
 8000ab0:	f000 f919 	bl	8000ce6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ab4:	4a0a      	ldr	r2, [pc, #40]	; (8000ae0 <HAL_InitTick+0x74>)
 8000ab6:	687b      	ldr	r3, [r7, #4]
 8000ab8:	6013      	str	r3, [r2, #0]
 8000aba:	e007      	b.n	8000acc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000abc:	2301      	movs	r3, #1
 8000abe:	73fb      	strb	r3, [r7, #15]
 8000ac0:	e004      	b.n	8000acc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	73fb      	strb	r3, [r7, #15]
 8000ac6:	e001      	b.n	8000acc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ac8:	2301      	movs	r3, #1
 8000aca:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000acc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3710      	adds	r7, #16
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	20000008 	.word	0x20000008
 8000adc:	20000000 	.word	0x20000000
 8000ae0:	20000004 	.word	0x20000004

08000ae4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ae8:	4b06      	ldr	r3, [pc, #24]	; (8000b04 <HAL_IncTick+0x20>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	461a      	mov	r2, r3
 8000aee:	4b06      	ldr	r3, [pc, #24]	; (8000b08 <HAL_IncTick+0x24>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4413      	add	r3, r2
 8000af4:	4a04      	ldr	r2, [pc, #16]	; (8000b08 <HAL_IncTick+0x24>)
 8000af6:	6013      	str	r3, [r2, #0]
}
 8000af8:	bf00      	nop
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000008 	.word	0x20000008
 8000b08:	200000a8 	.word	0x200000a8

08000b0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000b10:	4b03      	ldr	r3, [pc, #12]	; (8000b20 <HAL_GetTick+0x14>)
 8000b12:	681b      	ldr	r3, [r3, #0]
}
 8000b14:	4618      	mov	r0, r3
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	200000a8 	.word	0x200000a8

08000b24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b084      	sub	sp, #16
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b2c:	f7ff ffee 	bl	8000b0c <HAL_GetTick>
 8000b30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b3c:	d005      	beq.n	8000b4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000b3e:	4b0a      	ldr	r3, [pc, #40]	; (8000b68 <HAL_Delay+0x44>)
 8000b40:	781b      	ldrb	r3, [r3, #0]
 8000b42:	461a      	mov	r2, r3
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	4413      	add	r3, r2
 8000b48:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000b4a:	bf00      	nop
 8000b4c:	f7ff ffde 	bl	8000b0c <HAL_GetTick>
 8000b50:	4602      	mov	r2, r0
 8000b52:	68bb      	ldr	r3, [r7, #8]
 8000b54:	1ad3      	subs	r3, r2, r3
 8000b56:	68fa      	ldr	r2, [r7, #12]
 8000b58:	429a      	cmp	r2, r3
 8000b5a:	d8f7      	bhi.n	8000b4c <HAL_Delay+0x28>
  {
  }
}
 8000b5c:	bf00      	nop
 8000b5e:	bf00      	nop
 8000b60:	3710      	adds	r7, #16
 8000b62:	46bd      	mov	sp, r7
 8000b64:	bd80      	pop	{r7, pc}
 8000b66:	bf00      	nop
 8000b68:	20000008 	.word	0x20000008

08000b6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b085      	sub	sp, #20
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b7c:	4b0c      	ldr	r3, [pc, #48]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000b7e:	68db      	ldr	r3, [r3, #12]
 8000b80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b82:	68ba      	ldr	r2, [r7, #8]
 8000b84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000b88:	4013      	ands	r3, r2
 8000b8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b8c:	68fb      	ldr	r3, [r7, #12]
 8000b8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <__NVIC_SetPriorityGrouping+0x44>)
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	60d3      	str	r3, [r2, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	e000ed00 	.word	0xe000ed00

08000bb4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb8:	4b04      	ldr	r3, [pc, #16]	; (8000bcc <__NVIC_GetPriorityGrouping+0x18>)
 8000bba:	68db      	ldr	r3, [r3, #12]
 8000bbc:	0a1b      	lsrs	r3, r3, #8
 8000bbe:	f003 0307 	and.w	r3, r3, #7
}
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000ed00 	.word	0xe000ed00

08000bd0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b083      	sub	sp, #12
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	6039      	str	r1, [r7, #0]
 8000bda:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000bdc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	db0a      	blt.n	8000bfa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	b2da      	uxtb	r2, r3
 8000be8:	490c      	ldr	r1, [pc, #48]	; (8000c1c <__NVIC_SetPriority+0x4c>)
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	0112      	lsls	r2, r2, #4
 8000bf0:	b2d2      	uxtb	r2, r2
 8000bf2:	440b      	add	r3, r1
 8000bf4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000bf8:	e00a      	b.n	8000c10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfa:	683b      	ldr	r3, [r7, #0]
 8000bfc:	b2da      	uxtb	r2, r3
 8000bfe:	4908      	ldr	r1, [pc, #32]	; (8000c20 <__NVIC_SetPriority+0x50>)
 8000c00:	79fb      	ldrb	r3, [r7, #7]
 8000c02:	f003 030f 	and.w	r3, r3, #15
 8000c06:	3b04      	subs	r3, #4
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	b2d2      	uxtb	r2, r2
 8000c0c:	440b      	add	r3, r1
 8000c0e:	761a      	strb	r2, [r3, #24]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	e000e100 	.word	0xe000e100
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b089      	sub	sp, #36	; 0x24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c38:	69fb      	ldr	r3, [r7, #28]
 8000c3a:	f1c3 0307 	rsb	r3, r3, #7
 8000c3e:	2b04      	cmp	r3, #4
 8000c40:	bf28      	it	cs
 8000c42:	2304      	movcs	r3, #4
 8000c44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c46:	69fb      	ldr	r3, [r7, #28]
 8000c48:	3304      	adds	r3, #4
 8000c4a:	2b06      	cmp	r3, #6
 8000c4c:	d902      	bls.n	8000c54 <NVIC_EncodePriority+0x30>
 8000c4e:	69fb      	ldr	r3, [r7, #28]
 8000c50:	3b03      	subs	r3, #3
 8000c52:	e000      	b.n	8000c56 <NVIC_EncodePriority+0x32>
 8000c54:	2300      	movs	r3, #0
 8000c56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	69bb      	ldr	r3, [r7, #24]
 8000c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c62:	43da      	mvns	r2, r3
 8000c64:	68bb      	ldr	r3, [r7, #8]
 8000c66:	401a      	ands	r2, r3
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c6c:	f04f 31ff 	mov.w	r1, #4294967295
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	fa01 f303 	lsl.w	r3, r1, r3
 8000c76:	43d9      	mvns	r1, r3
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c7c:	4313      	orrs	r3, r2
         );
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	3724      	adds	r7, #36	; 0x24
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
	...

08000c8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	3b01      	subs	r3, #1
 8000c98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000c9c:	d301      	bcc.n	8000ca2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000c9e:	2301      	movs	r3, #1
 8000ca0:	e00f      	b.n	8000cc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ca2:	4a0a      	ldr	r2, [pc, #40]	; (8000ccc <SysTick_Config+0x40>)
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000caa:	210f      	movs	r1, #15
 8000cac:	f04f 30ff 	mov.w	r0, #4294967295
 8000cb0:	f7ff ff8e 	bl	8000bd0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cb4:	4b05      	ldr	r3, [pc, #20]	; (8000ccc <SysTick_Config+0x40>)
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cba:	4b04      	ldr	r3, [pc, #16]	; (8000ccc <SysTick_Config+0x40>)
 8000cbc:	2207      	movs	r2, #7
 8000cbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000cc0:	2300      	movs	r3, #0
}
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	3708      	adds	r7, #8
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	bd80      	pop	{r7, pc}
 8000cca:	bf00      	nop
 8000ccc:	e000e010 	.word	0xe000e010

08000cd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd0:	b580      	push	{r7, lr}
 8000cd2:	b082      	sub	sp, #8
 8000cd4:	af00      	add	r7, sp, #0
 8000cd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000cd8:	6878      	ldr	r0, [r7, #4]
 8000cda:	f7ff ff47 	bl	8000b6c <__NVIC_SetPriorityGrouping>
}
 8000cde:	bf00      	nop
 8000ce0:	3708      	adds	r7, #8
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}

08000ce6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ce6:	b580      	push	{r7, lr}
 8000ce8:	b086      	sub	sp, #24
 8000cea:	af00      	add	r7, sp, #0
 8000cec:	4603      	mov	r3, r0
 8000cee:	60b9      	str	r1, [r7, #8]
 8000cf0:	607a      	str	r2, [r7, #4]
 8000cf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000cf8:	f7ff ff5c 	bl	8000bb4 <__NVIC_GetPriorityGrouping>
 8000cfc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000cfe:	687a      	ldr	r2, [r7, #4]
 8000d00:	68b9      	ldr	r1, [r7, #8]
 8000d02:	6978      	ldr	r0, [r7, #20]
 8000d04:	f7ff ff8e 	bl	8000c24 <NVIC_EncodePriority>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d0e:	4611      	mov	r1, r2
 8000d10:	4618      	mov	r0, r3
 8000d12:	f7ff ff5d 	bl	8000bd0 <__NVIC_SetPriority>
}
 8000d16:	bf00      	nop
 8000d18:	3718      	adds	r7, #24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}

08000d1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d1e:	b580      	push	{r7, lr}
 8000d20:	b082      	sub	sp, #8
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d26:	6878      	ldr	r0, [r7, #4]
 8000d28:	f7ff ffb0 	bl	8000c8c <SysTick_Config>
 8000d2c:	4603      	mov	r3, r0
}
 8000d2e:	4618      	mov	r0, r3
 8000d30:	3708      	adds	r7, #8
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
	...

08000d38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b087      	sub	sp, #28
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000d42:	2300      	movs	r3, #0
 8000d44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	e166      	b.n	8001016 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	681a      	ldr	r2, [r3, #0]
 8000d4c:	2101      	movs	r1, #1
 8000d4e:	697b      	ldr	r3, [r7, #20]
 8000d50:	fa01 f303 	lsl.w	r3, r1, r3
 8000d54:	4013      	ands	r3, r2
 8000d56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000d58:	68fb      	ldr	r3, [r7, #12]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	f000 8158 	beq.w	8001010 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000d60:	683b      	ldr	r3, [r7, #0]
 8000d62:	685b      	ldr	r3, [r3, #4]
 8000d64:	f003 0303 	and.w	r3, r3, #3
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d005      	beq.n	8000d78 <HAL_GPIO_Init+0x40>
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	685b      	ldr	r3, [r3, #4]
 8000d70:	f003 0303 	and.w	r3, r3, #3
 8000d74:	2b02      	cmp	r3, #2
 8000d76:	d130      	bne.n	8000dda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	689b      	ldr	r3, [r3, #8]
 8000d7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000d7e:	697b      	ldr	r3, [r7, #20]
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2203      	movs	r2, #3
 8000d84:	fa02 f303 	lsl.w	r3, r2, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	4013      	ands	r3, r2
 8000d8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000d90:	683b      	ldr	r3, [r7, #0]
 8000d92:	68da      	ldr	r2, [r3, #12]
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	005b      	lsls	r3, r3, #1
 8000d98:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9c:	693a      	ldr	r2, [r7, #16]
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000da2:	687b      	ldr	r3, [r7, #4]
 8000da4:	693a      	ldr	r2, [r7, #16]
 8000da6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	685b      	ldr	r3, [r3, #4]
 8000dac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000dae:	2201      	movs	r2, #1
 8000db0:	697b      	ldr	r3, [r7, #20]
 8000db2:	fa02 f303 	lsl.w	r3, r2, r3
 8000db6:	43db      	mvns	r3, r3
 8000db8:	693a      	ldr	r2, [r7, #16]
 8000dba:	4013      	ands	r3, r2
 8000dbc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000dbe:	683b      	ldr	r3, [r7, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	091b      	lsrs	r3, r3, #4
 8000dc4:	f003 0201 	and.w	r2, r3, #1
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	fa02 f303 	lsl.w	r3, r2, r3
 8000dce:	693a      	ldr	r2, [r7, #16]
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	693a      	ldr	r2, [r7, #16]
 8000dd8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685b      	ldr	r3, [r3, #4]
 8000dde:	f003 0303 	and.w	r3, r3, #3
 8000de2:	2b03      	cmp	r3, #3
 8000de4:	d017      	beq.n	8000e16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	68db      	ldr	r3, [r3, #12]
 8000dea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	2203      	movs	r2, #3
 8000df2:	fa02 f303 	lsl.w	r3, r2, r3
 8000df6:	43db      	mvns	r3, r3
 8000df8:	693a      	ldr	r2, [r7, #16]
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	689a      	ldr	r2, [r3, #8]
 8000e02:	697b      	ldr	r3, [r7, #20]
 8000e04:	005b      	lsls	r3, r3, #1
 8000e06:	fa02 f303 	lsl.w	r3, r2, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4313      	orrs	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	693a      	ldr	r2, [r7, #16]
 8000e14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e16:	683b      	ldr	r3, [r7, #0]
 8000e18:	685b      	ldr	r3, [r3, #4]
 8000e1a:	f003 0303 	and.w	r3, r3, #3
 8000e1e:	2b02      	cmp	r3, #2
 8000e20:	d123      	bne.n	8000e6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e22:	697b      	ldr	r3, [r7, #20]
 8000e24:	08da      	lsrs	r2, r3, #3
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	3208      	adds	r2, #8
 8000e2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	f003 0307 	and.w	r3, r3, #7
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	220f      	movs	r2, #15
 8000e3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	4013      	ands	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	691a      	ldr	r2, [r3, #16]
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	f003 0307 	and.w	r3, r3, #7
 8000e50:	009b      	lsls	r3, r3, #2
 8000e52:	fa02 f303 	lsl.w	r3, r2, r3
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000e5c:	697b      	ldr	r3, [r7, #20]
 8000e5e:	08da      	lsrs	r2, r3, #3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	3208      	adds	r2, #8
 8000e64:	6939      	ldr	r1, [r7, #16]
 8000e66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000e70:	697b      	ldr	r3, [r7, #20]
 8000e72:	005b      	lsls	r3, r3, #1
 8000e74:	2203      	movs	r2, #3
 8000e76:	fa02 f303 	lsl.w	r3, r2, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	693a      	ldr	r2, [r7, #16]
 8000e7e:	4013      	ands	r3, r2
 8000e80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0203 	and.w	r2, r3, #3
 8000e8a:	697b      	ldr	r3, [r7, #20]
 8000e8c:	005b      	lsls	r3, r3, #1
 8000e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4313      	orrs	r3, r2
 8000e96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	f000 80b2 	beq.w	8001010 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eac:	4b61      	ldr	r3, [pc, #388]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000eae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000eb0:	4a60      	ldr	r2, [pc, #384]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000eb2:	f043 0301 	orr.w	r3, r3, #1
 8000eb6:	6613      	str	r3, [r2, #96]	; 0x60
 8000eb8:	4b5e      	ldr	r3, [pc, #376]	; (8001034 <HAL_GPIO_Init+0x2fc>)
 8000eba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ebc:	f003 0301 	and.w	r3, r3, #1
 8000ec0:	60bb      	str	r3, [r7, #8]
 8000ec2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ec4:	4a5c      	ldr	r2, [pc, #368]	; (8001038 <HAL_GPIO_Init+0x300>)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	089b      	lsrs	r3, r3, #2
 8000eca:	3302      	adds	r3, #2
 8000ecc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000ed0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	009b      	lsls	r3, r3, #2
 8000eda:	220f      	movs	r2, #15
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000eee:	d02b      	beq.n	8000f48 <HAL_GPIO_Init+0x210>
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	4a52      	ldr	r2, [pc, #328]	; (800103c <HAL_GPIO_Init+0x304>)
 8000ef4:	4293      	cmp	r3, r2
 8000ef6:	d025      	beq.n	8000f44 <HAL_GPIO_Init+0x20c>
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a51      	ldr	r2, [pc, #324]	; (8001040 <HAL_GPIO_Init+0x308>)
 8000efc:	4293      	cmp	r3, r2
 8000efe:	d01f      	beq.n	8000f40 <HAL_GPIO_Init+0x208>
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a50      	ldr	r2, [pc, #320]	; (8001044 <HAL_GPIO_Init+0x30c>)
 8000f04:	4293      	cmp	r3, r2
 8000f06:	d019      	beq.n	8000f3c <HAL_GPIO_Init+0x204>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4a4f      	ldr	r2, [pc, #316]	; (8001048 <HAL_GPIO_Init+0x310>)
 8000f0c:	4293      	cmp	r3, r2
 8000f0e:	d013      	beq.n	8000f38 <HAL_GPIO_Init+0x200>
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	4a4e      	ldr	r2, [pc, #312]	; (800104c <HAL_GPIO_Init+0x314>)
 8000f14:	4293      	cmp	r3, r2
 8000f16:	d00d      	beq.n	8000f34 <HAL_GPIO_Init+0x1fc>
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a4d      	ldr	r2, [pc, #308]	; (8001050 <HAL_GPIO_Init+0x318>)
 8000f1c:	4293      	cmp	r3, r2
 8000f1e:	d007      	beq.n	8000f30 <HAL_GPIO_Init+0x1f8>
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	4a4c      	ldr	r2, [pc, #304]	; (8001054 <HAL_GPIO_Init+0x31c>)
 8000f24:	4293      	cmp	r3, r2
 8000f26:	d101      	bne.n	8000f2c <HAL_GPIO_Init+0x1f4>
 8000f28:	2307      	movs	r3, #7
 8000f2a:	e00e      	b.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f2c:	2308      	movs	r3, #8
 8000f2e:	e00c      	b.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f30:	2306      	movs	r3, #6
 8000f32:	e00a      	b.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f34:	2305      	movs	r3, #5
 8000f36:	e008      	b.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f38:	2304      	movs	r3, #4
 8000f3a:	e006      	b.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f3c:	2303      	movs	r3, #3
 8000f3e:	e004      	b.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f40:	2302      	movs	r3, #2
 8000f42:	e002      	b.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f44:	2301      	movs	r3, #1
 8000f46:	e000      	b.n	8000f4a <HAL_GPIO_Init+0x212>
 8000f48:	2300      	movs	r3, #0
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	f002 0203 	and.w	r2, r2, #3
 8000f50:	0092      	lsls	r2, r2, #2
 8000f52:	4093      	lsls	r3, r2
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4313      	orrs	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f5a:	4937      	ldr	r1, [pc, #220]	; (8001038 <HAL_GPIO_Init+0x300>)
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	089b      	lsrs	r3, r3, #2
 8000f60:	3302      	adds	r3, #2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f68:	4b3b      	ldr	r3, [pc, #236]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	43db      	mvns	r3, r3
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	4013      	ands	r3, r2
 8000f76:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	68fb      	ldr	r3, [r7, #12]
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000f8c:	4a32      	ldr	r2, [pc, #200]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000f8e:	693b      	ldr	r3, [r7, #16]
 8000f90:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000f92:	4b31      	ldr	r3, [pc, #196]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000f94:	68db      	ldr	r3, [r3, #12]
 8000f96:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	43db      	mvns	r3, r3
 8000f9c:	693a      	ldr	r2, [r7, #16]
 8000f9e:	4013      	ands	r3, r2
 8000fa0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fa2:	683b      	ldr	r3, [r7, #0]
 8000fa4:	685b      	ldr	r3, [r3, #4]
 8000fa6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	d003      	beq.n	8000fb6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	68fb      	ldr	r3, [r7, #12]
 8000fb2:	4313      	orrs	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fb6:	4a28      	ldr	r2, [pc, #160]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000fb8:	693b      	ldr	r3, [r7, #16]
 8000fba:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fbc:	4b26      	ldr	r3, [pc, #152]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	43db      	mvns	r3, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4013      	ands	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d003      	beq.n	8000fe0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8000fd8:	693a      	ldr	r2, [r7, #16]
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000fe0:	4a1d      	ldr	r2, [pc, #116]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000fe2:	693b      	ldr	r3, [r7, #16]
 8000fe4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000fe6:	4b1c      	ldr	r3, [pc, #112]	; (8001058 <HAL_GPIO_Init+0x320>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fec:	68fb      	ldr	r3, [r7, #12]
 8000fee:	43db      	mvns	r3, r3
 8000ff0:	693a      	ldr	r2, [r7, #16]
 8000ff2:	4013      	ands	r3, r2
 8000ff4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	685b      	ldr	r3, [r3, #4]
 8000ffa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d003      	beq.n	800100a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4313      	orrs	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800100a:	4a13      	ldr	r2, [pc, #76]	; (8001058 <HAL_GPIO_Init+0x320>)
 800100c:	693b      	ldr	r3, [r7, #16]
 800100e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001010:	697b      	ldr	r3, [r7, #20]
 8001012:	3301      	adds	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	681a      	ldr	r2, [r3, #0]
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	fa22 f303 	lsr.w	r3, r2, r3
 8001020:	2b00      	cmp	r3, #0
 8001022:	f47f ae91 	bne.w	8000d48 <HAL_GPIO_Init+0x10>
  }
}
 8001026:	bf00      	nop
 8001028:	bf00      	nop
 800102a:	371c      	adds	r7, #28
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	40021000 	.word	0x40021000
 8001038:	40010000 	.word	0x40010000
 800103c:	48000400 	.word	0x48000400
 8001040:	48000800 	.word	0x48000800
 8001044:	48000c00 	.word	0x48000c00
 8001048:	48001000 	.word	0x48001000
 800104c:	48001400 	.word	0x48001400
 8001050:	48001800 	.word	0x48001800
 8001054:	48001c00 	.word	0x48001c00
 8001058:	40010400 	.word	0x40010400

0800105c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800105c:	b480      	push	{r7}
 800105e:	b083      	sub	sp, #12
 8001060:	af00      	add	r7, sp, #0
 8001062:	6078      	str	r0, [r7, #4]
 8001064:	460b      	mov	r3, r1
 8001066:	807b      	strh	r3, [r7, #2]
 8001068:	4613      	mov	r3, r2
 800106a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800106c:	787b      	ldrb	r3, [r7, #1]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001072:	887a      	ldrh	r2, [r7, #2]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001078:	e002      	b.n	8001080 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800107a:	887a      	ldrh	r2, [r7, #2]
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001080:	bf00      	nop
 8001082:	370c      	adds	r7, #12
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001090:	4b0d      	ldr	r3, [pc, #52]	; (80010c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001098:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800109c:	d102      	bne.n	80010a4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800109e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010a2:	e00b      	b.n	80010bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80010a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80010b2:	d102      	bne.n	80010ba <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80010b4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80010b8:	e000      	b.n	80010bc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80010ba:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80010bc:	4618      	mov	r0, r3
 80010be:	46bd      	mov	sp, r7
 80010c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c4:	4770      	bx	lr
 80010c6:	bf00      	nop
 80010c8:	40007000 	.word	0x40007000

080010cc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d141      	bne.n	800115e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80010da:	4b4b      	ldr	r3, [pc, #300]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80010e6:	d131      	bne.n	800114c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80010e8:	4b47      	ldr	r3, [pc, #284]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80010ee:	4a46      	ldr	r2, [pc, #280]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80010f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010f8:	4b43      	ldr	r3, [pc, #268]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001100:	4a41      	ldr	r2, [pc, #260]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001102:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001106:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001108:	4b40      	ldr	r3, [pc, #256]	; (800120c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2232      	movs	r2, #50	; 0x32
 800110e:	fb02 f303 	mul.w	r3, r2, r3
 8001112:	4a3f      	ldr	r2, [pc, #252]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001114:	fba2 2303 	umull	r2, r3, r2, r3
 8001118:	0c9b      	lsrs	r3, r3, #18
 800111a:	3301      	adds	r3, #1
 800111c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800111e:	e002      	b.n	8001126 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	3b01      	subs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001126:	4b38      	ldr	r3, [pc, #224]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001128:	695b      	ldr	r3, [r3, #20]
 800112a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001132:	d102      	bne.n	800113a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	2b00      	cmp	r3, #0
 8001138:	d1f2      	bne.n	8001120 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800113a:	4b33      	ldr	r3, [pc, #204]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800113c:	695b      	ldr	r3, [r3, #20]
 800113e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001142:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001146:	d158      	bne.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001148:	2303      	movs	r3, #3
 800114a:	e057      	b.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800114c:	4b2e      	ldr	r3, [pc, #184]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800114e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001152:	4a2d      	ldr	r2, [pc, #180]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001154:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001158:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800115c:	e04d      	b.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001164:	d141      	bne.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001166:	4b28      	ldr	r3, [pc, #160]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800116e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001172:	d131      	bne.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001174:	4b24      	ldr	r3, [pc, #144]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001176:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800117a:	4a23      	ldr	r2, [pc, #140]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800117c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001180:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001184:	4b20      	ldr	r3, [pc, #128]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800118c:	4a1e      	ldr	r2, [pc, #120]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800118e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001192:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001194:	4b1d      	ldr	r3, [pc, #116]	; (800120c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2232      	movs	r2, #50	; 0x32
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	4a1c      	ldr	r2, [pc, #112]	; (8001210 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80011a0:	fba2 2303 	umull	r2, r3, r2, r3
 80011a4:	0c9b      	lsrs	r3, r3, #18
 80011a6:	3301      	adds	r3, #1
 80011a8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011aa:	e002      	b.n	80011b2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011b4:	695b      	ldr	r3, [r3, #20]
 80011b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011be:	d102      	bne.n	80011c6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d1f2      	bne.n	80011ac <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d2:	d112      	bne.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80011d4:	2303      	movs	r3, #3
 80011d6:	e011      	b.n	80011fc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80011d8:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011da:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80011de:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011e4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80011e8:	e007      	b.n	80011fa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011ea:	4b07      	ldr	r3, [pc, #28]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80011f2:	4a05      	ldr	r2, [pc, #20]	; (8001208 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80011f4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80011fa:	2300      	movs	r3, #0
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3714      	adds	r7, #20
 8001200:	46bd      	mov	sp, r7
 8001202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001206:	4770      	bx	lr
 8001208:	40007000 	.word	0x40007000
 800120c:	20000000 	.word	0x20000000
 8001210:	431bde83 	.word	0x431bde83

08001214 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001214:	b480      	push	{r7}
 8001216:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001218:	4b05      	ldr	r3, [pc, #20]	; (8001230 <HAL_PWREx_EnableVddIO2+0x1c>)
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	4a04      	ldr	r2, [pc, #16]	; (8001230 <HAL_PWREx_EnableVddIO2+0x1c>)
 800121e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001222:	6053      	str	r3, [r2, #4]
}
 8001224:	bf00      	nop
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	40007000 	.word	0x40007000

08001234 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b088      	sub	sp, #32
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	2b00      	cmp	r3, #0
 8001240:	d102      	bne.n	8001248 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001242:	2301      	movs	r3, #1
 8001244:	f000 bc08 	b.w	8001a58 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001248:	4b96      	ldr	r3, [pc, #600]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001252:	4b94      	ldr	r3, [pc, #592]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001254:	68db      	ldr	r3, [r3, #12]
 8001256:	f003 0303 	and.w	r3, r3, #3
 800125a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	f003 0310 	and.w	r3, r3, #16
 8001264:	2b00      	cmp	r3, #0
 8001266:	f000 80e4 	beq.w	8001432 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800126a:	69bb      	ldr	r3, [r7, #24]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d007      	beq.n	8001280 <HAL_RCC_OscConfig+0x4c>
 8001270:	69bb      	ldr	r3, [r7, #24]
 8001272:	2b0c      	cmp	r3, #12
 8001274:	f040 808b 	bne.w	800138e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001278:	697b      	ldr	r3, [r7, #20]
 800127a:	2b01      	cmp	r3, #1
 800127c:	f040 8087 	bne.w	800138e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001280:	4b88      	ldr	r3, [pc, #544]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f003 0302 	and.w	r3, r3, #2
 8001288:	2b00      	cmp	r3, #0
 800128a:	d005      	beq.n	8001298 <HAL_RCC_OscConfig+0x64>
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	699b      	ldr	r3, [r3, #24]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d101      	bne.n	8001298 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001294:	2301      	movs	r3, #1
 8001296:	e3df      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6a1a      	ldr	r2, [r3, #32]
 800129c:	4b81      	ldr	r3, [pc, #516]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	f003 0308 	and.w	r3, r3, #8
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d004      	beq.n	80012b2 <HAL_RCC_OscConfig+0x7e>
 80012a8:	4b7e      	ldr	r3, [pc, #504]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012b0:	e005      	b.n	80012be <HAL_RCC_OscConfig+0x8a>
 80012b2:	4b7c      	ldr	r3, [pc, #496]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80012b4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012b8:	091b      	lsrs	r3, r3, #4
 80012ba:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012be:	4293      	cmp	r3, r2
 80012c0:	d223      	bcs.n	800130a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6a1b      	ldr	r3, [r3, #32]
 80012c6:	4618      	mov	r0, r3
 80012c8:	f000 fd94 	bl	8001df4 <RCC_SetFlashLatencyFromMSIRange>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e3c0      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012d6:	4b73      	ldr	r3, [pc, #460]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	4a72      	ldr	r2, [pc, #456]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80012dc:	f043 0308 	orr.w	r3, r3, #8
 80012e0:	6013      	str	r3, [r2, #0]
 80012e2:	4b70      	ldr	r3, [pc, #448]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	6a1b      	ldr	r3, [r3, #32]
 80012ee:	496d      	ldr	r1, [pc, #436]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80012f0:	4313      	orrs	r3, r2
 80012f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012f4:	4b6b      	ldr	r3, [pc, #428]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	69db      	ldr	r3, [r3, #28]
 8001300:	021b      	lsls	r3, r3, #8
 8001302:	4968      	ldr	r1, [pc, #416]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001304:	4313      	orrs	r3, r2
 8001306:	604b      	str	r3, [r1, #4]
 8001308:	e025      	b.n	8001356 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800130a:	4b66      	ldr	r3, [pc, #408]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a65      	ldr	r2, [pc, #404]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001310:	f043 0308 	orr.w	r3, r3, #8
 8001314:	6013      	str	r3, [r2, #0]
 8001316:	4b63      	ldr	r3, [pc, #396]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6a1b      	ldr	r3, [r3, #32]
 8001322:	4960      	ldr	r1, [pc, #384]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001324:	4313      	orrs	r3, r2
 8001326:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001328:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69db      	ldr	r3, [r3, #28]
 8001334:	021b      	lsls	r3, r3, #8
 8001336:	495b      	ldr	r1, [pc, #364]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001338:	4313      	orrs	r3, r2
 800133a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800133c:	69bb      	ldr	r3, [r7, #24]
 800133e:	2b00      	cmp	r3, #0
 8001340:	d109      	bne.n	8001356 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6a1b      	ldr	r3, [r3, #32]
 8001346:	4618      	mov	r0, r3
 8001348:	f000 fd54 	bl	8001df4 <RCC_SetFlashLatencyFromMSIRange>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001352:	2301      	movs	r3, #1
 8001354:	e380      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001356:	f000 fcc1 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 800135a:	4602      	mov	r2, r0
 800135c:	4b51      	ldr	r3, [pc, #324]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	091b      	lsrs	r3, r3, #4
 8001362:	f003 030f 	and.w	r3, r3, #15
 8001366:	4950      	ldr	r1, [pc, #320]	; (80014a8 <HAL_RCC_OscConfig+0x274>)
 8001368:	5ccb      	ldrb	r3, [r1, r3]
 800136a:	f003 031f 	and.w	r3, r3, #31
 800136e:	fa22 f303 	lsr.w	r3, r2, r3
 8001372:	4a4e      	ldr	r2, [pc, #312]	; (80014ac <HAL_RCC_OscConfig+0x278>)
 8001374:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001376:	4b4e      	ldr	r3, [pc, #312]	; (80014b0 <HAL_RCC_OscConfig+0x27c>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	4618      	mov	r0, r3
 800137c:	f7ff fb76 	bl	8000a6c <HAL_InitTick>
 8001380:	4603      	mov	r3, r0
 8001382:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001384:	7bfb      	ldrb	r3, [r7, #15]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d052      	beq.n	8001430 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800138a:	7bfb      	ldrb	r3, [r7, #15]
 800138c:	e364      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	699b      	ldr	r3, [r3, #24]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d032      	beq.n	80013fc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001396:	4b43      	ldr	r3, [pc, #268]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a42      	ldr	r2, [pc, #264]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800139c:	f043 0301 	orr.w	r3, r3, #1
 80013a0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013a2:	f7ff fbb3 	bl	8000b0c <HAL_GetTick>
 80013a6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013a8:	e008      	b.n	80013bc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80013aa:	f7ff fbaf 	bl	8000b0c <HAL_GetTick>
 80013ae:	4602      	mov	r2, r0
 80013b0:	693b      	ldr	r3, [r7, #16]
 80013b2:	1ad3      	subs	r3, r2, r3
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d901      	bls.n	80013bc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013b8:	2303      	movs	r3, #3
 80013ba:	e34d      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013bc:	4b39      	ldr	r3, [pc, #228]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 0302 	and.w	r3, r3, #2
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d0f0      	beq.n	80013aa <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013c8:	4b36      	ldr	r3, [pc, #216]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a35      	ldr	r2, [pc, #212]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013ce:	f043 0308 	orr.w	r3, r3, #8
 80013d2:	6013      	str	r3, [r2, #0]
 80013d4:	4b33      	ldr	r3, [pc, #204]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	6a1b      	ldr	r3, [r3, #32]
 80013e0:	4930      	ldr	r1, [pc, #192]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013e2:	4313      	orrs	r3, r2
 80013e4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013e6:	4b2f      	ldr	r3, [pc, #188]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	69db      	ldr	r3, [r3, #28]
 80013f2:	021b      	lsls	r3, r3, #8
 80013f4:	492b      	ldr	r1, [pc, #172]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013f6:	4313      	orrs	r3, r2
 80013f8:	604b      	str	r3, [r1, #4]
 80013fa:	e01a      	b.n	8001432 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013fc:	4b29      	ldr	r3, [pc, #164]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a28      	ldr	r2, [pc, #160]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001402:	f023 0301 	bic.w	r3, r3, #1
 8001406:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001408:	f7ff fb80 	bl	8000b0c <HAL_GetTick>
 800140c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800140e:	e008      	b.n	8001422 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001410:	f7ff fb7c 	bl	8000b0c <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	693b      	ldr	r3, [r7, #16]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d901      	bls.n	8001422 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	e31a      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001422:	4b20      	ldr	r3, [pc, #128]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d1f0      	bne.n	8001410 <HAL_RCC_OscConfig+0x1dc>
 800142e:	e000      	b.n	8001432 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001430:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	f003 0301 	and.w	r3, r3, #1
 800143a:	2b00      	cmp	r3, #0
 800143c:	d073      	beq.n	8001526 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b08      	cmp	r3, #8
 8001442:	d005      	beq.n	8001450 <HAL_RCC_OscConfig+0x21c>
 8001444:	69bb      	ldr	r3, [r7, #24]
 8001446:	2b0c      	cmp	r3, #12
 8001448:	d10e      	bne.n	8001468 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800144a:	697b      	ldr	r3, [r7, #20]
 800144c:	2b03      	cmp	r3, #3
 800144e:	d10b      	bne.n	8001468 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001450:	4b14      	ldr	r3, [pc, #80]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d063      	beq.n	8001524 <HAL_RCC_OscConfig+0x2f0>
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d15f      	bne.n	8001524 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e2f7      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	685b      	ldr	r3, [r3, #4]
 800146c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001470:	d106      	bne.n	8001480 <HAL_RCC_OscConfig+0x24c>
 8001472:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a0b      	ldr	r2, [pc, #44]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001478:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800147c:	6013      	str	r3, [r2, #0]
 800147e:	e025      	b.n	80014cc <HAL_RCC_OscConfig+0x298>
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001488:	d114      	bne.n	80014b4 <HAL_RCC_OscConfig+0x280>
 800148a:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4a05      	ldr	r2, [pc, #20]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001490:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001494:	6013      	str	r3, [r2, #0]
 8001496:	4b03      	ldr	r3, [pc, #12]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	4a02      	ldr	r2, [pc, #8]	; (80014a4 <HAL_RCC_OscConfig+0x270>)
 800149c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014a0:	6013      	str	r3, [r2, #0]
 80014a2:	e013      	b.n	80014cc <HAL_RCC_OscConfig+0x298>
 80014a4:	40021000 	.word	0x40021000
 80014a8:	08002818 	.word	0x08002818
 80014ac:	20000000 	.word	0x20000000
 80014b0:	20000004 	.word	0x20000004
 80014b4:	4ba0      	ldr	r3, [pc, #640]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a9f      	ldr	r2, [pc, #636]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80014ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014be:	6013      	str	r3, [r2, #0]
 80014c0:	4b9d      	ldr	r3, [pc, #628]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	4a9c      	ldr	r2, [pc, #624]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80014c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d013      	beq.n	80014fc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014d4:	f7ff fb1a 	bl	8000b0c <HAL_GetTick>
 80014d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014da:	e008      	b.n	80014ee <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014dc:	f7ff fb16 	bl	8000b0c <HAL_GetTick>
 80014e0:	4602      	mov	r2, r0
 80014e2:	693b      	ldr	r3, [r7, #16]
 80014e4:	1ad3      	subs	r3, r2, r3
 80014e6:	2b64      	cmp	r3, #100	; 0x64
 80014e8:	d901      	bls.n	80014ee <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014ea:	2303      	movs	r3, #3
 80014ec:	e2b4      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ee:	4b92      	ldr	r3, [pc, #584]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d0f0      	beq.n	80014dc <HAL_RCC_OscConfig+0x2a8>
 80014fa:	e014      	b.n	8001526 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014fc:	f7ff fb06 	bl	8000b0c <HAL_GetTick>
 8001500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001502:	e008      	b.n	8001516 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001504:	f7ff fb02 	bl	8000b0c <HAL_GetTick>
 8001508:	4602      	mov	r2, r0
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	1ad3      	subs	r3, r2, r3
 800150e:	2b64      	cmp	r3, #100	; 0x64
 8001510:	d901      	bls.n	8001516 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001512:	2303      	movs	r3, #3
 8001514:	e2a0      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001516:	4b88      	ldr	r3, [pc, #544]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800151e:	2b00      	cmp	r3, #0
 8001520:	d1f0      	bne.n	8001504 <HAL_RCC_OscConfig+0x2d0>
 8001522:	e000      	b.n	8001526 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001524:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f003 0302 	and.w	r3, r3, #2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d060      	beq.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	2b04      	cmp	r3, #4
 8001536:	d005      	beq.n	8001544 <HAL_RCC_OscConfig+0x310>
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	2b0c      	cmp	r3, #12
 800153c:	d119      	bne.n	8001572 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800153e:	697b      	ldr	r3, [r7, #20]
 8001540:	2b02      	cmp	r3, #2
 8001542:	d116      	bne.n	8001572 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001544:	4b7c      	ldr	r3, [pc, #496]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800154c:	2b00      	cmp	r3, #0
 800154e:	d005      	beq.n	800155c <HAL_RCC_OscConfig+0x328>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	68db      	ldr	r3, [r3, #12]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001558:	2301      	movs	r3, #1
 800155a:	e27d      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155c:	4b76      	ldr	r3, [pc, #472]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800155e:	685b      	ldr	r3, [r3, #4]
 8001560:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	691b      	ldr	r3, [r3, #16]
 8001568:	061b      	lsls	r3, r3, #24
 800156a:	4973      	ldr	r1, [pc, #460]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800156c:	4313      	orrs	r3, r2
 800156e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001570:	e040      	b.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	68db      	ldr	r3, [r3, #12]
 8001576:	2b00      	cmp	r3, #0
 8001578:	d023      	beq.n	80015c2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800157a:	4b6f      	ldr	r3, [pc, #444]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4a6e      	ldr	r2, [pc, #440]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 8001580:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001584:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001586:	f7ff fac1 	bl	8000b0c <HAL_GetTick>
 800158a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800158c:	e008      	b.n	80015a0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800158e:	f7ff fabd 	bl	8000b0c <HAL_GetTick>
 8001592:	4602      	mov	r2, r0
 8001594:	693b      	ldr	r3, [r7, #16]
 8001596:	1ad3      	subs	r3, r2, r3
 8001598:	2b02      	cmp	r3, #2
 800159a:	d901      	bls.n	80015a0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800159c:	2303      	movs	r3, #3
 800159e:	e25b      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015a0:	4b65      	ldr	r3, [pc, #404]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d0f0      	beq.n	800158e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ac:	4b62      	ldr	r3, [pc, #392]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	691b      	ldr	r3, [r3, #16]
 80015b8:	061b      	lsls	r3, r3, #24
 80015ba:	495f      	ldr	r1, [pc, #380]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80015bc:	4313      	orrs	r3, r2
 80015be:	604b      	str	r3, [r1, #4]
 80015c0:	e018      	b.n	80015f4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015c2:	4b5d      	ldr	r3, [pc, #372]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	4a5c      	ldr	r2, [pc, #368]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80015c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015cc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ce:	f7ff fa9d 	bl	8000b0c <HAL_GetTick>
 80015d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d4:	e008      	b.n	80015e8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d6:	f7ff fa99 	bl	8000b0c <HAL_GetTick>
 80015da:	4602      	mov	r2, r0
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	1ad3      	subs	r3, r2, r3
 80015e0:	2b02      	cmp	r3, #2
 80015e2:	d901      	bls.n	80015e8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015e4:	2303      	movs	r3, #3
 80015e6:	e237      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015e8:	4b53      	ldr	r3, [pc, #332]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d1f0      	bne.n	80015d6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f003 0308 	and.w	r3, r3, #8
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d03c      	beq.n	800167a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	695b      	ldr	r3, [r3, #20]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d01c      	beq.n	8001642 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001608:	4b4b      	ldr	r3, [pc, #300]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800160a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800160e:	4a4a      	ldr	r2, [pc, #296]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 8001610:	f043 0301 	orr.w	r3, r3, #1
 8001614:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001618:	f7ff fa78 	bl	8000b0c <HAL_GetTick>
 800161c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800161e:	e008      	b.n	8001632 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001620:	f7ff fa74 	bl	8000b0c <HAL_GetTick>
 8001624:	4602      	mov	r2, r0
 8001626:	693b      	ldr	r3, [r7, #16]
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	2b02      	cmp	r3, #2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e212      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001632:	4b41      	ldr	r3, [pc, #260]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 8001634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001638:	f003 0302 	and.w	r3, r3, #2
 800163c:	2b00      	cmp	r3, #0
 800163e:	d0ef      	beq.n	8001620 <HAL_RCC_OscConfig+0x3ec>
 8001640:	e01b      	b.n	800167a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001642:	4b3d      	ldr	r3, [pc, #244]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 8001644:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001648:	4a3b      	ldr	r2, [pc, #236]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800164a:	f023 0301 	bic.w	r3, r3, #1
 800164e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001652:	f7ff fa5b 	bl	8000b0c <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800165a:	f7ff fa57 	bl	8000b0c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e1f5      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800166c:	4b32      	ldr	r3, [pc, #200]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800166e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001672:	f003 0302 	and.w	r3, r3, #2
 8001676:	2b00      	cmp	r3, #0
 8001678:	d1ef      	bne.n	800165a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f003 0304 	and.w	r3, r3, #4
 8001682:	2b00      	cmp	r3, #0
 8001684:	f000 80a6 	beq.w	80017d4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001688:	2300      	movs	r3, #0
 800168a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800168c:	4b2a      	ldr	r3, [pc, #168]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800168e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001690:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001694:	2b00      	cmp	r3, #0
 8001696:	d10d      	bne.n	80016b4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001698:	4b27      	ldr	r3, [pc, #156]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800169a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800169c:	4a26      	ldr	r2, [pc, #152]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800169e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016a2:	6593      	str	r3, [r2, #88]	; 0x58
 80016a4:	4b24      	ldr	r3, [pc, #144]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80016a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016ac:	60bb      	str	r3, [r7, #8]
 80016ae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016b0:	2301      	movs	r3, #1
 80016b2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016b4:	4b21      	ldr	r3, [pc, #132]	; (800173c <HAL_RCC_OscConfig+0x508>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d118      	bne.n	80016f2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016c0:	4b1e      	ldr	r3, [pc, #120]	; (800173c <HAL_RCC_OscConfig+0x508>)
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a1d      	ldr	r2, [pc, #116]	; (800173c <HAL_RCC_OscConfig+0x508>)
 80016c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ca:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016cc:	f7ff fa1e 	bl	8000b0c <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016d4:	f7ff fa1a 	bl	8000b0c <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b02      	cmp	r3, #2
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1b8      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <HAL_RCC_OscConfig+0x508>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d0f0      	beq.n	80016d4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	2b01      	cmp	r3, #1
 80016f8:	d108      	bne.n	800170c <HAL_RCC_OscConfig+0x4d8>
 80016fa:	4b0f      	ldr	r3, [pc, #60]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 80016fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001700:	4a0d      	ldr	r2, [pc, #52]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800170a:	e029      	b.n	8001760 <HAL_RCC_OscConfig+0x52c>
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	2b05      	cmp	r3, #5
 8001712:	d115      	bne.n	8001740 <HAL_RCC_OscConfig+0x50c>
 8001714:	4b08      	ldr	r3, [pc, #32]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	4a07      	ldr	r2, [pc, #28]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800171c:	f043 0304 	orr.w	r3, r3, #4
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001724:	4b04      	ldr	r3, [pc, #16]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 8001726:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800172a:	4a03      	ldr	r2, [pc, #12]	; (8001738 <HAL_RCC_OscConfig+0x504>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001734:	e014      	b.n	8001760 <HAL_RCC_OscConfig+0x52c>
 8001736:	bf00      	nop
 8001738:	40021000 	.word	0x40021000
 800173c:	40007000 	.word	0x40007000
 8001740:	4b9d      	ldr	r3, [pc, #628]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	4a9c      	ldr	r2, [pc, #624]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001750:	4b99      	ldr	r3, [pc, #612]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001752:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001756:	4a98      	ldr	r2, [pc, #608]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001758:	f023 0304 	bic.w	r3, r3, #4
 800175c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	689b      	ldr	r3, [r3, #8]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d016      	beq.n	8001796 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001768:	f7ff f9d0 	bl	8000b0c <HAL_GetTick>
 800176c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800176e:	e00a      	b.n	8001786 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001770:	f7ff f9cc 	bl	8000b0c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f241 3288 	movw	r2, #5000	; 0x1388
 800177e:	4293      	cmp	r3, r2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e168      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001786:	4b8c      	ldr	r3, [pc, #560]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0ed      	beq.n	8001770 <HAL_RCC_OscConfig+0x53c>
 8001794:	e015      	b.n	80017c2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001796:	f7ff f9b9 	bl	8000b0c <HAL_GetTick>
 800179a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800179c:	e00a      	b.n	80017b4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800179e:	f7ff f9b5 	bl	8000b0c <HAL_GetTick>
 80017a2:	4602      	mov	r2, r0
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017ac:	4293      	cmp	r3, r2
 80017ae:	d901      	bls.n	80017b4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e151      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017b4:	4b80      	ldr	r3, [pc, #512]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 80017b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ba:	f003 0302 	and.w	r3, r3, #2
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d1ed      	bne.n	800179e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017c2:	7ffb      	ldrb	r3, [r7, #31]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d105      	bne.n	80017d4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017c8:	4b7b      	ldr	r3, [pc, #492]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a7a      	ldr	r2, [pc, #488]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 80017ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	f003 0320 	and.w	r3, r3, #32
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d03c      	beq.n	800185a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d01c      	beq.n	8001822 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017e8:	4b73      	ldr	r3, [pc, #460]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 80017ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017ee:	4a72      	ldr	r2, [pc, #456]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 80017f0:	f043 0301 	orr.w	r3, r3, #1
 80017f4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff f988 	bl	8000b0c <HAL_GetTick>
 80017fc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001800:	f7ff f984 	bl	8000b0c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	693b      	ldr	r3, [r7, #16]
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e122      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001812:	4b69      	ldr	r3, [pc, #420]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001818:	f003 0302 	and.w	r3, r3, #2
 800181c:	2b00      	cmp	r3, #0
 800181e:	d0ef      	beq.n	8001800 <HAL_RCC_OscConfig+0x5cc>
 8001820:	e01b      	b.n	800185a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001822:	4b65      	ldr	r3, [pc, #404]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001824:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001828:	4a63      	ldr	r2, [pc, #396]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 800182a:	f023 0301 	bic.w	r3, r3, #1
 800182e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001832:	f7ff f96b 	bl	8000b0c <HAL_GetTick>
 8001836:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001838:	e008      	b.n	800184c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800183a:	f7ff f967 	bl	8000b0c <HAL_GetTick>
 800183e:	4602      	mov	r2, r0
 8001840:	693b      	ldr	r3, [r7, #16]
 8001842:	1ad3      	subs	r3, r2, r3
 8001844:	2b02      	cmp	r3, #2
 8001846:	d901      	bls.n	800184c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001848:	2303      	movs	r3, #3
 800184a:	e105      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800184c:	4b5a      	ldr	r3, [pc, #360]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 800184e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001852:	f003 0302 	and.w	r3, r3, #2
 8001856:	2b00      	cmp	r3, #0
 8001858:	d1ef      	bne.n	800183a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800185e:	2b00      	cmp	r3, #0
 8001860:	f000 80f9 	beq.w	8001a56 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001868:	2b02      	cmp	r3, #2
 800186a:	f040 80cf 	bne.w	8001a0c <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800186e:	4b52      	ldr	r3, [pc, #328]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001874:	697b      	ldr	r3, [r7, #20]
 8001876:	f003 0203 	and.w	r2, r3, #3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800187e:	429a      	cmp	r2, r3
 8001880:	d12c      	bne.n	80018dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188c:	3b01      	subs	r3, #1
 800188e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d123      	bne.n	80018dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800189e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d11b      	bne.n	80018dc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018ae:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d113      	bne.n	80018dc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018b4:	697b      	ldr	r3, [r7, #20]
 80018b6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018be:	085b      	lsrs	r3, r3, #1
 80018c0:	3b01      	subs	r3, #1
 80018c2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018c4:	429a      	cmp	r2, r3
 80018c6:	d109      	bne.n	80018dc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018c8:	697b      	ldr	r3, [r7, #20]
 80018ca:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018d2:	085b      	lsrs	r3, r3, #1
 80018d4:	3b01      	subs	r3, #1
 80018d6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018d8:	429a      	cmp	r2, r3
 80018da:	d071      	beq.n	80019c0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018dc:	69bb      	ldr	r3, [r7, #24]
 80018de:	2b0c      	cmp	r3, #12
 80018e0:	d068      	beq.n	80019b4 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018e2:	4b35      	ldr	r3, [pc, #212]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d105      	bne.n	80018fa <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 80018ee:	4b32      	ldr	r3, [pc, #200]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d001      	beq.n	80018fe <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 80018fa:	2301      	movs	r3, #1
 80018fc:	e0ac      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018fe:	4b2e      	ldr	r3, [pc, #184]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4a2d      	ldr	r2, [pc, #180]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001904:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001908:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800190a:	f7ff f8ff 	bl	8000b0c <HAL_GetTick>
 800190e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001910:	e008      	b.n	8001924 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001912:	f7ff f8fb 	bl	8000b0c <HAL_GetTick>
 8001916:	4602      	mov	r2, r0
 8001918:	693b      	ldr	r3, [r7, #16]
 800191a:	1ad3      	subs	r3, r2, r3
 800191c:	2b02      	cmp	r3, #2
 800191e:	d901      	bls.n	8001924 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001920:	2303      	movs	r3, #3
 8001922:	e099      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001924:	4b24      	ldr	r3, [pc, #144]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800192c:	2b00      	cmp	r3, #0
 800192e:	d1f0      	bne.n	8001912 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001930:	4b21      	ldr	r3, [pc, #132]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001932:	68da      	ldr	r2, [r3, #12]
 8001934:	4b21      	ldr	r3, [pc, #132]	; (80019bc <HAL_RCC_OscConfig+0x788>)
 8001936:	4013      	ands	r3, r2
 8001938:	687a      	ldr	r2, [r7, #4]
 800193a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001940:	3a01      	subs	r2, #1
 8001942:	0112      	lsls	r2, r2, #4
 8001944:	4311      	orrs	r1, r2
 8001946:	687a      	ldr	r2, [r7, #4]
 8001948:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800194a:	0212      	lsls	r2, r2, #8
 800194c:	4311      	orrs	r1, r2
 800194e:	687a      	ldr	r2, [r7, #4]
 8001950:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001952:	0852      	lsrs	r2, r2, #1
 8001954:	3a01      	subs	r2, #1
 8001956:	0552      	lsls	r2, r2, #21
 8001958:	4311      	orrs	r1, r2
 800195a:	687a      	ldr	r2, [r7, #4]
 800195c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800195e:	0852      	lsrs	r2, r2, #1
 8001960:	3a01      	subs	r2, #1
 8001962:	0652      	lsls	r2, r2, #25
 8001964:	4311      	orrs	r1, r2
 8001966:	687a      	ldr	r2, [r7, #4]
 8001968:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800196a:	06d2      	lsls	r2, r2, #27
 800196c:	430a      	orrs	r2, r1
 800196e:	4912      	ldr	r1, [pc, #72]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001970:	4313      	orrs	r3, r2
 8001972:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001974:	4b10      	ldr	r3, [pc, #64]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0f      	ldr	r2, [pc, #60]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 800197a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800197e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001980:	4b0d      	ldr	r3, [pc, #52]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	4a0c      	ldr	r2, [pc, #48]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 8001986:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800198a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800198c:	f7ff f8be 	bl	8000b0c <HAL_GetTick>
 8001990:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001992:	e008      	b.n	80019a6 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001994:	f7ff f8ba 	bl	8000b0c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	2b02      	cmp	r3, #2
 80019a0:	d901      	bls.n	80019a6 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80019a2:	2303      	movs	r3, #3
 80019a4:	e058      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a6:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <HAL_RCC_OscConfig+0x784>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d0f0      	beq.n	8001994 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019b2:	e050      	b.n	8001a56 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80019b4:	2301      	movs	r3, #1
 80019b6:	e04f      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
 80019b8:	40021000 	.word	0x40021000
 80019bc:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019c0:	4b27      	ldr	r3, [pc, #156]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d144      	bne.n	8001a56 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019cc:	4b24      	ldr	r3, [pc, #144]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 80019d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d8:	4b21      	ldr	r3, [pc, #132]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 80019da:	68db      	ldr	r3, [r3, #12]
 80019dc:	4a20      	ldr	r2, [pc, #128]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 80019de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019e4:	f7ff f892 	bl	8000b0c <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ec:	f7ff f88e 	bl	8000b0c <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e02c      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fe:	4b18      	ldr	r3, [pc, #96]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d0f0      	beq.n	80019ec <HAL_RCC_OscConfig+0x7b8>
 8001a0a:	e024      	b.n	8001a56 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b0c      	cmp	r3, #12
 8001a10:	d01f      	beq.n	8001a52 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a12:	4b13      	ldr	r3, [pc, #76]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a12      	ldr	r2, [pc, #72]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 8001a18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1e:	f7ff f875 	bl	8000b0c <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a26:	f7ff f871 	bl	8000b0c <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e00f      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a38:	4b09      	ldr	r3, [pc, #36]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d1f0      	bne.n	8001a26 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001a44:	4b06      	ldr	r3, [pc, #24]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	4905      	ldr	r1, [pc, #20]	; (8001a60 <HAL_RCC_OscConfig+0x82c>)
 8001a4a:	4b06      	ldr	r3, [pc, #24]	; (8001a64 <HAL_RCC_OscConfig+0x830>)
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60cb      	str	r3, [r1, #12]
 8001a50:	e001      	b.n	8001a56 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a52:	2301      	movs	r3, #1
 8001a54:	e000      	b.n	8001a58 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001a56:	2300      	movs	r3, #0
}
 8001a58:	4618      	mov	r0, r3
 8001a5a:	3720      	adds	r7, #32
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	bd80      	pop	{r7, pc}
 8001a60:	40021000 	.word	0x40021000
 8001a64:	feeefffc 	.word	0xfeeefffc

08001a68 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a68:	b580      	push	{r7, lr}
 8001a6a:	b086      	sub	sp, #24
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
 8001a70:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	d101      	bne.n	8001a80 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e11d      	b.n	8001cbc <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a80:	4b90      	ldr	r3, [pc, #576]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 030f 	and.w	r3, r3, #15
 8001a88:	683a      	ldr	r2, [r7, #0]
 8001a8a:	429a      	cmp	r2, r3
 8001a8c:	d910      	bls.n	8001ab0 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a8e:	4b8d      	ldr	r3, [pc, #564]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 020f 	bic.w	r2, r3, #15
 8001a96:	498b      	ldr	r1, [pc, #556]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001a98:	683b      	ldr	r3, [r7, #0]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a9e:	4b89      	ldr	r3, [pc, #548]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f003 030f 	and.w	r3, r3, #15
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d001      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001aac:	2301      	movs	r3, #1
 8001aae:	e105      	b.n	8001cbc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b81      	ldr	r3, [pc, #516]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d908      	bls.n	8001ade <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b7e      	ldr	r3, [pc, #504]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	497b      	ldr	r1, [pc, #492]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0301 	and.w	r3, r3, #1
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d079      	beq.n	8001bde <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	d11e      	bne.n	8001b30 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	4b75      	ldr	r3, [pc, #468]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d101      	bne.n	8001b02 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001afe:	2301      	movs	r3, #1
 8001b00:	e0dc      	b.n	8001cbc <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001b02:	f000 f9d1 	bl	8001ea8 <RCC_GetSysClockFreqFromPLLSource>
 8001b06:	4603      	mov	r3, r0
 8001b08:	4a70      	ldr	r2, [pc, #448]	; (8001ccc <HAL_RCC_ClockConfig+0x264>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d946      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b0e:	4b6e      	ldr	r3, [pc, #440]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d140      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b1a:	4b6b      	ldr	r3, [pc, #428]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b22:	4a69      	ldr	r2, [pc, #420]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b24:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b28:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b2a:	2380      	movs	r3, #128	; 0x80
 8001b2c:	617b      	str	r3, [r7, #20]
 8001b2e:	e035      	b.n	8001b9c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	685b      	ldr	r3, [r3, #4]
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d107      	bne.n	8001b48 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b38:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d115      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b44:	2301      	movs	r3, #1
 8001b46:	e0b9      	b.n	8001cbc <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d107      	bne.n	8001b60 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b50:	4b5d      	ldr	r3, [pc, #372]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d109      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e0ad      	b.n	8001cbc <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b60:	4b59      	ldr	r3, [pc, #356]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d101      	bne.n	8001b70 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e0a5      	b.n	8001cbc <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001b70:	f000 f8b4 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001b74:	4603      	mov	r3, r0
 8001b76:	4a55      	ldr	r2, [pc, #340]	; (8001ccc <HAL_RCC_ClockConfig+0x264>)
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d90f      	bls.n	8001b9c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001b7c:	4b52      	ldr	r3, [pc, #328]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001b88:	4b4f      	ldr	r3, [pc, #316]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001b90:	4a4d      	ldr	r2, [pc, #308]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b92:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001b96:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001b98:	2380      	movs	r3, #128	; 0x80
 8001b9a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b9c:	4b4a      	ldr	r3, [pc, #296]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001b9e:	689b      	ldr	r3, [r3, #8]
 8001ba0:	f023 0203 	bic.w	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	685b      	ldr	r3, [r3, #4]
 8001ba8:	4947      	ldr	r1, [pc, #284]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001baa:	4313      	orrs	r3, r2
 8001bac:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bae:	f7fe ffad 	bl	8000b0c <HAL_GetTick>
 8001bb2:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb4:	e00a      	b.n	8001bcc <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb6:	f7fe ffa9 	bl	8000b0c <HAL_GetTick>
 8001bba:	4602      	mov	r2, r0
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	1ad3      	subs	r3, r2, r3
 8001bc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d901      	bls.n	8001bcc <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001bc8:	2303      	movs	r3, #3
 8001bca:	e077      	b.n	8001cbc <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bcc:	4b3e      	ldr	r3, [pc, #248]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001bce:	689b      	ldr	r3, [r3, #8]
 8001bd0:	f003 020c 	and.w	r2, r3, #12
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	685b      	ldr	r3, [r3, #4]
 8001bd8:	009b      	lsls	r3, r3, #2
 8001bda:	429a      	cmp	r2, r3
 8001bdc:	d1eb      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	2b80      	cmp	r3, #128	; 0x80
 8001be2:	d105      	bne.n	8001bf0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001be4:	4b38      	ldr	r3, [pc, #224]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	4a37      	ldr	r2, [pc, #220]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001bea:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001bee:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f003 0302 	and.w	r3, r3, #2
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d010      	beq.n	8001c1e <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	689a      	ldr	r2, [r3, #8]
 8001c00:	4b31      	ldr	r3, [pc, #196]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	d208      	bcs.n	8001c1e <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c0c:	4b2e      	ldr	r3, [pc, #184]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c0e:	689b      	ldr	r3, [r3, #8]
 8001c10:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	492b      	ldr	r1, [pc, #172]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c1a:	4313      	orrs	r3, r2
 8001c1c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c1e:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	f003 030f 	and.w	r3, r3, #15
 8001c26:	683a      	ldr	r2, [r7, #0]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d210      	bcs.n	8001c4e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	f023 020f 	bic.w	r2, r3, #15
 8001c34:	4923      	ldr	r1, [pc, #140]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <HAL_RCC_ClockConfig+0x25c>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	f003 030f 	and.w	r3, r3, #15
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d001      	beq.n	8001c4e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001c4a:	2301      	movs	r3, #1
 8001c4c:	e036      	b.n	8001cbc <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 0304 	and.w	r3, r3, #4
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d008      	beq.n	8001c6c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c5a:	4b1b      	ldr	r3, [pc, #108]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	68db      	ldr	r3, [r3, #12]
 8001c66:	4918      	ldr	r1, [pc, #96]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c68:	4313      	orrs	r3, r2
 8001c6a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0308 	and.w	r3, r3, #8
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d009      	beq.n	8001c8c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c78:	4b13      	ldr	r3, [pc, #76]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	691b      	ldr	r3, [r3, #16]
 8001c84:	00db      	lsls	r3, r3, #3
 8001c86:	4910      	ldr	r1, [pc, #64]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c88:	4313      	orrs	r3, r2
 8001c8a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c8c:	f000 f826 	bl	8001cdc <HAL_RCC_GetSysClockFreq>
 8001c90:	4602      	mov	r2, r0
 8001c92:	4b0d      	ldr	r3, [pc, #52]	; (8001cc8 <HAL_RCC_ClockConfig+0x260>)
 8001c94:	689b      	ldr	r3, [r3, #8]
 8001c96:	091b      	lsrs	r3, r3, #4
 8001c98:	f003 030f 	and.w	r3, r3, #15
 8001c9c:	490c      	ldr	r1, [pc, #48]	; (8001cd0 <HAL_RCC_ClockConfig+0x268>)
 8001c9e:	5ccb      	ldrb	r3, [r1, r3]
 8001ca0:	f003 031f 	and.w	r3, r3, #31
 8001ca4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ca8:	4a0a      	ldr	r2, [pc, #40]	; (8001cd4 <HAL_RCC_ClockConfig+0x26c>)
 8001caa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001cac:	4b0a      	ldr	r3, [pc, #40]	; (8001cd8 <HAL_RCC_ClockConfig+0x270>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7fe fedb 	bl	8000a6c <HAL_InitTick>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	73fb      	strb	r3, [r7, #15]

  return status;
 8001cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40022000 	.word	0x40022000
 8001cc8:	40021000 	.word	0x40021000
 8001ccc:	04c4b400 	.word	0x04c4b400
 8001cd0:	08002818 	.word	0x08002818
 8001cd4:	20000000 	.word	0x20000000
 8001cd8:	20000004 	.word	0x20000004

08001cdc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b089      	sub	sp, #36	; 0x24
 8001ce0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	61fb      	str	r3, [r7, #28]
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cea:	4b3e      	ldr	r3, [pc, #248]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cec:	689b      	ldr	r3, [r3, #8]
 8001cee:	f003 030c 	and.w	r3, r3, #12
 8001cf2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cf4:	4b3b      	ldr	r3, [pc, #236]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf6:	68db      	ldr	r3, [r3, #12]
 8001cf8:	f003 0303 	and.w	r3, r3, #3
 8001cfc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d005      	beq.n	8001d10 <HAL_RCC_GetSysClockFreq+0x34>
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	2b0c      	cmp	r3, #12
 8001d08:	d121      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d11e      	bne.n	8001d4e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001d10:	4b34      	ldr	r3, [pc, #208]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0308 	and.w	r3, r3, #8
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d107      	bne.n	8001d2c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d1c:	4b31      	ldr	r3, [pc, #196]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d22:	0a1b      	lsrs	r3, r3, #8
 8001d24:	f003 030f 	and.w	r3, r3, #15
 8001d28:	61fb      	str	r3, [r7, #28]
 8001d2a:	e005      	b.n	8001d38 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d2c:	4b2d      	ldr	r3, [pc, #180]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	091b      	lsrs	r3, r3, #4
 8001d32:	f003 030f 	and.w	r3, r3, #15
 8001d36:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d38:	4a2b      	ldr	r2, [pc, #172]	; (8001de8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d40:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10d      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d48:	69fb      	ldr	r3, [r7, #28]
 8001d4a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d4c:	e00a      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d4e:	693b      	ldr	r3, [r7, #16]
 8001d50:	2b04      	cmp	r3, #4
 8001d52:	d102      	bne.n	8001d5a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d54:	4b25      	ldr	r3, [pc, #148]	; (8001dec <HAL_RCC_GetSysClockFreq+0x110>)
 8001d56:	61bb      	str	r3, [r7, #24]
 8001d58:	e004      	b.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	2b08      	cmp	r3, #8
 8001d5e:	d101      	bne.n	8001d64 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d60:	4b23      	ldr	r3, [pc, #140]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d62:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d134      	bne.n	8001dd4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d6c:	68db      	ldr	r3, [r3, #12]
 8001d6e:	f003 0303 	and.w	r3, r3, #3
 8001d72:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d74:	68bb      	ldr	r3, [r7, #8]
 8001d76:	2b02      	cmp	r3, #2
 8001d78:	d003      	beq.n	8001d82 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	2b03      	cmp	r3, #3
 8001d7e:	d003      	beq.n	8001d88 <HAL_RCC_GetSysClockFreq+0xac>
 8001d80:	e005      	b.n	8001d8e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d82:	4b1a      	ldr	r3, [pc, #104]	; (8001dec <HAL_RCC_GetSysClockFreq+0x110>)
 8001d84:	617b      	str	r3, [r7, #20]
      break;
 8001d86:	e005      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d88:	4b19      	ldr	r3, [pc, #100]	; (8001df0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d8a:	617b      	str	r3, [r7, #20]
      break;
 8001d8c:	e002      	b.n	8001d94 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	617b      	str	r3, [r7, #20]
      break;
 8001d92:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d94:	4b13      	ldr	r3, [pc, #76]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d96:	68db      	ldr	r3, [r3, #12]
 8001d98:	091b      	lsrs	r3, r3, #4
 8001d9a:	f003 030f 	and.w	r3, r3, #15
 8001d9e:	3301      	adds	r3, #1
 8001da0:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001da2:	4b10      	ldr	r3, [pc, #64]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	0a1b      	lsrs	r3, r3, #8
 8001da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	fb03 f202 	mul.w	r2, r3, r2
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001dba:	4b0a      	ldr	r3, [pc, #40]	; (8001de4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	0e5b      	lsrs	r3, r3, #25
 8001dc0:	f003 0303 	and.w	r3, r3, #3
 8001dc4:	3301      	adds	r3, #1
 8001dc6:	005b      	lsls	r3, r3, #1
 8001dc8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001dca:	697a      	ldr	r2, [r7, #20]
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dd2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dd4:	69bb      	ldr	r3, [r7, #24]
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3724      	adds	r7, #36	; 0x24
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40021000 	.word	0x40021000
 8001de8:	08002828 	.word	0x08002828
 8001dec:	00f42400 	.word	0x00f42400
 8001df0:	007a1200 	.word	0x007a1200

08001df4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b086      	sub	sp, #24
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e00:	4b27      	ldr	r3, [pc, #156]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e0c:	f7ff f93e 	bl	800108c <HAL_PWREx_GetVoltageRange>
 8001e10:	6178      	str	r0, [r7, #20]
 8001e12:	e014      	b.n	8001e3e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e14:	4b22      	ldr	r3, [pc, #136]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e18:	4a21      	ldr	r2, [pc, #132]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8001e20:	4b1f      	ldr	r3, [pc, #124]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e28:	60fb      	str	r3, [r7, #12]
 8001e2a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e2c:	f7ff f92e 	bl	800108c <HAL_PWREx_GetVoltageRange>
 8001e30:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e32:	4b1b      	ldr	r3, [pc, #108]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	4a1a      	ldr	r2, [pc, #104]	; (8001ea0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001e38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e3e:	697b      	ldr	r3, [r7, #20]
 8001e40:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e44:	d10b      	bne.n	8001e5e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b80      	cmp	r3, #128	; 0x80
 8001e4a:	d913      	bls.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2ba0      	cmp	r3, #160	; 0xa0
 8001e50:	d902      	bls.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e52:	2302      	movs	r3, #2
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	e00d      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e58:	2301      	movs	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	e00a      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b7f      	cmp	r3, #127	; 0x7f
 8001e62:	d902      	bls.n	8001e6a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001e64:	2302      	movs	r3, #2
 8001e66:	613b      	str	r3, [r7, #16]
 8001e68:	e004      	b.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	2b70      	cmp	r3, #112	; 0x70
 8001e6e:	d101      	bne.n	8001e74 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e70:	2301      	movs	r3, #1
 8001e72:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f023 020f 	bic.w	r2, r3, #15
 8001e7c:	4909      	ldr	r1, [pc, #36]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e84:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 030f 	and.w	r3, r3, #15
 8001e8c:	693a      	ldr	r2, [r7, #16]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d001      	beq.n	8001e96 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e000      	b.n	8001e98 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3718      	adds	r7, #24
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	b087      	sub	sp, #28
 8001eac:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001eae:	4b2d      	ldr	r3, [pc, #180]	; (8001f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eb0:	68db      	ldr	r3, [r3, #12]
 8001eb2:	f003 0303 	and.w	r3, r3, #3
 8001eb6:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	2b03      	cmp	r3, #3
 8001ebc:	d00b      	beq.n	8001ed6 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	2b03      	cmp	r3, #3
 8001ec2:	d825      	bhi.n	8001f10 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	2b01      	cmp	r3, #1
 8001ec8:	d008      	beq.n	8001edc <RCC_GetSysClockFreqFromPLLSource+0x34>
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	2b02      	cmp	r3, #2
 8001ece:	d11f      	bne.n	8001f10 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8001ed2:	613b      	str	r3, [r7, #16]
    break;
 8001ed4:	e01f      	b.n	8001f16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8001ed6:	4b25      	ldr	r3, [pc, #148]	; (8001f6c <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8001ed8:	613b      	str	r3, [r7, #16]
    break;
 8001eda:	e01c      	b.n	8001f16 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001edc:	4b21      	ldr	r3, [pc, #132]	; (8001f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0308 	and.w	r3, r3, #8
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d107      	bne.n	8001ef8 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001ee8:	4b1e      	ldr	r3, [pc, #120]	; (8001f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001eea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001eee:	0a1b      	lsrs	r3, r3, #8
 8001ef0:	f003 030f 	and.w	r3, r3, #15
 8001ef4:	617b      	str	r3, [r7, #20]
 8001ef6:	e005      	b.n	8001f04 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001ef8:	4b1a      	ldr	r3, [pc, #104]	; (8001f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	091b      	lsrs	r3, r3, #4
 8001efe:	f003 030f 	and.w	r3, r3, #15
 8001f02:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8001f04:	4a1a      	ldr	r2, [pc, #104]	; (8001f70 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8001f06:	697b      	ldr	r3, [r7, #20]
 8001f08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f0c:	613b      	str	r3, [r7, #16]
    break;
 8001f0e:	e002      	b.n	8001f16 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8001f10:	2300      	movs	r3, #0
 8001f12:	613b      	str	r3, [r7, #16]
    break;
 8001f14:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001f16:	4b13      	ldr	r3, [pc, #76]	; (8001f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	091b      	lsrs	r3, r3, #4
 8001f1c:	f003 030f 	and.w	r3, r3, #15
 8001f20:	3301      	adds	r3, #1
 8001f22:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f26:	68db      	ldr	r3, [r3, #12]
 8001f28:	0a1b      	lsrs	r3, r3, #8
 8001f2a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f2e:	693a      	ldr	r2, [r7, #16]
 8001f30:	fb03 f202 	mul.w	r2, r3, r2
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f3a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f3c:	4b09      	ldr	r3, [pc, #36]	; (8001f64 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	0e5b      	lsrs	r3, r3, #25
 8001f42:	f003 0303 	and.w	r3, r3, #3
 8001f46:	3301      	adds	r3, #1
 8001f48:	005b      	lsls	r3, r3, #1
 8001f4a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f54:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8001f56:	683b      	ldr	r3, [r7, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	371c      	adds	r7, #28
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f62:	4770      	bx	lr
 8001f64:	40021000 	.word	0x40021000
 8001f68:	00f42400 	.word	0x00f42400
 8001f6c:	007a1200 	.word	0x007a1200
 8001f70:	08002828 	.word	0x08002828

08001f74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b084      	sub	sp, #16
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001f82:	2301      	movs	r3, #1
 8001f84:	e095      	b.n	80020b2 <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d108      	bne.n	8001fa0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f96:	d009      	beq.n	8001fac <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	61da      	str	r2, [r3, #28]
 8001f9e:	e005      	b.n	8001fac <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	2200      	movs	r2, #0
 8001faa:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2200      	movs	r2, #0
 8001fb0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8001fb8:	b2db      	uxtb	r3, r3
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d106      	bne.n	8001fcc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7fe fc90 	bl	80008ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fe2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	68db      	ldr	r3, [r3, #12]
 8001fe8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8001fec:	d902      	bls.n	8001ff4 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	e002      	b.n	8001ffa <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8001ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff8:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	68db      	ldr	r3, [r3, #12]
 8001ffe:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8002002:	d007      	beq.n	8002014 <HAL_SPI_Init+0xa0>
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	68db      	ldr	r3, [r3, #12]
 8002008:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800200c:	d002      	beq.n	8002014 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	685b      	ldr	r3, [r3, #4]
 8002018:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	689b      	ldr	r3, [r3, #8]
 8002020:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002024:	431a      	orrs	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	691b      	ldr	r3, [r3, #16]
 800202a:	f003 0302 	and.w	r3, r3, #2
 800202e:	431a      	orrs	r2, r3
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	695b      	ldr	r3, [r3, #20]
 8002034:	f003 0301 	and.w	r3, r3, #1
 8002038:	431a      	orrs	r2, r3
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	699b      	ldr	r3, [r3, #24]
 800203e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002042:	431a      	orrs	r2, r3
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	69db      	ldr	r3, [r3, #28]
 8002048:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800204c:	431a      	orrs	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	6a1b      	ldr	r3, [r3, #32]
 8002052:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002056:	ea42 0103 	orr.w	r1, r2, r3
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800205e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	430a      	orrs	r2, r1
 8002068:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	699b      	ldr	r3, [r3, #24]
 800206e:	0c1b      	lsrs	r3, r3, #16
 8002070:	f003 0204 	and.w	r2, r3, #4
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002078:	f003 0310 	and.w	r3, r3, #16
 800207c:	431a      	orrs	r2, r3
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	431a      	orrs	r2, r3
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	68db      	ldr	r3, [r3, #12]
 800208c:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8002090:	ea42 0103 	orr.w	r1, r2, r3
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	430a      	orrs	r2, r1
 80020a0:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	2200      	movs	r2, #0
 80020a6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2201      	movs	r2, #1
 80020ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80020b0:	2300      	movs	r3, #0
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b08a      	sub	sp, #40	; 0x28
 80020be:	af00      	add	r7, sp, #0
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
 80020c6:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80020c8:	2301      	movs	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80020cc:	2300      	movs	r3, #0
 80020ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80020d8:	2b01      	cmp	r3, #1
 80020da:	d101      	bne.n	80020e0 <HAL_SPI_TransmitReceive+0x26>
 80020dc:	2302      	movs	r3, #2
 80020de:	e1fb      	b.n	80024d8 <HAL_SPI_TransmitReceive+0x41e>
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2201      	movs	r2, #1
 80020e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80020e8:	f7fe fd10 	bl	8000b0c <HAL_GetTick>
 80020ec:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80020f4:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 80020fc:	887b      	ldrh	r3, [r7, #2]
 80020fe:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8002100:	887b      	ldrh	r3, [r7, #2]
 8002102:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002104:	7efb      	ldrb	r3, [r7, #27]
 8002106:	2b01      	cmp	r3, #1
 8002108:	d00e      	beq.n	8002128 <HAL_SPI_TransmitReceive+0x6e>
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002110:	d106      	bne.n	8002120 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	689b      	ldr	r3, [r3, #8]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d102      	bne.n	8002120 <HAL_SPI_TransmitReceive+0x66>
 800211a:	7efb      	ldrb	r3, [r7, #27]
 800211c:	2b04      	cmp	r3, #4
 800211e:	d003      	beq.n	8002128 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8002120:	2302      	movs	r3, #2
 8002122:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002126:	e1cd      	b.n	80024c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	2b00      	cmp	r3, #0
 800212c:	d005      	beq.n	800213a <HAL_SPI_TransmitReceive+0x80>
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d002      	beq.n	800213a <HAL_SPI_TransmitReceive+0x80>
 8002134:	887b      	ldrh	r3, [r7, #2]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d103      	bne.n	8002142 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8002140:	e1c0      	b.n	80024c4 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002142:	68fb      	ldr	r3, [r7, #12]
 8002144:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8002148:	b2db      	uxtb	r3, r3
 800214a:	2b04      	cmp	r3, #4
 800214c:	d003      	beq.n	8002156 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2205      	movs	r2, #5
 8002152:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	887a      	ldrh	r2, [r7, #2]
 8002166:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	887a      	ldrh	r2, [r7, #2]
 800216e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	887a      	ldrh	r2, [r7, #2]
 800217c:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	887a      	ldrh	r2, [r7, #2]
 8002182:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2200      	movs	r2, #0
 800218e:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8002198:	d802      	bhi.n	80021a0 <HAL_SPI_TransmitReceive+0xe6>
 800219a:	8a3b      	ldrh	r3, [r7, #16]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d908      	bls.n	80021b2 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	685a      	ldr	r2, [r3, #4]
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80021ae:	605a      	str	r2, [r3, #4]
 80021b0:	e007      	b.n	80021c2 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	685a      	ldr	r2, [r3, #4]
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80021c0:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021cc:	2b40      	cmp	r3, #64	; 0x40
 80021ce:	d007      	beq.n	80021e0 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	68fb      	ldr	r3, [r7, #12]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80021de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80021e8:	d97c      	bls.n	80022e4 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	685b      	ldr	r3, [r3, #4]
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d002      	beq.n	80021f8 <HAL_SPI_TransmitReceive+0x13e>
 80021f2:	8a7b      	ldrh	r3, [r7, #18]
 80021f4:	2b01      	cmp	r3, #1
 80021f6:	d169      	bne.n	80022cc <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021fc:	881a      	ldrh	r2, [r3, #0]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002208:	1c9a      	adds	r2, r3, #2
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002212:	b29b      	uxth	r3, r3
 8002214:	3b01      	subs	r3, #1
 8002216:	b29a      	uxth	r2, r3
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800221c:	e056      	b.n	80022cc <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b02      	cmp	r3, #2
 800222a:	d11b      	bne.n	8002264 <HAL_SPI_TransmitReceive+0x1aa>
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002230:	b29b      	uxth	r3, r3
 8002232:	2b00      	cmp	r3, #0
 8002234:	d016      	beq.n	8002264 <HAL_SPI_TransmitReceive+0x1aa>
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	2b01      	cmp	r3, #1
 800223a:	d113      	bne.n	8002264 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002240:	881a      	ldrh	r2, [r3, #0]
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800224c:	1c9a      	adds	r2, r3, #2
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002256:	b29b      	uxth	r3, r3
 8002258:	3b01      	subs	r3, #1
 800225a:	b29a      	uxth	r2, r3
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002260:	2300      	movs	r3, #0
 8002262:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	689b      	ldr	r3, [r3, #8]
 800226a:	f003 0301 	and.w	r3, r3, #1
 800226e:	2b01      	cmp	r3, #1
 8002270:	d11c      	bne.n	80022ac <HAL_SPI_TransmitReceive+0x1f2>
 8002272:	68fb      	ldr	r3, [r7, #12]
 8002274:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002278:	b29b      	uxth	r3, r3
 800227a:	2b00      	cmp	r3, #0
 800227c:	d016      	beq.n	80022ac <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	68da      	ldr	r2, [r3, #12]
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002288:	b292      	uxth	r2, r2
 800228a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002290:	1c9a      	adds	r2, r3, #2
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800229c:	b29b      	uxth	r3, r3
 800229e:	3b01      	subs	r3, #1
 80022a0:	b29a      	uxth	r2, r3
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80022a8:	2301      	movs	r3, #1
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80022ac:	f7fe fc2e 	bl	8000b0c <HAL_GetTick>
 80022b0:	4602      	mov	r2, r0
 80022b2:	69fb      	ldr	r3, [r7, #28]
 80022b4:	1ad3      	subs	r3, r2, r3
 80022b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d807      	bhi.n	80022cc <HAL_SPI_TransmitReceive+0x212>
 80022bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022c2:	d003      	beq.n	80022cc <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 80022c4:	2303      	movs	r3, #3
 80022c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80022ca:	e0fb      	b.n	80024c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022d0:	b29b      	uxth	r3, r3
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d1a3      	bne.n	800221e <HAL_SPI_TransmitReceive+0x164>
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80022dc:	b29b      	uxth	r3, r3
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d19d      	bne.n	800221e <HAL_SPI_TransmitReceive+0x164>
 80022e2:	e0df      	b.n	80024a4 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d003      	beq.n	80022f4 <HAL_SPI_TransmitReceive+0x23a>
 80022ec:	8a7b      	ldrh	r3, [r7, #18]
 80022ee:	2b01      	cmp	r3, #1
 80022f0:	f040 80cb 	bne.w	800248a <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80022f8:	b29b      	uxth	r3, r3
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d912      	bls.n	8002324 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002302:	881a      	ldrh	r2, [r3, #0]
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800230e:	1c9a      	adds	r2, r3, #2
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002318:	b29b      	uxth	r3, r3
 800231a:	3b02      	subs	r3, #2
 800231c:	b29a      	uxth	r2, r3
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002322:	e0b2      	b.n	800248a <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	330c      	adds	r3, #12
 800232e:	7812      	ldrb	r2, [r2, #0]
 8002330:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002340:	b29b      	uxth	r3, r3
 8002342:	3b01      	subs	r3, #1
 8002344:	b29a      	uxth	r2, r3
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800234a:	e09e      	b.n	800248a <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	689b      	ldr	r3, [r3, #8]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b02      	cmp	r3, #2
 8002358:	d134      	bne.n	80023c4 <HAL_SPI_TransmitReceive+0x30a>
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800235e:	b29b      	uxth	r3, r3
 8002360:	2b00      	cmp	r3, #0
 8002362:	d02f      	beq.n	80023c4 <HAL_SPI_TransmitReceive+0x30a>
 8002364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002366:	2b01      	cmp	r3, #1
 8002368:	d12c      	bne.n	80023c4 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800236e:	b29b      	uxth	r3, r3
 8002370:	2b01      	cmp	r3, #1
 8002372:	d912      	bls.n	800239a <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002378:	881a      	ldrh	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002384:	1c9a      	adds	r2, r3, #2
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800238e:	b29b      	uxth	r3, r3
 8002390:	3b02      	subs	r3, #2
 8002392:	b29a      	uxth	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002398:	e012      	b.n	80023c0 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	330c      	adds	r3, #12
 80023a4:	7812      	ldrb	r2, [r2, #0]
 80023a6:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80023b6:	b29b      	uxth	r3, r3
 80023b8:	3b01      	subs	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80023c0:	2300      	movs	r3, #0
 80023c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	f003 0301 	and.w	r3, r3, #1
 80023ce:	2b01      	cmp	r3, #1
 80023d0:	d148      	bne.n	8002464 <HAL_SPI_TransmitReceive+0x3aa>
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023d8:	b29b      	uxth	r3, r3
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d042      	beq.n	8002464 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80023e4:	b29b      	uxth	r3, r3
 80023e6:	2b01      	cmp	r3, #1
 80023e8:	d923      	bls.n	8002432 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	68da      	ldr	r2, [r3, #12]
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023f4:	b292      	uxth	r2, r2
 80023f6:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023fc:	1c9a      	adds	r2, r3, #2
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002408:	b29b      	uxth	r3, r3
 800240a:	3b02      	subs	r3, #2
 800240c:	b29a      	uxth	r2, r3
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800241a:	b29b      	uxth	r3, r3
 800241c:	2b01      	cmp	r3, #1
 800241e:	d81f      	bhi.n	8002460 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	685a      	ldr	r2, [r3, #4]
 8002426:	68fb      	ldr	r3, [r7, #12]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800242e:	605a      	str	r2, [r3, #4]
 8002430:	e016      	b.n	8002460 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f103 020c 	add.w	r2, r3, #12
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243e:	7812      	ldrb	r2, [r2, #0]
 8002440:	b2d2      	uxtb	r2, r2
 8002442:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	1c5a      	adds	r2, r3, #1
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8002454:	b29b      	uxth	r3, r3
 8002456:	3b01      	subs	r3, #1
 8002458:	b29a      	uxth	r2, r3
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002460:	2301      	movs	r3, #1
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002464:	f7fe fb52 	bl	8000b0c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	69fb      	ldr	r3, [r7, #28]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002470:	429a      	cmp	r2, r3
 8002472:	d803      	bhi.n	800247c <HAL_SPI_TransmitReceive+0x3c2>
 8002474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002476:	f1b3 3fff 	cmp.w	r3, #4294967295
 800247a:	d102      	bne.n	8002482 <HAL_SPI_TransmitReceive+0x3c8>
 800247c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800247e:	2b00      	cmp	r3, #0
 8002480:	d103      	bne.n	800248a <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8002488:	e01c      	b.n	80024c4 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800248e:	b29b      	uxth	r3, r3
 8002490:	2b00      	cmp	r3, #0
 8002492:	f47f af5b 	bne.w	800234c <HAL_SPI_TransmitReceive+0x292>
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800249c:	b29b      	uxth	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	f47f af54 	bne.w	800234c <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80024a4:	69fa      	ldr	r2, [r7, #28]
 80024a6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024a8:	68f8      	ldr	r0, [r7, #12]
 80024aa:	f000 f937 	bl	800271c <SPI_EndRxTxTransaction>
 80024ae:	4603      	mov	r3, r0
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d006      	beq.n	80024c2 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	2220      	movs	r2, #32
 80024be:	661a      	str	r2, [r3, #96]	; 0x60
 80024c0:	e000      	b.n	80024c4 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 80024c2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2201      	movs	r2, #1
 80024c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2200      	movs	r2, #0
 80024d0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80024d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 80024d8:	4618      	mov	r0, r3
 80024da:	3728      	adds	r7, #40	; 0x28
 80024dc:	46bd      	mov	sp, r7
 80024de:	bd80      	pop	{r7, pc}

080024e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b088      	sub	sp, #32
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	60f8      	str	r0, [r7, #12]
 80024e8:	60b9      	str	r1, [r7, #8]
 80024ea:	603b      	str	r3, [r7, #0]
 80024ec:	4613      	mov	r3, r2
 80024ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80024f0:	f7fe fb0c 	bl	8000b0c <HAL_GetTick>
 80024f4:	4602      	mov	r2, r0
 80024f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f8:	1a9b      	subs	r3, r3, r2
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	4413      	add	r3, r2
 80024fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002500:	f7fe fb04 	bl	8000b0c <HAL_GetTick>
 8002504:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002506:	4b39      	ldr	r3, [pc, #228]	; (80025ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	015b      	lsls	r3, r3, #5
 800250c:	0d1b      	lsrs	r3, r3, #20
 800250e:	69fa      	ldr	r2, [r7, #28]
 8002510:	fb02 f303 	mul.w	r3, r2, r3
 8002514:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002516:	e054      	b.n	80025c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800251e:	d050      	beq.n	80025c2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002520:	f7fe faf4 	bl	8000b0c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	69bb      	ldr	r3, [r7, #24]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	69fa      	ldr	r2, [r7, #28]
 800252c:	429a      	cmp	r2, r3
 800252e:	d902      	bls.n	8002536 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d13d      	bne.n	80025b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002544:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	685b      	ldr	r3, [r3, #4]
 800254a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800254e:	d111      	bne.n	8002574 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002558:	d004      	beq.n	8002564 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002562:	d107      	bne.n	8002574 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	681a      	ldr	r2, [r3, #0]
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002572:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002578:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800257c:	d10f      	bne.n	800259e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	681a      	ldr	r2, [r3, #0]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800258c:	601a      	str	r2, [r3, #0]
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800259c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e017      	b.n	80025e2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80025b8:	2300      	movs	r3, #0
 80025ba:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	3b01      	subs	r3, #1
 80025c0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	689a      	ldr	r2, [r3, #8]
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	4013      	ands	r3, r2
 80025cc:	68ba      	ldr	r2, [r7, #8]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	bf0c      	ite	eq
 80025d2:	2301      	moveq	r3, #1
 80025d4:	2300      	movne	r3, #0
 80025d6:	b2db      	uxtb	r3, r3
 80025d8:	461a      	mov	r2, r3
 80025da:	79fb      	ldrb	r3, [r7, #7]
 80025dc:	429a      	cmp	r2, r3
 80025de:	d19b      	bne.n	8002518 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80025e0:	2300      	movs	r3, #0
}
 80025e2:	4618      	mov	r0, r3
 80025e4:	3720      	adds	r7, #32
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	20000000 	.word	0x20000000

080025f0 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b08a      	sub	sp, #40	; 0x28
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	60f8      	str	r0, [r7, #12]
 80025f8:	60b9      	str	r1, [r7, #8]
 80025fa:	607a      	str	r2, [r7, #4]
 80025fc:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 80025fe:	2300      	movs	r3, #0
 8002600:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002602:	f7fe fa83 	bl	8000b0c <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800260a:	1a9b      	subs	r3, r3, r2
 800260c:	683a      	ldr	r2, [r7, #0]
 800260e:	4413      	add	r3, r2
 8002610:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002612:	f7fe fa7b 	bl	8000b0c <HAL_GetTick>
 8002616:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	330c      	adds	r3, #12
 800261e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002620:	4b3d      	ldr	r3, [pc, #244]	; (8002718 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	4613      	mov	r3, r2
 8002626:	009b      	lsls	r3, r3, #2
 8002628:	4413      	add	r3, r2
 800262a:	00da      	lsls	r2, r3, #3
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	0d1b      	lsrs	r3, r3, #20
 8002630:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002632:	fb02 f303 	mul.w	r3, r2, r3
 8002636:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002638:	e060      	b.n	80026fc <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800263a:	68bb      	ldr	r3, [r7, #8]
 800263c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8002640:	d107      	bne.n	8002652 <SPI_WaitFifoStateUntilTimeout+0x62>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d104      	bne.n	8002652 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002648:	69fb      	ldr	r3, [r7, #28]
 800264a:	781b      	ldrb	r3, [r3, #0]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002650:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002652:	683b      	ldr	r3, [r7, #0]
 8002654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002658:	d050      	beq.n	80026fc <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800265a:	f7fe fa57 	bl	8000b0c <HAL_GetTick>
 800265e:	4602      	mov	r2, r0
 8002660:	6a3b      	ldr	r3, [r7, #32]
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002666:	429a      	cmp	r2, r3
 8002668:	d902      	bls.n	8002670 <SPI_WaitFifoStateUntilTimeout+0x80>
 800266a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800266c:	2b00      	cmp	r3, #0
 800266e:	d13d      	bne.n	80026ec <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	685a      	ldr	r2, [r3, #4]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800267e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	685b      	ldr	r3, [r3, #4]
 8002684:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002688:	d111      	bne.n	80026ae <SPI_WaitFifoStateUntilTimeout+0xbe>
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002692:	d004      	beq.n	800269e <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800269c:	d107      	bne.n	80026ae <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ac:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026b6:	d10f      	bne.n	80026d8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	2201      	movs	r2, #1
 80026dc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	2200      	movs	r2, #0
 80026e4:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 80026e8:	2303      	movs	r3, #3
 80026ea:	e010      	b.n	800270e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d101      	bne.n	80026f6 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 80026f2:	2300      	movs	r3, #0
 80026f4:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	3b01      	subs	r3, #1
 80026fa:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689a      	ldr	r2, [r3, #8]
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	4013      	ands	r3, r2
 8002706:	687a      	ldr	r2, [r7, #4]
 8002708:	429a      	cmp	r2, r3
 800270a:	d196      	bne.n	800263a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800270c:	2300      	movs	r3, #0
}
 800270e:	4618      	mov	r0, r3
 8002710:	3728      	adds	r7, #40	; 0x28
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}
 8002716:	bf00      	nop
 8002718:	20000000 	.word	0x20000000

0800271c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b086      	sub	sp, #24
 8002720:	af02      	add	r7, sp, #8
 8002722:	60f8      	str	r0, [r7, #12]
 8002724:	60b9      	str	r1, [r7, #8]
 8002726:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	9300      	str	r3, [sp, #0]
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2200      	movs	r2, #0
 8002730:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8002734:	68f8      	ldr	r0, [r7, #12]
 8002736:	f7ff ff5b 	bl	80025f0 <SPI_WaitFifoStateUntilTimeout>
 800273a:	4603      	mov	r3, r0
 800273c:	2b00      	cmp	r3, #0
 800273e:	d007      	beq.n	8002750 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002744:	f043 0220 	orr.w	r2, r3, #32
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800274c:	2303      	movs	r3, #3
 800274e:	e027      	b.n	80027a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	9300      	str	r3, [sp, #0]
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	2200      	movs	r2, #0
 8002758:	2180      	movs	r1, #128	; 0x80
 800275a:	68f8      	ldr	r0, [r7, #12]
 800275c:	f7ff fec0 	bl	80024e0 <SPI_WaitFlagStateUntilTimeout>
 8002760:	4603      	mov	r3, r0
 8002762:	2b00      	cmp	r3, #0
 8002764:	d007      	beq.n	8002776 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800276a:	f043 0220 	orr.w	r2, r3, #32
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	e014      	b.n	80027a0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	9300      	str	r3, [sp, #0]
 800277a:	68bb      	ldr	r3, [r7, #8]
 800277c:	2200      	movs	r2, #0
 800277e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f7ff ff34 	bl	80025f0 <SPI_WaitFifoStateUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d007      	beq.n	800279e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002792:	f043 0220 	orr.w	r2, r3, #32
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800279a:	2303      	movs	r3, #3
 800279c:	e000      	b.n	80027a0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <__libc_init_array>:
 80027a8:	b570      	push	{r4, r5, r6, lr}
 80027aa:	4d0d      	ldr	r5, [pc, #52]	; (80027e0 <__libc_init_array+0x38>)
 80027ac:	4c0d      	ldr	r4, [pc, #52]	; (80027e4 <__libc_init_array+0x3c>)
 80027ae:	1b64      	subs	r4, r4, r5
 80027b0:	10a4      	asrs	r4, r4, #2
 80027b2:	2600      	movs	r6, #0
 80027b4:	42a6      	cmp	r6, r4
 80027b6:	d109      	bne.n	80027cc <__libc_init_array+0x24>
 80027b8:	4d0b      	ldr	r5, [pc, #44]	; (80027e8 <__libc_init_array+0x40>)
 80027ba:	4c0c      	ldr	r4, [pc, #48]	; (80027ec <__libc_init_array+0x44>)
 80027bc:	f000 f820 	bl	8002800 <_init>
 80027c0:	1b64      	subs	r4, r4, r5
 80027c2:	10a4      	asrs	r4, r4, #2
 80027c4:	2600      	movs	r6, #0
 80027c6:	42a6      	cmp	r6, r4
 80027c8:	d105      	bne.n	80027d6 <__libc_init_array+0x2e>
 80027ca:	bd70      	pop	{r4, r5, r6, pc}
 80027cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80027d0:	4798      	blx	r3
 80027d2:	3601      	adds	r6, #1
 80027d4:	e7ee      	b.n	80027b4 <__libc_init_array+0xc>
 80027d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80027da:	4798      	blx	r3
 80027dc:	3601      	adds	r6, #1
 80027de:	e7f2      	b.n	80027c6 <__libc_init_array+0x1e>
 80027e0:	08002858 	.word	0x08002858
 80027e4:	08002858 	.word	0x08002858
 80027e8:	08002858 	.word	0x08002858
 80027ec:	0800285c 	.word	0x0800285c

080027f0 <memset>:
 80027f0:	4402      	add	r2, r0
 80027f2:	4603      	mov	r3, r0
 80027f4:	4293      	cmp	r3, r2
 80027f6:	d100      	bne.n	80027fa <memset+0xa>
 80027f8:	4770      	bx	lr
 80027fa:	f803 1b01 	strb.w	r1, [r3], #1
 80027fe:	e7f9      	b.n	80027f4 <memset+0x4>

08002800 <_init>:
 8002800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002802:	bf00      	nop
 8002804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002806:	bc08      	pop	{r3}
 8002808:	469e      	mov	lr, r3
 800280a:	4770      	bx	lr

0800280c <_fini>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr
