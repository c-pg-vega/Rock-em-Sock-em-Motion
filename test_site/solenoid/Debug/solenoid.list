
solenoid.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001f84  080001bc  080001bc  000101bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08002140  08002140  00012140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002180  08002180  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002180  08002180  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002180  08002180  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002180  08002180  00012180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002184  08002184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002188  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000028  2000000c  08002194  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000034  08002194  00020034  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000050a5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000010c2  00000000  00000000  000250e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000005d8  00000000  00000000  000261a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000540  00000000  00000000  00026780  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002773a  00000000  00000000  00026cc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00005cb3  00000000  00000000  0004e3fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f2325  00000000  00000000  000540ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001463d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001584  00000000  00000000  00146424  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	; (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	; (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2000000c 	.word	0x2000000c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08002128 	.word	0x08002128

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	; (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	; (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	; (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20000010 	.word	0x20000010
 80001f8:	08002128 	.word	0x08002128

080001fc <LR_punch>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

/* USER CODE END 0 */
void LR_punch() {
 80001fc:	b580      	push	{r7, lr}
 80001fe:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000200:	2200      	movs	r2, #0
 8000202:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000206:	4829      	ldr	r0, [pc, #164]	; (80002ac <LR_punch+0xb0>)
 8000208:	f000 ffb2 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 800020c:	2201      	movs	r2, #1
 800020e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000212:	4826      	ldr	r0, [pc, #152]	; (80002ac <LR_punch+0xb0>)
 8000214:	f000 ffac 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000218:	2200      	movs	r2, #0
 800021a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800021e:	4823      	ldr	r0, [pc, #140]	; (80002ac <LR_punch+0xb0>)
 8000220:	f000 ffa6 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 8000224:	2201      	movs	r2, #1
 8000226:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800022a:	4820      	ldr	r0, [pc, #128]	; (80002ac <LR_punch+0xb0>)
 800022c:	f000 ffa0 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000230:	2064      	movs	r0, #100	; 0x64
 8000232:	f000 fcd5 	bl	8000be0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000236:	2200      	movs	r2, #0
 8000238:	f44f 7180 	mov.w	r1, #256	; 0x100
 800023c:	481b      	ldr	r0, [pc, #108]	; (80002ac <LR_punch+0xb0>)
 800023e:	f000 ff97 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000242:	2201      	movs	r2, #1
 8000244:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000248:	4818      	ldr	r0, [pc, #96]	; (80002ac <LR_punch+0xb0>)
 800024a:	f000 ff91 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 800024e:	2200      	movs	r2, #0
 8000250:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000254:	4815      	ldr	r0, [pc, #84]	; (80002ac <LR_punch+0xb0>)
 8000256:	f000 ff8b 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 800025a:	2201      	movs	r2, #1
 800025c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000260:	4812      	ldr	r0, [pc, #72]	; (80002ac <LR_punch+0xb0>)
 8000262:	f000 ff85 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000266:	2064      	movs	r0, #100	; 0x64
 8000268:	f000 fcba 	bl	8000be0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800026c:	2200      	movs	r2, #0
 800026e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000272:	480e      	ldr	r0, [pc, #56]	; (80002ac <LR_punch+0xb0>)
 8000274:	f000 ff7c 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000278:	2200      	movs	r2, #0
 800027a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800027e:	480b      	ldr	r0, [pc, #44]	; (80002ac <LR_punch+0xb0>)
 8000280:	f000 ff76 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000284:	2200      	movs	r2, #0
 8000286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800028a:	4808      	ldr	r0, [pc, #32]	; (80002ac <LR_punch+0xb0>)
 800028c:	f000 ff70 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000290:	2200      	movs	r2, #0
 8000292:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000296:	4805      	ldr	r0, [pc, #20]	; (80002ac <LR_punch+0xb0>)
 8000298:	f000 ff6a 	bl	8001170 <HAL_GPIO_WritePin>
	pressedLeft = 0;
 800029c:	4b04      	ldr	r3, [pc, #16]	; (80002b0 <LR_punch+0xb4>)
 800029e:	2200      	movs	r2, #0
 80002a0:	601a      	str	r2, [r3, #0]
	pressedRight = 0;
 80002a2:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <LR_punch+0xb8>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	601a      	str	r2, [r3, #0]
	return;
 80002a8:	bf00      	nop
}
 80002aa:	bd80      	pop	{r7, pc}
 80002ac:	48000800 	.word	0x48000800
 80002b0:	20000028 	.word	0x20000028
 80002b4:	2000002c 	.word	0x2000002c

080002b8 <L_punch>:

void L_punch() {
 80002b8:	b580      	push	{r7, lr}
 80002ba:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80002bc:	2200      	movs	r2, #0
 80002be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002c2:	4816      	ldr	r0, [pc, #88]	; (800031c <L_punch+0x64>)
 80002c4:	f000 ff54 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_SET);
 80002c8:	2201      	movs	r2, #1
 80002ca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002ce:	4813      	ldr	r0, [pc, #76]	; (800031c <L_punch+0x64>)
 80002d0:	f000 ff4e 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80002d4:	2064      	movs	r0, #100	; 0x64
 80002d6:	f000 fc83 	bl	8000be0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80002da:	2200      	movs	r2, #0
 80002dc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002e0:	480e      	ldr	r0, [pc, #56]	; (800031c <L_punch+0x64>)
 80002e2:	f000 ff45 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_SET);
 80002e6:	2201      	movs	r2, #1
 80002e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80002ec:	480b      	ldr	r0, [pc, #44]	; (800031c <L_punch+0x64>)
 80002ee:	f000 ff3f 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 80002f2:	2064      	movs	r0, #100	; 0x64
 80002f4:	f000 fc74 	bl	8000be0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80002f8:	2200      	movs	r2, #0
 80002fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80002fe:	4807      	ldr	r0, [pc, #28]	; (800031c <L_punch+0x64>)
 8000300:	f000 ff36 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000304:	2200      	movs	r2, #0
 8000306:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800030a:	4804      	ldr	r0, [pc, #16]	; (800031c <L_punch+0x64>)
 800030c:	f000 ff30 	bl	8001170 <HAL_GPIO_WritePin>
	pressedLeft = 0;
 8000310:	4b03      	ldr	r3, [pc, #12]	; (8000320 <L_punch+0x68>)
 8000312:	2200      	movs	r2, #0
 8000314:	601a      	str	r2, [r3, #0]
	return;
 8000316:	bf00      	nop
}
 8000318:	bd80      	pop	{r7, pc}
 800031a:	bf00      	nop
 800031c:	48000800 	.word	0x48000800
 8000320:	20000028 	.word	0x20000028

08000324 <R_punch>:

void R_punch() {
 8000324:	b580      	push	{r7, lr}
 8000326:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000328:	2200      	movs	r2, #0
 800032a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800032e:	4816      	ldr	r0, [pc, #88]	; (8000388 <R_punch+0x64>)
 8000330:	f000 ff1e 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_SET);
 8000334:	2201      	movs	r2, #1
 8000336:	f44f 7180 	mov.w	r1, #256	; 0x100
 800033a:	4813      	ldr	r0, [pc, #76]	; (8000388 <R_punch+0x64>)
 800033c:	f000 ff18 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8000340:	2064      	movs	r0, #100	; 0x64
 8000342:	f000 fc4d 	bl	8000be0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000346:	2200      	movs	r2, #0
 8000348:	f44f 7180 	mov.w	r1, #256	; 0x100
 800034c:	480e      	ldr	r0, [pc, #56]	; (8000388 <R_punch+0x64>)
 800034e:	f000 ff0f 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_SET);
 8000352:	2201      	movs	r2, #1
 8000354:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000358:	480b      	ldr	r0, [pc, #44]	; (8000388 <R_punch+0x64>)
 800035a:	f000 ff09 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800035e:	2064      	movs	r0, #100	; 0x64
 8000360:	f000 fc3e 	bl	8000be0 <HAL_Delay>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 8000364:	2200      	movs	r2, #0
 8000366:	f44f 7180 	mov.w	r1, #256	; 0x100
 800036a:	4807      	ldr	r0, [pc, #28]	; (8000388 <R_punch+0x64>)
 800036c:	f000 ff00 	bl	8001170 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000370:	2200      	movs	r2, #0
 8000372:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000376:	4804      	ldr	r0, [pc, #16]	; (8000388 <R_punch+0x64>)
 8000378:	f000 fefa 	bl	8001170 <HAL_GPIO_WritePin>
	pressedRight = 0;
 800037c:	4b03      	ldr	r3, [pc, #12]	; (800038c <R_punch+0x68>)
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
	return;
 8000382:	bf00      	nop
}
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	48000800 	.word	0x48000800
 800038c:	2000002c 	.word	0x2000002c

08000390 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000394:	f000 fbaf 	bl	8000af6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000398:	f000 f858 	bl	800044c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800039c:	f000 f89c 	bl	80004d8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80003a6:	4826      	ldr	r0, [pc, #152]	; (8000440 <main+0xb0>)
 80003a8:	f000 fee2 	bl	8001170 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 80003ac:	2200      	movs	r2, #0
 80003ae:	f44f 7100 	mov.w	r1, #512	; 0x200
 80003b2:	4823      	ldr	r0, [pc, #140]	; (8000440 <main+0xb0>)
 80003b4:	f000 fedc 	bl	8001170 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 80003b8:	2200      	movs	r2, #0
 80003ba:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80003be:	4820      	ldr	r0, [pc, #128]	; (8000440 <main+0xb0>)
 80003c0:	f000 fed6 	bl	8001170 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 80003c4:	2200      	movs	r2, #0
 80003c6:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80003ca:	481d      	ldr	r0, [pc, #116]	; (8000440 <main+0xb0>)
 80003cc:	f000 fed0 	bl	8001170 <HAL_GPIO_WritePin>
  pressedLeft = 0;
 80003d0:	4b1c      	ldr	r3, [pc, #112]	; (8000444 <main+0xb4>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	601a      	str	r2, [r3, #0]
  pressedRight = 0;
 80003d6:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <main+0xb8>)
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if(pressedRight & pressedLeft){
 80003dc:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <main+0xb8>)
 80003de:	681a      	ldr	r2, [r3, #0]
 80003e0:	4b18      	ldr	r3, [pc, #96]	; (8000444 <main+0xb4>)
 80003e2:	681b      	ldr	r3, [r3, #0]
 80003e4:	4013      	ands	r3, r2
 80003e6:	2b00      	cmp	r3, #0
 80003e8:	d002      	beq.n	80003f0 <main+0x60>
		  LR_punch();
 80003ea:	f7ff ff07 	bl	80001fc <LR_punch>
 80003ee:	e7f5      	b.n	80003dc <main+0x4c>
	  } else if (pressedRight) {
 80003f0:	4b15      	ldr	r3, [pc, #84]	; (8000448 <main+0xb8>)
 80003f2:	681b      	ldr	r3, [r3, #0]
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d002      	beq.n	80003fe <main+0x6e>
		  R_punch();
 80003f8:	f7ff ff94 	bl	8000324 <R_punch>
 80003fc:	e7ee      	b.n	80003dc <main+0x4c>
	  } else if (pressedLeft) {
 80003fe:	4b11      	ldr	r3, [pc, #68]	; (8000444 <main+0xb4>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	2b00      	cmp	r3, #0
 8000404:	d002      	beq.n	800040c <main+0x7c>
		  L_punch();
 8000406:	f7ff ff57 	bl	80002b8 <L_punch>
 800040a:	e7e7      	b.n	80003dc <main+0x4c>
	  } else {
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8, GPIO_PIN_RESET);
 800040c:	2200      	movs	r2, #0
 800040e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000412:	480b      	ldr	r0, [pc, #44]	; (8000440 <main+0xb0>)
 8000414:	f000 feac 	bl	8001170 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_9, GPIO_PIN_RESET);
 8000418:	2200      	movs	r2, #0
 800041a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800041e:	4808      	ldr	r0, [pc, #32]	; (8000440 <main+0xb0>)
 8000420:	f000 fea6 	bl	8001170 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_10, GPIO_PIN_RESET);
 8000424:	2200      	movs	r2, #0
 8000426:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800042a:	4805      	ldr	r0, [pc, #20]	; (8000440 <main+0xb0>)
 800042c:	f000 fea0 	bl	8001170 <HAL_GPIO_WritePin>
		  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_11, GPIO_PIN_RESET);
 8000430:	2200      	movs	r2, #0
 8000432:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000436:	4802      	ldr	r0, [pc, #8]	; (8000440 <main+0xb0>)
 8000438:	f000 fe9a 	bl	8001170 <HAL_GPIO_WritePin>
	  if(pressedRight & pressedLeft){
 800043c:	e7ce      	b.n	80003dc <main+0x4c>
 800043e:	bf00      	nop
 8000440:	48000800 	.word	0x48000800
 8000444:	20000028 	.word	0x20000028
 8000448:	2000002c 	.word	0x2000002c

0800044c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800044c:	b580      	push	{r7, lr}
 800044e:	b096      	sub	sp, #88	; 0x58
 8000450:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	2244      	movs	r2, #68	; 0x44
 8000458:	2100      	movs	r1, #0
 800045a:	4618      	mov	r0, r3
 800045c:	f001 fe5c 	bl	8002118 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000460:	463b      	mov	r3, r7
 8000462:	2200      	movs	r2, #0
 8000464:	601a      	str	r2, [r3, #0]
 8000466:	605a      	str	r2, [r3, #4]
 8000468:	609a      	str	r2, [r3, #8]
 800046a:	60da      	str	r2, [r3, #12]
 800046c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800046e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000472:	f000 fed9 	bl	8001228 <HAL_PWREx_ControlVoltageScaling>
 8000476:	4603      	mov	r3, r0
 8000478:	2b00      	cmp	r3, #0
 800047a:	d001      	beq.n	8000480 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800047c:	f000 fa92 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000480:	2310      	movs	r3, #16
 8000482:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000484:	2301      	movs	r3, #1
 8000486:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000488:	2300      	movs	r3, #0
 800048a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800048c:	2360      	movs	r3, #96	; 0x60
 800048e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000490:	2300      	movs	r3, #0
 8000492:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000494:	f107 0314 	add.w	r3, r7, #20
 8000498:	4618      	mov	r0, r3
 800049a:	f000 ff79 	bl	8001390 <HAL_RCC_OscConfig>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d001      	beq.n	80004a8 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004a4:	f000 fa7e 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004a8:	230f      	movs	r3, #15
 80004aa:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004ac:	2300      	movs	r3, #0
 80004ae:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004b0:	2300      	movs	r3, #0
 80004b2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80004b8:	2300      	movs	r3, #0
 80004ba:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80004bc:	463b      	mov	r3, r7
 80004be:	2100      	movs	r1, #0
 80004c0:	4618      	mov	r0, r3
 80004c2:	f001 fb7f 	bl	8001bc4 <HAL_RCC_ClockConfig>
 80004c6:	4603      	mov	r3, r0
 80004c8:	2b00      	cmp	r3, #0
 80004ca:	d001      	beq.n	80004d0 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80004cc:	f000 fa6a 	bl	80009a4 <Error_Handler>
  }
}
 80004d0:	bf00      	nop
 80004d2:	3758      	adds	r7, #88	; 0x58
 80004d4:	46bd      	mov	sp, r7
 80004d6:	bd80      	pop	{r7, pc}

080004d8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b08e      	sub	sp, #56	; 0x38
 80004dc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80004e2:	2200      	movs	r2, #0
 80004e4:	601a      	str	r2, [r3, #0]
 80004e6:	605a      	str	r2, [r3, #4]
 80004e8:	609a      	str	r2, [r3, #8]
 80004ea:	60da      	str	r2, [r3, #12]
 80004ec:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80004ee:	4bb3      	ldr	r3, [pc, #716]	; (80007bc <MX_GPIO_Init+0x2e4>)
 80004f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f2:	4ab2      	ldr	r2, [pc, #712]	; (80007bc <MX_GPIO_Init+0x2e4>)
 80004f4:	f043 0310 	orr.w	r3, r3, #16
 80004f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fa:	4bb0      	ldr	r3, [pc, #704]	; (80007bc <MX_GPIO_Init+0x2e4>)
 80004fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004fe:	f003 0310 	and.w	r3, r3, #16
 8000502:	623b      	str	r3, [r7, #32]
 8000504:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000506:	4bad      	ldr	r3, [pc, #692]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800050a:	4aac      	ldr	r2, [pc, #688]	; (80007bc <MX_GPIO_Init+0x2e4>)
 800050c:	f043 0304 	orr.w	r3, r3, #4
 8000510:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000512:	4baa      	ldr	r3, [pc, #680]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000516:	f003 0304 	and.w	r3, r3, #4
 800051a:	61fb      	str	r3, [r7, #28]
 800051c:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800051e:	4ba7      	ldr	r3, [pc, #668]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4aa6      	ldr	r2, [pc, #664]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000524:	f043 0320 	orr.w	r3, r3, #32
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4ba4      	ldr	r3, [pc, #656]	; (80007bc <MX_GPIO_Init+0x2e4>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0320 	and.w	r3, r3, #32
 8000532:	61bb      	str	r3, [r7, #24]
 8000534:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000536:	4ba1      	ldr	r3, [pc, #644]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4aa0      	ldr	r2, [pc, #640]	; (80007bc <MX_GPIO_Init+0x2e4>)
 800053c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b9e      	ldr	r3, [pc, #632]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800054a:	617b      	str	r3, [r7, #20]
 800054c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b9b      	ldr	r3, [pc, #620]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a9a      	ldr	r2, [pc, #616]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000554:	f043 0301 	orr.w	r3, r3, #1
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b98      	ldr	r3, [pc, #608]	; (80007bc <MX_GPIO_Init+0x2e4>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0301 	and.w	r3, r3, #1
 8000562:	613b      	str	r3, [r7, #16]
 8000564:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000566:	4b95      	ldr	r3, [pc, #596]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800056a:	4a94      	ldr	r2, [pc, #592]	; (80007bc <MX_GPIO_Init+0x2e4>)
 800056c:	f043 0302 	orr.w	r3, r3, #2
 8000570:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000572:	4b92      	ldr	r3, [pc, #584]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000574:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000576:	f003 0302 	and.w	r3, r3, #2
 800057a:	60fb      	str	r3, [r7, #12]
 800057c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800057e:	4b8f      	ldr	r3, [pc, #572]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000580:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000582:	4a8e      	ldr	r2, [pc, #568]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000584:	f043 0308 	orr.w	r3, r3, #8
 8000588:	64d3      	str	r3, [r2, #76]	; 0x4c
 800058a:	4b8c      	ldr	r3, [pc, #560]	; (80007bc <MX_GPIO_Init+0x2e4>)
 800058c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800058e:	f003 0308 	and.w	r3, r3, #8
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000596:	4b89      	ldr	r3, [pc, #548]	; (80007bc <MX_GPIO_Init+0x2e4>)
 8000598:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059a:	4a88      	ldr	r2, [pc, #544]	; (80007bc <MX_GPIO_Init+0x2e4>)
 800059c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005a2:	4b86      	ldr	r3, [pc, #536]	; (80007bc <MX_GPIO_Init+0x2e4>)
 80005a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005aa:	607b      	str	r3, [r7, #4]
 80005ac:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80005ae:	f000 fedf 	bl	8001370 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11, GPIO_PIN_RESET);
 80005b2:	2200      	movs	r2, #0
 80005b4:	f44f 6170 	mov.w	r1, #3840	; 0xf00
 80005b8:	4881      	ldr	r0, [pc, #516]	; (80007c0 <MX_GPIO_Init+0x2e8>)
 80005ba:	f000 fdd9 	bl	8001170 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80005be:	230c      	movs	r3, #12
 80005c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005c2:	2302      	movs	r3, #2
 80005c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005c6:	2300      	movs	r3, #0
 80005c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005ca:	2300      	movs	r3, #0
 80005cc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80005ce:	230d      	movs	r3, #13
 80005d0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80005d2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005d6:	4619      	mov	r1, r3
 80005d8:	487a      	ldr	r0, [pc, #488]	; (80007c4 <MX_GPIO_Init+0x2ec>)
 80005da:	f000 fc37 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 80005de:	2307      	movs	r3, #7
 80005e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80005e2:	2312      	movs	r3, #18
 80005e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e6:	2300      	movs	r3, #0
 80005e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80005ea:	2303      	movs	r3, #3
 80005ec:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80005ee:	2304      	movs	r3, #4
 80005f0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	4619      	mov	r1, r3
 80005f8:	4873      	ldr	r0, [pc, #460]	; (80007c8 <MX_GPIO_Init+0x2f0>)
 80005fa:	f000 fc27 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80005fe:	2380      	movs	r3, #128	; 0x80
 8000600:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000602:	2302      	movs	r3, #2
 8000604:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000606:	2300      	movs	r3, #0
 8000608:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800060a:	2300      	movs	r3, #0
 800060c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800060e:	230d      	movs	r3, #13
 8000610:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000612:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000616:	4619      	mov	r1, r3
 8000618:	486b      	ldr	r0, [pc, #428]	; (80007c8 <MX_GPIO_Init+0x2f0>)
 800061a:	f000 fc17 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800061e:	233f      	movs	r3, #63	; 0x3f
 8000620:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000622:	230b      	movs	r3, #11
 8000624:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000626:	2300      	movs	r3, #0
 8000628:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800062a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800062e:	4619      	mov	r1, r3
 8000630:	4863      	ldr	r0, [pc, #396]	; (80007c0 <MX_GPIO_Init+0x2e8>)
 8000632:	f000 fc0b 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000636:	2301      	movs	r3, #1
 8000638:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800063a:	2302      	movs	r3, #2
 800063c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063e:	2300      	movs	r3, #0
 8000640:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	2300      	movs	r3, #0
 8000644:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000646:	2301      	movs	r3, #1
 8000648:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800064a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800064e:	4619      	mov	r1, r3
 8000650:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000654:	f000 fbfa 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000658:	230a      	movs	r3, #10
 800065a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800065c:	230b      	movs	r3, #11
 800065e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000660:	2300      	movs	r3, #0
 8000662:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000668:	4619      	mov	r1, r3
 800066a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800066e:	f000 fbed 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_7;
 8000672:	2390      	movs	r3, #144	; 0x90
 8000674:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800067e:	2303      	movs	r3, #3
 8000680:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000682:	2305      	movs	r3, #5
 8000684:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 fbdc 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000694:	2301      	movs	r3, #1
 8000696:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000698:	2302      	movs	r3, #2
 800069a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069c:	2300      	movs	r3, #0
 800069e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a0:	2300      	movs	r3, #0
 80006a2:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80006a4:	2302      	movs	r3, #2
 80006a6:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ac:	4619      	mov	r1, r3
 80006ae:	4847      	ldr	r0, [pc, #284]	; (80007cc <MX_GPIO_Init+0x2f4>)
 80006b0:	f000 fbcc 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80006b4:	2302      	movs	r3, #2
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80006b8:	230b      	movs	r3, #11
 80006ba:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006bc:	2300      	movs	r3, #0
 80006be:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006c4:	4619      	mov	r1, r3
 80006c6:	4841      	ldr	r0, [pc, #260]	; (80007cc <MX_GPIO_Init+0x2f4>)
 80006c8:	f000 fbc0 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80006cc:	2344      	movs	r3, #68	; 0x44
 80006ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006d0:	2303      	movs	r3, #3
 80006d2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006dc:	4619      	mov	r1, r3
 80006de:	483b      	ldr	r0, [pc, #236]	; (80007cc <MX_GPIO_Init+0x2f4>)
 80006e0:	f000 fbb4 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80006e4:	f44f 537e 	mov.w	r3, #16256	; 0x3f80
 80006e8:	627b      	str	r3, [r7, #36]	; 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006ea:	2302      	movs	r3, #2
 80006ec:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ee:	2300      	movs	r3, #0
 80006f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006f2:	2300      	movs	r3, #0
 80006f4:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80006f6:	2301      	movs	r3, #1
 80006f8:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80006fa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006fe:	4619      	mov	r1, r3
 8000700:	4830      	ldr	r0, [pc, #192]	; (80007c4 <MX_GPIO_Init+0x2ec>)
 8000702:	f000 fba3 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000706:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800070a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800070c:	2302      	movs	r3, #2
 800070e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000710:	2300      	movs	r3, #0
 8000712:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000714:	2300      	movs	r3, #0
 8000716:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 8000718:	2303      	movs	r3, #3
 800071a:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800071c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000720:	4619      	mov	r1, r3
 8000722:	4828      	ldr	r0, [pc, #160]	; (80007c4 <MX_GPIO_Init+0x2ec>)
 8000724:	f000 fb92 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000728:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800072c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800072e:	2302      	movs	r3, #2
 8000730:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000732:	2300      	movs	r3, #0
 8000734:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000736:	2300      	movs	r3, #0
 8000738:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800073a:	2301      	movs	r3, #1
 800073c:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800073e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000742:	4619      	mov	r1, r3
 8000744:	4821      	ldr	r0, [pc, #132]	; (80007cc <MX_GPIO_Init+0x2f4>)
 8000746:	f000 fb81 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800074a:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800074e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000750:	2302      	movs	r3, #2
 8000752:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000754:	2300      	movs	r3, #0
 8000756:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000758:	2300      	movs	r3, #0
 800075a:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800075c:	230d      	movs	r3, #13
 800075e:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000760:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000764:	4619      	mov	r1, r3
 8000766:	4819      	ldr	r0, [pc, #100]	; (80007cc <MX_GPIO_Init+0x2f4>)
 8000768:	f000 fb70 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800076c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000770:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800077e:	230e      	movs	r3, #14
 8000780:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000786:	4619      	mov	r1, r3
 8000788:	4810      	ldr	r0, [pc, #64]	; (80007cc <MX_GPIO_Init+0x2f4>)
 800078a:	f000 fb5f 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800078e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000794:	2302      	movs	r3, #2
 8000796:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079c:	2303      	movs	r3, #3
 800079e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80007a0:	2307      	movs	r3, #7
 80007a2:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007a4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a8:	4619      	mov	r1, r3
 80007aa:	4809      	ldr	r0, [pc, #36]	; (80007d0 <MX_GPIO_Init+0x2f8>)
 80007ac:	f000 fb4e 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80007b0:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 80007b4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b6:	2302      	movs	r3, #2
 80007b8:	e00c      	b.n	80007d4 <MX_GPIO_Init+0x2fc>
 80007ba:	bf00      	nop
 80007bc:	40021000 	.word	0x40021000
 80007c0:	48000800 	.word	0x48000800
 80007c4:	48001000 	.word	0x48001000
 80007c8:	48001400 	.word	0x48001400
 80007cc:	48000400 	.word	0x48000400
 80007d0:	48000c00 	.word	0x48000c00
 80007d4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007da:	2300      	movs	r3, #0
 80007dc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80007de:	2302      	movs	r3, #2
 80007e0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80007e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007e6:	4619      	mov	r1, r3
 80007e8:	4869      	ldr	r0, [pc, #420]	; (8000990 <MX_GPIO_Init+0x4b8>)
 80007ea:	f000 fb2f 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80007ee:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80007f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007f4:	2302      	movs	r3, #2
 80007f6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f8:	2300      	movs	r3, #0
 80007fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007fc:	2303      	movs	r3, #3
 80007fe:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000800:	2308      	movs	r3, #8
 8000802:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	4862      	ldr	r0, [pc, #392]	; (8000994 <MX_GPIO_Init+0x4bc>)
 800080c:	f000 fb1e 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000810:	2340      	movs	r3, #64	; 0x40
 8000812:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000814:	2302      	movs	r3, #2
 8000816:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 8000820:	230d      	movs	r3, #13
 8000822:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000824:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000828:	4619      	mov	r1, r3
 800082a:	485b      	ldr	r0, [pc, #364]	; (8000998 <MX_GPIO_Init+0x4c0>)
 800082c:	f000 fb0e 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000830:	2380      	movs	r3, #128	; 0x80
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000834:	2302      	movs	r3, #2
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000838:	2300      	movs	r3, #0
 800083a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800083c:	2300      	movs	r3, #0
 800083e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000840:	2302      	movs	r3, #2
 8000842:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000844:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000848:	4619      	mov	r1, r3
 800084a:	4853      	ldr	r0, [pc, #332]	; (8000998 <MX_GPIO_Init+0x4c0>)
 800084c:	f000 fafe 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8000850:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000856:	2301      	movs	r3, #1
 8000858:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085a:	2300      	movs	r3, #0
 800085c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800085e:	2300      	movs	r3, #0
 8000860:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000866:	4619      	mov	r1, r3
 8000868:	484b      	ldr	r0, [pc, #300]	; (8000998 <MX_GPIO_Init+0x4c0>)
 800086a:	f000 faef 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800086e:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 8000872:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000874:	2302      	movs	r3, #2
 8000876:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000878:	2300      	movs	r3, #0
 800087a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800087c:	2303      	movs	r3, #3
 800087e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000880:	230a      	movs	r3, #10
 8000882:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000884:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000888:	4619      	mov	r1, r3
 800088a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800088e:	f000 fadd 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000898:	2300      	movs	r3, #0
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008aa:	f000 facf 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 80008ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008b4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008b8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ba:	2300      	movs	r3, #0
 80008bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80008be:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008c2:	4619      	mov	r1, r3
 80008c4:	4834      	ldr	r0, [pc, #208]	; (8000998 <MX_GPIO_Init+0x4c0>)
 80008c6:	f000 fac1 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80008ca:	2301      	movs	r3, #1
 80008cc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008ce:	2302      	movs	r3, #2
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d2:	2300      	movs	r3, #0
 80008d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008d6:	2303      	movs	r3, #3
 80008d8:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80008da:	2309      	movs	r3, #9
 80008dc:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008de:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e2:	4619      	mov	r1, r3
 80008e4:	482a      	ldr	r0, [pc, #168]	; (8000990 <MX_GPIO_Init+0x4b8>)
 80008e6:	f000 fab1 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80008ea:	2304      	movs	r3, #4
 80008ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80008f2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80008f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008fc:	4619      	mov	r1, r3
 80008fe:	4824      	ldr	r0, [pc, #144]	; (8000990 <MX_GPIO_Init+0x4b8>)
 8000900:	f000 faa4 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000904:	2378      	movs	r3, #120	; 0x78
 8000906:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000908:	2302      	movs	r3, #2
 800090a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090c:	2300      	movs	r3, #0
 800090e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000910:	2303      	movs	r3, #3
 8000912:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000914:	2307      	movs	r3, #7
 8000916:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000918:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800091c:	4619      	mov	r1, r3
 800091e:	481c      	ldr	r0, [pc, #112]	; (8000990 <MX_GPIO_Init+0x4b8>)
 8000920:	f000 fa94 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000924:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000928:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800092a:	2312      	movs	r3, #18
 800092c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092e:	2300      	movs	r3, #0
 8000930:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000932:	2303      	movs	r3, #3
 8000934:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000936:	2304      	movs	r3, #4
 8000938:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800093a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800093e:	4619      	mov	r1, r3
 8000940:	4816      	ldr	r0, [pc, #88]	; (800099c <MX_GPIO_Init+0x4c4>)
 8000942:	f000 fa83 	bl	8000e4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000946:	2301      	movs	r3, #1
 8000948:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800094a:	2302      	movs	r3, #2
 800094c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	2300      	movs	r3, #0
 8000950:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000952:	2300      	movs	r3, #0
 8000954:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000956:	2302      	movs	r3, #2
 8000958:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800095a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800095e:	4619      	mov	r1, r3
 8000960:	480f      	ldr	r0, [pc, #60]	; (80009a0 <MX_GPIO_Init+0x4c8>)
 8000962:	f000 fa73 	bl	8000e4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000966:	2200      	movs	r2, #0
 8000968:	2100      	movs	r1, #0
 800096a:	2008      	movs	r0, #8
 800096c:	f000 fa37 	bl	8000dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8000970:	2008      	movs	r0, #8
 8000972:	f000 fa50 	bl	8000e16 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2028      	movs	r0, #40	; 0x28
 800097c:	f000 fa2f 	bl	8000dde <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000980:	2028      	movs	r0, #40	; 0x28
 8000982:	f000 fa48 	bl	8000e16 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3738      	adds	r7, #56	; 0x38
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	48000c00 	.word	0x48000c00
 8000994:	48001800 	.word	0x48001800
 8000998:	48000800 	.word	0x48000800
 800099c:	48000400 	.word	0x48000400
 80009a0:	48001000 	.word	0x48001000

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	e7fe      	b.n	80009ac <Error_Handler+0x8>
	...

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b480      	push	{r7}
 80009b2:	b083      	sub	sp, #12
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	4b0f      	ldr	r3, [pc, #60]	; (80009f4 <HAL_MspInit+0x44>)
 80009b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009ba:	4a0e      	ldr	r2, [pc, #56]	; (80009f4 <HAL_MspInit+0x44>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6613      	str	r3, [r2, #96]	; 0x60
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <HAL_MspInit+0x44>)
 80009c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	607b      	str	r3, [r7, #4]
 80009cc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009ce:	4b09      	ldr	r3, [pc, #36]	; (80009f4 <HAL_MspInit+0x44>)
 80009d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009d2:	4a08      	ldr	r2, [pc, #32]	; (80009f4 <HAL_MspInit+0x44>)
 80009d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80009d8:	6593      	str	r3, [r2, #88]	; 0x58
 80009da:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_MspInit+0x44>)
 80009dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009e2:	603b      	str	r3, [r7, #0]
 80009e4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009e6:	bf00      	nop
 80009e8:	370c      	adds	r7, #12
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	40021000 	.word	0x40021000

080009f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80009fc:	e7fe      	b.n	80009fc <NMI_Handler+0x4>

080009fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009fe:	b480      	push	{r7}
 8000a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a02:	e7fe      	b.n	8000a02 <HardFault_Handler+0x4>

08000a04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a08:	e7fe      	b.n	8000a08 <MemManage_Handler+0x4>

08000a0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a0a:	b480      	push	{r7}
 8000a0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a0e:	e7fe      	b.n	8000a0e <BusFault_Handler+0x4>

08000a10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a14:	e7fe      	b.n	8000a14 <UsageFault_Handler+0x4>

08000a16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a16:	b480      	push	{r7}
 8000a18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a1a:	bf00      	nop
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr

08000a24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr

08000a32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a32:	b480      	push	{r7}
 8000a34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a36:	bf00      	nop
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3e:	4770      	bx	lr

08000a40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a44:	f000 f8ac 	bl	8000ba0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a48:	bf00      	nop
 8000a4a:	bd80      	pop	{r7, pc}

08000a4c <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */
	pressedRight = 1;
 8000a50:	4b03      	ldr	r3, [pc, #12]	; (8000a60 <EXTI2_IRQHandler+0x14>)
 8000a52:	2201      	movs	r2, #1
 8000a54:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000a56:	2004      	movs	r0, #4
 8000a58:	f000 fba2 	bl	80011a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000a5c:	bf00      	nop
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	2000002c 	.word	0x2000002c

08000a64 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */
	pressedLeft = 1;
 8000a68:	4b04      	ldr	r3, [pc, #16]	; (8000a7c <EXTI15_10_IRQHandler+0x18>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	601a      	str	r2, [r3, #0]
  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_12);
 8000a6e:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8000a72:	f000 fb95 	bl	80011a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000028 	.word	0x20000028

08000a80 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a84:	4b06      	ldr	r3, [pc, #24]	; (8000aa0 <SystemInit+0x20>)
 8000a86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a8a:	4a05      	ldr	r2, [pc, #20]	; (8000aa0 <SystemInit+0x20>)
 8000a8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a90:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr
 8000a9e:	bf00      	nop
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
         ldr   sp, =_estack    /* Set stack pointer */
 8000aa4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000adc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000aa8:	f7ff ffea 	bl	8000a80 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000aac:	480c      	ldr	r0, [pc, #48]	; (8000ae0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000aae:	490d      	ldr	r1, [pc, #52]	; (8000ae4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ab0:	4a0d      	ldr	r2, [pc, #52]	; (8000ae8 <LoopForever+0xe>)
  movs r3, #0
 8000ab2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ab4:	e002      	b.n	8000abc <LoopCopyDataInit>

08000ab6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ab6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ab8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000aba:	3304      	adds	r3, #4

08000abc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000abc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000abe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ac0:	d3f9      	bcc.n	8000ab6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ac2:	4a0a      	ldr	r2, [pc, #40]	; (8000aec <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ac4:	4c0a      	ldr	r4, [pc, #40]	; (8000af0 <LoopForever+0x16>)
  movs r3, #0
 8000ac6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ac8:	e001      	b.n	8000ace <LoopFillZerobss>

08000aca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000aca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000acc:	3204      	adds	r2, #4

08000ace <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ace:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ad0:	d3fb      	bcc.n	8000aca <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ad2:	f001 fafd 	bl	80020d0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ad6:	f7ff fc5b 	bl	8000390 <main>

08000ada <LoopForever>:

LoopForever:
    b LoopForever
 8000ada:	e7fe      	b.n	8000ada <LoopForever>
         ldr   sp, =_estack    /* Set stack pointer */
 8000adc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000ae0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ae4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ae8:	08002188 	.word	0x08002188
  ldr r2, =_sbss
 8000aec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000af0:	20000034 	.word	0x20000034

08000af4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000af4:	e7fe      	b.n	8000af4 <ADC1_IRQHandler>

08000af6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000af6:	b580      	push	{r7, lr}
 8000af8:	b082      	sub	sp, #8
 8000afa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000afc:	2300      	movs	r3, #0
 8000afe:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b00:	2003      	movs	r0, #3
 8000b02:	f000 f961 	bl	8000dc8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b06:	2000      	movs	r0, #0
 8000b08:	f000 f80e 	bl	8000b28 <HAL_InitTick>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d002      	beq.n	8000b18 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000b12:	2301      	movs	r3, #1
 8000b14:	71fb      	strb	r3, [r7, #7]
 8000b16:	e001      	b.n	8000b1c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000b18:	f7ff ff4a 	bl	80009b0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b1c:	79fb      	ldrb	r3, [r7, #7]
}
 8000b1e:	4618      	mov	r0, r3
 8000b20:	3708      	adds	r7, #8
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
	...

08000b28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000b30:	2300      	movs	r3, #0
 8000b32:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000b34:	4b17      	ldr	r3, [pc, #92]	; (8000b94 <HAL_InitTick+0x6c>)
 8000b36:	781b      	ldrb	r3, [r3, #0]
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d023      	beq.n	8000b84 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000b3c:	4b16      	ldr	r3, [pc, #88]	; (8000b98 <HAL_InitTick+0x70>)
 8000b3e:	681a      	ldr	r2, [r3, #0]
 8000b40:	4b14      	ldr	r3, [pc, #80]	; (8000b94 <HAL_InitTick+0x6c>)
 8000b42:	781b      	ldrb	r3, [r3, #0]
 8000b44:	4619      	mov	r1, r3
 8000b46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b52:	4618      	mov	r0, r3
 8000b54:	f000 f96d 	bl	8000e32 <HAL_SYSTICK_Config>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	2b00      	cmp	r3, #0
 8000b5c:	d10f      	bne.n	8000b7e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d809      	bhi.n	8000b78 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 f937 	bl	8000dde <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b70:	4a0a      	ldr	r2, [pc, #40]	; (8000b9c <HAL_InitTick+0x74>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
 8000b76:	e007      	b.n	8000b88 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000b78:	2301      	movs	r3, #1
 8000b7a:	73fb      	strb	r3, [r7, #15]
 8000b7c:	e004      	b.n	8000b88 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b7e:	2301      	movs	r3, #1
 8000b80:	73fb      	strb	r3, [r7, #15]
 8000b82:	e001      	b.n	8000b88 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b84:	2301      	movs	r3, #1
 8000b86:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	3710      	adds	r7, #16
 8000b8e:	46bd      	mov	sp, r7
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000008 	.word	0x20000008
 8000b98:	20000000 	.word	0x20000000
 8000b9c:	20000004 	.word	0x20000004

08000ba0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ba4:	4b06      	ldr	r3, [pc, #24]	; (8000bc0 <HAL_IncTick+0x20>)
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	4413      	add	r3, r2
 8000bb0:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_IncTick+0x24>)
 8000bb2:	6013      	str	r3, [r2, #0]
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000008 	.word	0x20000008
 8000bc4:	20000030 	.word	0x20000030

08000bc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  return uwTick;
 8000bcc:	4b03      	ldr	r3, [pc, #12]	; (8000bdc <HAL_GetTick+0x14>)
 8000bce:	681b      	ldr	r3, [r3, #0]
}
 8000bd0:	4618      	mov	r0, r3
 8000bd2:	46bd      	mov	sp, r7
 8000bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd8:	4770      	bx	lr
 8000bda:	bf00      	nop
 8000bdc:	20000030 	.word	0x20000030

08000be0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b084      	sub	sp, #16
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000be8:	f7ff ffee 	bl	8000bc8 <HAL_GetTick>
 8000bec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bee:	687b      	ldr	r3, [r7, #4]
 8000bf0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bf8:	d005      	beq.n	8000c06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000bfa:	4b0a      	ldr	r3, [pc, #40]	; (8000c24 <HAL_Delay+0x44>)
 8000bfc:	781b      	ldrb	r3, [r3, #0]
 8000bfe:	461a      	mov	r2, r3
 8000c00:	68fb      	ldr	r3, [r7, #12]
 8000c02:	4413      	add	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c06:	bf00      	nop
 8000c08:	f7ff ffde 	bl	8000bc8 <HAL_GetTick>
 8000c0c:	4602      	mov	r2, r0
 8000c0e:	68bb      	ldr	r3, [r7, #8]
 8000c10:	1ad3      	subs	r3, r2, r3
 8000c12:	68fa      	ldr	r2, [r7, #12]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	d8f7      	bhi.n	8000c08 <HAL_Delay+0x28>
  {
  }
}
 8000c18:	bf00      	nop
 8000c1a:	bf00      	nop
 8000c1c:	3710      	adds	r7, #16
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	20000008 	.word	0x20000008

08000c28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	b085      	sub	sp, #20
 8000c2c:	af00      	add	r7, sp, #0
 8000c2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	f003 0307 	and.w	r3, r3, #7
 8000c36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4b0c      	ldr	r3, [pc, #48]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c3a:	68db      	ldr	r3, [r3, #12]
 8000c3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c44:	4013      	ands	r3, r2
 8000c46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c48:	68fb      	ldr	r3, [r7, #12]
 8000c4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c50:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c54:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <__NVIC_SetPriorityGrouping+0x44>)
 8000c5c:	68bb      	ldr	r3, [r7, #8]
 8000c5e:	60d3      	str	r3, [r2, #12]
}
 8000c60:	bf00      	nop
 8000c62:	3714      	adds	r7, #20
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c70:	b480      	push	{r7}
 8000c72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c74:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <__NVIC_GetPriorityGrouping+0x18>)
 8000c76:	68db      	ldr	r3, [r3, #12]
 8000c78:	0a1b      	lsrs	r3, r3, #8
 8000c7a:	f003 0307 	and.w	r3, r3, #7
}
 8000c7e:	4618      	mov	r0, r3
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00

08000c8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	4603      	mov	r3, r0
 8000c94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	db0b      	blt.n	8000cb6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000c9e:	79fb      	ldrb	r3, [r7, #7]
 8000ca0:	f003 021f 	and.w	r2, r3, #31
 8000ca4:	4907      	ldr	r1, [pc, #28]	; (8000cc4 <__NVIC_EnableIRQ+0x38>)
 8000ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000caa:	095b      	lsrs	r3, r3, #5
 8000cac:	2001      	movs	r0, #1
 8000cae:	fa00 f202 	lsl.w	r2, r0, r2
 8000cb2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	e000e100 	.word	0xe000e100

08000cc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	b083      	sub	sp, #12
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	4603      	mov	r3, r0
 8000cd0:	6039      	str	r1, [r7, #0]
 8000cd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000cd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cd8:	2b00      	cmp	r3, #0
 8000cda:	db0a      	blt.n	8000cf2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	b2da      	uxtb	r2, r3
 8000ce0:	490c      	ldr	r1, [pc, #48]	; (8000d14 <__NVIC_SetPriority+0x4c>)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	0112      	lsls	r2, r2, #4
 8000ce8:	b2d2      	uxtb	r2, r2
 8000cea:	440b      	add	r3, r1
 8000cec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000cf0:	e00a      	b.n	8000d08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf2:	683b      	ldr	r3, [r7, #0]
 8000cf4:	b2da      	uxtb	r2, r3
 8000cf6:	4908      	ldr	r1, [pc, #32]	; (8000d18 <__NVIC_SetPriority+0x50>)
 8000cf8:	79fb      	ldrb	r3, [r7, #7]
 8000cfa:	f003 030f 	and.w	r3, r3, #15
 8000cfe:	3b04      	subs	r3, #4
 8000d00:	0112      	lsls	r2, r2, #4
 8000d02:	b2d2      	uxtb	r2, r2
 8000d04:	440b      	add	r3, r1
 8000d06:	761a      	strb	r2, [r3, #24]
}
 8000d08:	bf00      	nop
 8000d0a:	370c      	adds	r7, #12
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000e100 	.word	0xe000e100
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b089      	sub	sp, #36	; 0x24
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	60f8      	str	r0, [r7, #12]
 8000d24:	60b9      	str	r1, [r7, #8]
 8000d26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d28:	68fb      	ldr	r3, [r7, #12]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d30:	69fb      	ldr	r3, [r7, #28]
 8000d32:	f1c3 0307 	rsb	r3, r3, #7
 8000d36:	2b04      	cmp	r3, #4
 8000d38:	bf28      	it	cs
 8000d3a:	2304      	movcs	r3, #4
 8000d3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d3e:	69fb      	ldr	r3, [r7, #28]
 8000d40:	3304      	adds	r3, #4
 8000d42:	2b06      	cmp	r3, #6
 8000d44:	d902      	bls.n	8000d4c <NVIC_EncodePriority+0x30>
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	3b03      	subs	r3, #3
 8000d4a:	e000      	b.n	8000d4e <NVIC_EncodePriority+0x32>
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	69bb      	ldr	r3, [r7, #24]
 8000d56:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5a:	43da      	mvns	r2, r3
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	401a      	ands	r2, r3
 8000d60:	697b      	ldr	r3, [r7, #20]
 8000d62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d64:	f04f 31ff 	mov.w	r1, #4294967295
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d6e:	43d9      	mvns	r1, r3
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d74:	4313      	orrs	r3, r2
         );
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	3724      	adds	r7, #36	; 0x24
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
	...

08000d84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3b01      	subs	r3, #1
 8000d90:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d94:	d301      	bcc.n	8000d9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d96:	2301      	movs	r3, #1
 8000d98:	e00f      	b.n	8000dba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d9a:	4a0a      	ldr	r2, [pc, #40]	; (8000dc4 <SysTick_Config+0x40>)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	3b01      	subs	r3, #1
 8000da0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000da2:	210f      	movs	r1, #15
 8000da4:	f04f 30ff 	mov.w	r0, #4294967295
 8000da8:	f7ff ff8e 	bl	8000cc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dac:	4b05      	ldr	r3, [pc, #20]	; (8000dc4 <SysTick_Config+0x40>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000db2:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <SysTick_Config+0x40>)
 8000db4:	2207      	movs	r2, #7
 8000db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000db8:	2300      	movs	r3, #0
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	e000e010 	.word	0xe000e010

08000dc8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd0:	6878      	ldr	r0, [r7, #4]
 8000dd2:	f7ff ff29 	bl	8000c28 <__NVIC_SetPriorityGrouping>
}
 8000dd6:	bf00      	nop
 8000dd8:	3708      	adds	r7, #8
 8000dda:	46bd      	mov	sp, r7
 8000ddc:	bd80      	pop	{r7, pc}

08000dde <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dde:	b580      	push	{r7, lr}
 8000de0:	b086      	sub	sp, #24
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	4603      	mov	r3, r0
 8000de6:	60b9      	str	r1, [r7, #8]
 8000de8:	607a      	str	r2, [r7, #4]
 8000dea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000dec:	2300      	movs	r3, #0
 8000dee:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df0:	f7ff ff3e 	bl	8000c70 <__NVIC_GetPriorityGrouping>
 8000df4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000df6:	687a      	ldr	r2, [r7, #4]
 8000df8:	68b9      	ldr	r1, [r7, #8]
 8000dfa:	6978      	ldr	r0, [r7, #20]
 8000dfc:	f7ff ff8e 	bl	8000d1c <NVIC_EncodePriority>
 8000e00:	4602      	mov	r2, r0
 8000e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e06:	4611      	mov	r1, r2
 8000e08:	4618      	mov	r0, r3
 8000e0a:	f7ff ff5d 	bl	8000cc8 <__NVIC_SetPriority>
}
 8000e0e:	bf00      	nop
 8000e10:	3718      	adds	r7, #24
 8000e12:	46bd      	mov	sp, r7
 8000e14:	bd80      	pop	{r7, pc}

08000e16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f7ff ff31 	bl	8000c8c <__NVIC_EnableIRQ>
}
 8000e2a:	bf00      	nop
 8000e2c:	3708      	adds	r7, #8
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	b082      	sub	sp, #8
 8000e36:	af00      	add	r7, sp, #0
 8000e38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e3a:	6878      	ldr	r0, [r7, #4]
 8000e3c:	f7ff ffa2 	bl	8000d84 <SysTick_Config>
 8000e40:	4603      	mov	r3, r0
}
 8000e42:	4618      	mov	r0, r3
 8000e44:	3708      	adds	r7, #8
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
	...

08000e4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	b087      	sub	sp, #28
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e56:	2300      	movs	r3, #0
 8000e58:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e5a:	e166      	b.n	800112a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e5c:	683b      	ldr	r3, [r7, #0]
 8000e5e:	681a      	ldr	r2, [r3, #0]
 8000e60:	2101      	movs	r1, #1
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	fa01 f303 	lsl.w	r3, r1, r3
 8000e68:	4013      	ands	r3, r2
 8000e6a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f000 8158 	beq.w	8001124 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	685b      	ldr	r3, [r3, #4]
 8000e78:	f003 0303 	and.w	r3, r3, #3
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d005      	beq.n	8000e8c <HAL_GPIO_Init+0x40>
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	685b      	ldr	r3, [r3, #4]
 8000e84:	f003 0303 	and.w	r3, r3, #3
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d130      	bne.n	8000eee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	005b      	lsls	r3, r3, #1
 8000e96:	2203      	movs	r2, #3
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	43db      	mvns	r3, r3
 8000e9e:	693a      	ldr	r2, [r7, #16]
 8000ea0:	4013      	ands	r3, r2
 8000ea2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	68da      	ldr	r2, [r3, #12]
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	005b      	lsls	r3, r3, #1
 8000eac:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb0:	693a      	ldr	r2, [r7, #16]
 8000eb2:	4313      	orrs	r3, r2
 8000eb4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ec2:	2201      	movs	r2, #1
 8000ec4:	697b      	ldr	r3, [r7, #20]
 8000ec6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eca:	43db      	mvns	r3, r3
 8000ecc:	693a      	ldr	r2, [r7, #16]
 8000ece:	4013      	ands	r3, r2
 8000ed0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ed2:	683b      	ldr	r3, [r7, #0]
 8000ed4:	685b      	ldr	r3, [r3, #4]
 8000ed6:	091b      	lsrs	r3, r3, #4
 8000ed8:	f003 0201 	and.w	r2, r3, #1
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee2:	693a      	ldr	r2, [r7, #16]
 8000ee4:	4313      	orrs	r3, r2
 8000ee6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	693a      	ldr	r2, [r7, #16]
 8000eec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0303 	and.w	r3, r3, #3
 8000ef6:	2b03      	cmp	r3, #3
 8000ef8:	d017      	beq.n	8000f2a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	68db      	ldr	r3, [r3, #12]
 8000efe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	005b      	lsls	r3, r3, #1
 8000f04:	2203      	movs	r2, #3
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	43db      	mvns	r3, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4013      	ands	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	689a      	ldr	r2, [r3, #8]
 8000f16:	697b      	ldr	r3, [r7, #20]
 8000f18:	005b      	lsls	r3, r3, #1
 8000f1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1e:	693a      	ldr	r2, [r7, #16]
 8000f20:	4313      	orrs	r3, r2
 8000f22:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	693a      	ldr	r2, [r7, #16]
 8000f28:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f2a:	683b      	ldr	r3, [r7, #0]
 8000f2c:	685b      	ldr	r3, [r3, #4]
 8000f2e:	f003 0303 	and.w	r3, r3, #3
 8000f32:	2b02      	cmp	r3, #2
 8000f34:	d123      	bne.n	8000f7e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f36:	697b      	ldr	r3, [r7, #20]
 8000f38:	08da      	lsrs	r2, r3, #3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	3208      	adds	r2, #8
 8000f3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f42:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	f003 0307 	and.w	r3, r3, #7
 8000f4a:	009b      	lsls	r3, r3, #2
 8000f4c:	220f      	movs	r2, #15
 8000f4e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f52:	43db      	mvns	r3, r3
 8000f54:	693a      	ldr	r2, [r7, #16]
 8000f56:	4013      	ands	r3, r2
 8000f58:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	691a      	ldr	r2, [r3, #16]
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6a:	693a      	ldr	r2, [r7, #16]
 8000f6c:	4313      	orrs	r3, r2
 8000f6e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	08da      	lsrs	r2, r3, #3
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	3208      	adds	r2, #8
 8000f78:	6939      	ldr	r1, [r7, #16]
 8000f7a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	2203      	movs	r2, #3
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43db      	mvns	r3, r3
 8000f90:	693a      	ldr	r2, [r7, #16]
 8000f92:	4013      	ands	r3, r2
 8000f94:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685b      	ldr	r3, [r3, #4]
 8000f9a:	f003 0203 	and.w	r2, r3, #3
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	693a      	ldr	r2, [r7, #16]
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	693a      	ldr	r2, [r7, #16]
 8000fb0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fb2:	683b      	ldr	r3, [r7, #0]
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	f000 80b2 	beq.w	8001124 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc0:	4b61      	ldr	r3, [pc, #388]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fc4:	4a60      	ldr	r2, [pc, #384]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fc6:	f043 0301 	orr.w	r3, r3, #1
 8000fca:	6613      	str	r3, [r2, #96]	; 0x60
 8000fcc:	4b5e      	ldr	r3, [pc, #376]	; (8001148 <HAL_GPIO_Init+0x2fc>)
 8000fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fd0:	f003 0301 	and.w	r3, r3, #1
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fd8:	4a5c      	ldr	r2, [pc, #368]	; (800114c <HAL_GPIO_Init+0x300>)
 8000fda:	697b      	ldr	r3, [r7, #20]
 8000fdc:	089b      	lsrs	r3, r3, #2
 8000fde:	3302      	adds	r3, #2
 8000fe0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fe4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fe6:	697b      	ldr	r3, [r7, #20]
 8000fe8:	f003 0303 	and.w	r3, r3, #3
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	220f      	movs	r2, #15
 8000ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001002:	d02b      	beq.n	800105c <HAL_GPIO_Init+0x210>
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a52      	ldr	r2, [pc, #328]	; (8001150 <HAL_GPIO_Init+0x304>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d025      	beq.n	8001058 <HAL_GPIO_Init+0x20c>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	4a51      	ldr	r2, [pc, #324]	; (8001154 <HAL_GPIO_Init+0x308>)
 8001010:	4293      	cmp	r3, r2
 8001012:	d01f      	beq.n	8001054 <HAL_GPIO_Init+0x208>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4a50      	ldr	r2, [pc, #320]	; (8001158 <HAL_GPIO_Init+0x30c>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d019      	beq.n	8001050 <HAL_GPIO_Init+0x204>
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	4a4f      	ldr	r2, [pc, #316]	; (800115c <HAL_GPIO_Init+0x310>)
 8001020:	4293      	cmp	r3, r2
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x200>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a4e      	ldr	r2, [pc, #312]	; (8001160 <HAL_GPIO_Init+0x314>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1fc>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a4d      	ldr	r2, [pc, #308]	; (8001164 <HAL_GPIO_Init+0x318>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1f8>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a4c      	ldr	r2, [pc, #304]	; (8001168 <HAL_GPIO_Init+0x31c>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1f4>
 800103c:	2307      	movs	r3, #7
 800103e:	e00e      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001040:	2308      	movs	r3, #8
 8001042:	e00c      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001044:	2306      	movs	r3, #6
 8001046:	e00a      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001048:	2305      	movs	r3, #5
 800104a:	e008      	b.n	800105e <HAL_GPIO_Init+0x212>
 800104c:	2304      	movs	r3, #4
 800104e:	e006      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001050:	2303      	movs	r3, #3
 8001052:	e004      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001054:	2302      	movs	r3, #2
 8001056:	e002      	b.n	800105e <HAL_GPIO_Init+0x212>
 8001058:	2301      	movs	r3, #1
 800105a:	e000      	b.n	800105e <HAL_GPIO_Init+0x212>
 800105c:	2300      	movs	r3, #0
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	f002 0203 	and.w	r2, r2, #3
 8001064:	0092      	lsls	r2, r2, #2
 8001066:	4093      	lsls	r3, r2
 8001068:	693a      	ldr	r2, [r7, #16]
 800106a:	4313      	orrs	r3, r2
 800106c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800106e:	4937      	ldr	r1, [pc, #220]	; (800114c <HAL_GPIO_Init+0x300>)
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	089b      	lsrs	r3, r3, #2
 8001074:	3302      	adds	r3, #2
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800107c:	4b3b      	ldr	r3, [pc, #236]	; (800116c <HAL_GPIO_Init+0x320>)
 800107e:	689b      	ldr	r3, [r3, #8]
 8001080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001082:	68fb      	ldr	r3, [r7, #12]
 8001084:	43db      	mvns	r3, r3
 8001086:	693a      	ldr	r2, [r7, #16]
 8001088:	4013      	ands	r3, r2
 800108a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	685b      	ldr	r3, [r3, #4]
 8001090:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001094:	2b00      	cmp	r3, #0
 8001096:	d003      	beq.n	80010a0 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	68fb      	ldr	r3, [r7, #12]
 800109c:	4313      	orrs	r3, r2
 800109e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010a0:	4a32      	ldr	r2, [pc, #200]	; (800116c <HAL_GPIO_Init+0x320>)
 80010a2:	693b      	ldr	r3, [r7, #16]
 80010a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010a6:	4b31      	ldr	r3, [pc, #196]	; (800116c <HAL_GPIO_Init+0x320>)
 80010a8:	68db      	ldr	r3, [r3, #12]
 80010aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	43db      	mvns	r3, r3
 80010b0:	693a      	ldr	r2, [r7, #16]
 80010b2:	4013      	ands	r3, r2
 80010b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d003      	beq.n	80010ca <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ca:	4a28      	ldr	r2, [pc, #160]	; (800116c <HAL_GPIO_Init+0x320>)
 80010cc:	693b      	ldr	r3, [r7, #16]
 80010ce:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010d0:	4b26      	ldr	r3, [pc, #152]	; (800116c <HAL_GPIO_Init+0x320>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	43db      	mvns	r3, r3
 80010da:	693a      	ldr	r2, [r7, #16]
 80010dc:	4013      	ands	r3, r2
 80010de:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010e0:	683b      	ldr	r3, [r7, #0]
 80010e2:	685b      	ldr	r3, [r3, #4]
 80010e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d003      	beq.n	80010f4 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80010ec:	693a      	ldr	r2, [r7, #16]
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	4313      	orrs	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010f4:	4a1d      	ldr	r2, [pc, #116]	; (800116c <HAL_GPIO_Init+0x320>)
 80010f6:	693b      	ldr	r3, [r7, #16]
 80010f8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	; (800116c <HAL_GPIO_Init+0x320>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	43db      	mvns	r3, r3
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4013      	ands	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001112:	2b00      	cmp	r3, #0
 8001114:	d003      	beq.n	800111e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	4313      	orrs	r3, r2
 800111c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800111e:	4a13      	ldr	r2, [pc, #76]	; (800116c <HAL_GPIO_Init+0x320>)
 8001120:	693b      	ldr	r3, [r7, #16]
 8001122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	3301      	adds	r3, #1
 8001128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	681a      	ldr	r2, [r3, #0]
 800112e:	697b      	ldr	r3, [r7, #20]
 8001130:	fa22 f303 	lsr.w	r3, r2, r3
 8001134:	2b00      	cmp	r3, #0
 8001136:	f47f ae91 	bne.w	8000e5c <HAL_GPIO_Init+0x10>
  }
}
 800113a:	bf00      	nop
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	40021000 	.word	0x40021000
 800114c:	40010000 	.word	0x40010000
 8001150:	48000400 	.word	0x48000400
 8001154:	48000800 	.word	0x48000800
 8001158:	48000c00 	.word	0x48000c00
 800115c:	48001000 	.word	0x48001000
 8001160:	48001400 	.word	0x48001400
 8001164:	48001800 	.word	0x48001800
 8001168:	48001c00 	.word	0x48001c00
 800116c:	40010400 	.word	0x40010400

08001170 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001170:	b480      	push	{r7}
 8001172:	b083      	sub	sp, #12
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
 8001178:	460b      	mov	r3, r1
 800117a:	807b      	strh	r3, [r7, #2]
 800117c:	4613      	mov	r3, r2
 800117e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001180:	787b      	ldrb	r3, [r7, #1]
 8001182:	2b00      	cmp	r3, #0
 8001184:	d003      	beq.n	800118e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001186:	887a      	ldrh	r2, [r7, #2]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800118c:	e002      	b.n	8001194 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800118e:	887a      	ldrh	r2, [r7, #2]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001194:	bf00      	nop
 8001196:	370c      	adds	r7, #12
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4603      	mov	r3, r0
 80011a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80011aa:	4b08      	ldr	r3, [pc, #32]	; (80011cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011ac:	695a      	ldr	r2, [r3, #20]
 80011ae:	88fb      	ldrh	r3, [r7, #6]
 80011b0:	4013      	ands	r3, r2
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d006      	beq.n	80011c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80011b6:	4a05      	ldr	r2, [pc, #20]	; (80011cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80011b8:	88fb      	ldrh	r3, [r7, #6]
 80011ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80011bc:	88fb      	ldrh	r3, [r7, #6]
 80011be:	4618      	mov	r0, r3
 80011c0:	f000 f806 	bl	80011d0 <HAL_GPIO_EXTI_Callback>
  }
}
 80011c4:	bf00      	nop
 80011c6:	3708      	adds	r7, #8
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40010400 	.word	0x40010400

080011d0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80011da:	bf00      	nop
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
	...

080011e8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ec:	4b0d      	ldr	r3, [pc, #52]	; (8001224 <HAL_PWREx_GetVoltageRange+0x3c>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f8:	d102      	bne.n	8001200 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80011fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fe:	e00b      	b.n	8001218 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001200:	4b08      	ldr	r3, [pc, #32]	; (8001224 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001206:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800120a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800120e:	d102      	bne.n	8001216 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001210:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001214:	e000      	b.n	8001218 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001216:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001218:	4618      	mov	r0, r3
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	40007000 	.word	0x40007000

08001228 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001228:	b480      	push	{r7}
 800122a:	b085      	sub	sp, #20
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d141      	bne.n	80012ba <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001236:	4b4b      	ldr	r3, [pc, #300]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800123e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001242:	d131      	bne.n	80012a8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001244:	4b47      	ldr	r3, [pc, #284]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001246:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800124a:	4a46      	ldr	r2, [pc, #280]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800124c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001250:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001254:	4b43      	ldr	r3, [pc, #268]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800125c:	4a41      	ldr	r2, [pc, #260]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800125e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001262:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001264:	4b40      	ldr	r3, [pc, #256]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	2232      	movs	r2, #50	; 0x32
 800126a:	fb02 f303 	mul.w	r3, r2, r3
 800126e:	4a3f      	ldr	r2, [pc, #252]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001270:	fba2 2303 	umull	r2, r3, r2, r3
 8001274:	0c9b      	lsrs	r3, r3, #18
 8001276:	3301      	adds	r3, #1
 8001278:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800127a:	e002      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800127c:	68fb      	ldr	r3, [r7, #12]
 800127e:	3b01      	subs	r3, #1
 8001280:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001282:	4b38      	ldr	r3, [pc, #224]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001284:	695b      	ldr	r3, [r3, #20]
 8001286:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800128a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800128e:	d102      	bne.n	8001296 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001290:	68fb      	ldr	r3, [r7, #12]
 8001292:	2b00      	cmp	r3, #0
 8001294:	d1f2      	bne.n	800127c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001296:	4b33      	ldr	r3, [pc, #204]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001298:	695b      	ldr	r3, [r3, #20]
 800129a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800129e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a2:	d158      	bne.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e057      	b.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012a8:	4b2e      	ldr	r3, [pc, #184]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012aa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012ae:	4a2d      	ldr	r2, [pc, #180]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80012b4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80012b8:	e04d      	b.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012c0:	d141      	bne.n	8001346 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80012c2:	4b28      	ldr	r3, [pc, #160]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012ce:	d131      	bne.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80012d0:	4b24      	ldr	r3, [pc, #144]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80012d6:	4a23      	ldr	r2, [pc, #140]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012d8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012dc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012e0:	4b20      	ldr	r3, [pc, #128]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012e8:	4a1e      	ldr	r2, [pc, #120]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80012ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ee:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80012f0:	4b1d      	ldr	r3, [pc, #116]	; (8001368 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	2232      	movs	r2, #50	; 0x32
 80012f6:	fb02 f303 	mul.w	r3, r2, r3
 80012fa:	4a1c      	ldr	r2, [pc, #112]	; (800136c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80012fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001300:	0c9b      	lsrs	r3, r3, #18
 8001302:	3301      	adds	r3, #1
 8001304:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001306:	e002      	b.n	800130e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	3b01      	subs	r3, #1
 800130c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800130e:	4b15      	ldr	r3, [pc, #84]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001310:	695b      	ldr	r3, [r3, #20]
 8001312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131a:	d102      	bne.n	8001322 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	2b00      	cmp	r3, #0
 8001320:	d1f2      	bne.n	8001308 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001322:	4b10      	ldr	r3, [pc, #64]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001324:	695b      	ldr	r3, [r3, #20]
 8001326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800132a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800132e:	d112      	bne.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001330:	2303      	movs	r3, #3
 8001332:	e011      	b.n	8001358 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001336:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800133a:	4a0a      	ldr	r2, [pc, #40]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800133c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001340:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8001344:	e007      	b.n	8001356 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001346:	4b07      	ldr	r3, [pc, #28]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800134e:	4a05      	ldr	r2, [pc, #20]	; (8001364 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001350:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001354:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001356:	2300      	movs	r3, #0
}
 8001358:	4618      	mov	r0, r3
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	40007000 	.word	0x40007000
 8001368:	20000000 	.word	0x20000000
 800136c:	431bde83 	.word	0x431bde83

08001370 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001374:	4b05      	ldr	r3, [pc, #20]	; (800138c <HAL_PWREx_EnableVddIO2+0x1c>)
 8001376:	685b      	ldr	r3, [r3, #4]
 8001378:	4a04      	ldr	r2, [pc, #16]	; (800138c <HAL_PWREx_EnableVddIO2+0x1c>)
 800137a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800137e:	6053      	str	r3, [r2, #4]
}
 8001380:	bf00      	nop
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	40007000 	.word	0x40007000

08001390 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b088      	sub	sp, #32
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b00      	cmp	r3, #0
 800139c:	d102      	bne.n	80013a4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800139e:	2301      	movs	r3, #1
 80013a0:	f000 bc08 	b.w	8001bb4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013a4:	4b96      	ldr	r3, [pc, #600]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80013a6:	689b      	ldr	r3, [r3, #8]
 80013a8:	f003 030c 	and.w	r3, r3, #12
 80013ac:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80013ae:	4b94      	ldr	r3, [pc, #592]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80013b0:	68db      	ldr	r3, [r3, #12]
 80013b2:	f003 0303 	and.w	r3, r3, #3
 80013b6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 80e4 	beq.w	800158e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80013c6:	69bb      	ldr	r3, [r7, #24]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d007      	beq.n	80013dc <HAL_RCC_OscConfig+0x4c>
 80013cc:	69bb      	ldr	r3, [r7, #24]
 80013ce:	2b0c      	cmp	r3, #12
 80013d0:	f040 808b 	bne.w	80014ea <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80013d4:	697b      	ldr	r3, [r7, #20]
 80013d6:	2b01      	cmp	r3, #1
 80013d8:	f040 8087 	bne.w	80014ea <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80013dc:	4b88      	ldr	r3, [pc, #544]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f003 0302 	and.w	r3, r3, #2
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d005      	beq.n	80013f4 <HAL_RCC_OscConfig+0x64>
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d101      	bne.n	80013f4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013f0:	2301      	movs	r3, #1
 80013f2:	e3df      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6a1a      	ldr	r2, [r3, #32]
 80013f8:	4b81      	ldr	r3, [pc, #516]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	f003 0308 	and.w	r3, r3, #8
 8001400:	2b00      	cmp	r3, #0
 8001402:	d004      	beq.n	800140e <HAL_RCC_OscConfig+0x7e>
 8001404:	4b7e      	ldr	r3, [pc, #504]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800140c:	e005      	b.n	800141a <HAL_RCC_OscConfig+0x8a>
 800140e:	4b7c      	ldr	r3, [pc, #496]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001410:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001414:	091b      	lsrs	r3, r3, #4
 8001416:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800141a:	4293      	cmp	r3, r2
 800141c:	d223      	bcs.n	8001466 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a1b      	ldr	r3, [r3, #32]
 8001422:	4618      	mov	r0, r3
 8001424:	f000 fd94 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800142e:	2301      	movs	r3, #1
 8001430:	e3c0      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001432:	4b73      	ldr	r3, [pc, #460]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a72      	ldr	r2, [pc, #456]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001438:	f043 0308 	orr.w	r3, r3, #8
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	4b70      	ldr	r3, [pc, #448]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6a1b      	ldr	r3, [r3, #32]
 800144a:	496d      	ldr	r1, [pc, #436]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800144c:	4313      	orrs	r3, r2
 800144e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001450:	4b6b      	ldr	r3, [pc, #428]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	021b      	lsls	r3, r3, #8
 800145e:	4968      	ldr	r1, [pc, #416]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001460:	4313      	orrs	r3, r2
 8001462:	604b      	str	r3, [r1, #4]
 8001464:	e025      	b.n	80014b2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001466:	4b66      	ldr	r3, [pc, #408]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	4a65      	ldr	r2, [pc, #404]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800146c:	f043 0308 	orr.w	r3, r3, #8
 8001470:	6013      	str	r3, [r2, #0]
 8001472:	4b63      	ldr	r3, [pc, #396]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800147a:	687b      	ldr	r3, [r7, #4]
 800147c:	6a1b      	ldr	r3, [r3, #32]
 800147e:	4960      	ldr	r1, [pc, #384]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001480:	4313      	orrs	r3, r2
 8001482:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001484:	4b5e      	ldr	r3, [pc, #376]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	69db      	ldr	r3, [r3, #28]
 8001490:	021b      	lsls	r3, r3, #8
 8001492:	495b      	ldr	r1, [pc, #364]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001494:	4313      	orrs	r3, r2
 8001496:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001498:	69bb      	ldr	r3, [r7, #24]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d109      	bne.n	80014b2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	6a1b      	ldr	r3, [r3, #32]
 80014a2:	4618      	mov	r0, r3
 80014a4:	f000 fd54 	bl	8001f50 <RCC_SetFlashLatencyFromMSIRange>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e380      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80014b2:	f000 fcc1 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 80014b6:	4602      	mov	r2, r0
 80014b8:	4b51      	ldr	r3, [pc, #324]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	091b      	lsrs	r3, r3, #4
 80014be:	f003 030f 	and.w	r3, r3, #15
 80014c2:	4950      	ldr	r1, [pc, #320]	; (8001604 <HAL_RCC_OscConfig+0x274>)
 80014c4:	5ccb      	ldrb	r3, [r1, r3]
 80014c6:	f003 031f 	and.w	r3, r3, #31
 80014ca:	fa22 f303 	lsr.w	r3, r2, r3
 80014ce:	4a4e      	ldr	r2, [pc, #312]	; (8001608 <HAL_RCC_OscConfig+0x278>)
 80014d0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80014d2:	4b4e      	ldr	r3, [pc, #312]	; (800160c <HAL_RCC_OscConfig+0x27c>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4618      	mov	r0, r3
 80014d8:	f7ff fb26 	bl	8000b28 <HAL_InitTick>
 80014dc:	4603      	mov	r3, r0
 80014de:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80014e0:	7bfb      	ldrb	r3, [r7, #15]
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d052      	beq.n	800158c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80014e6:	7bfb      	ldrb	r3, [r7, #15]
 80014e8:	e364      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	699b      	ldr	r3, [r3, #24]
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d032      	beq.n	8001558 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014f2:	4b43      	ldr	r3, [pc, #268]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a42      	ldr	r2, [pc, #264]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80014f8:	f043 0301 	orr.w	r3, r3, #1
 80014fc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014fe:	f7ff fb63 	bl	8000bc8 <HAL_GetTick>
 8001502:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001504:	e008      	b.n	8001518 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001506:	f7ff fb5f 	bl	8000bc8 <HAL_GetTick>
 800150a:	4602      	mov	r2, r0
 800150c:	693b      	ldr	r3, [r7, #16]
 800150e:	1ad3      	subs	r3, r2, r3
 8001510:	2b02      	cmp	r3, #2
 8001512:	d901      	bls.n	8001518 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001514:	2303      	movs	r3, #3
 8001516:	e34d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001518:	4b39      	ldr	r3, [pc, #228]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f003 0302 	and.w	r3, r3, #2
 8001520:	2b00      	cmp	r3, #0
 8001522:	d0f0      	beq.n	8001506 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001524:	4b36      	ldr	r3, [pc, #216]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a35      	ldr	r2, [pc, #212]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800152a:	f043 0308 	orr.w	r3, r3, #8
 800152e:	6013      	str	r3, [r2, #0]
 8001530:	4b33      	ldr	r3, [pc, #204]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6a1b      	ldr	r3, [r3, #32]
 800153c:	4930      	ldr	r1, [pc, #192]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800153e:	4313      	orrs	r3, r2
 8001540:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001542:	4b2f      	ldr	r3, [pc, #188]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	69db      	ldr	r3, [r3, #28]
 800154e:	021b      	lsls	r3, r3, #8
 8001550:	492b      	ldr	r1, [pc, #172]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001552:	4313      	orrs	r3, r2
 8001554:	604b      	str	r3, [r1, #4]
 8001556:	e01a      	b.n	800158e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001558:	4b29      	ldr	r3, [pc, #164]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a28      	ldr	r2, [pc, #160]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 800155e:	f023 0301 	bic.w	r3, r3, #1
 8001562:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001564:	f7ff fb30 	bl	8000bc8 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800156c:	f7ff fb2c 	bl	8000bc8 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e31a      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800157e:	4b20      	ldr	r3, [pc, #128]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f003 0302 	and.w	r3, r3, #2
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x1dc>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0301 	and.w	r3, r3, #1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d073      	beq.n	8001682 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b08      	cmp	r3, #8
 800159e:	d005      	beq.n	80015ac <HAL_RCC_OscConfig+0x21c>
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d10e      	bne.n	80015c4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b03      	cmp	r3, #3
 80015aa:	d10b      	bne.n	80015c4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80015ac:	4b14      	ldr	r3, [pc, #80]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d063      	beq.n	8001680 <HAL_RCC_OscConfig+0x2f0>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	685b      	ldr	r3, [r3, #4]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d15f      	bne.n	8001680 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e2f7      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80015cc:	d106      	bne.n	80015dc <HAL_RCC_OscConfig+0x24c>
 80015ce:	4b0c      	ldr	r3, [pc, #48]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a0b      	ldr	r2, [pc, #44]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015d8:	6013      	str	r3, [r2, #0]
 80015da:	e025      	b.n	8001628 <HAL_RCC_OscConfig+0x298>
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80015e4:	d114      	bne.n	8001610 <HAL_RCC_OscConfig+0x280>
 80015e6:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015ec:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015f0:	6013      	str	r3, [r2, #0]
 80015f2:	4b03      	ldr	r3, [pc, #12]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a02      	ldr	r2, [pc, #8]	; (8001600 <HAL_RCC_OscConfig+0x270>)
 80015f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015fc:	6013      	str	r3, [r2, #0]
 80015fe:	e013      	b.n	8001628 <HAL_RCC_OscConfig+0x298>
 8001600:	40021000 	.word	0x40021000
 8001604:	08002140 	.word	0x08002140
 8001608:	20000000 	.word	0x20000000
 800160c:	20000004 	.word	0x20000004
 8001610:	4ba0      	ldr	r3, [pc, #640]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a9f      	ldr	r2, [pc, #636]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001616:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800161a:	6013      	str	r3, [r2, #0]
 800161c:	4b9d      	ldr	r3, [pc, #628]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a9c      	ldr	r2, [pc, #624]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001622:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001626:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d013      	beq.n	8001658 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001630:	f7ff faca 	bl	8000bc8 <HAL_GetTick>
 8001634:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001636:	e008      	b.n	800164a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001638:	f7ff fac6 	bl	8000bc8 <HAL_GetTick>
 800163c:	4602      	mov	r2, r0
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	1ad3      	subs	r3, r2, r3
 8001642:	2b64      	cmp	r3, #100	; 0x64
 8001644:	d901      	bls.n	800164a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e2b4      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800164a:	4b92      	ldr	r3, [pc, #584]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001652:	2b00      	cmp	r3, #0
 8001654:	d0f0      	beq.n	8001638 <HAL_RCC_OscConfig+0x2a8>
 8001656:	e014      	b.n	8001682 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001658:	f7ff fab6 	bl	8000bc8 <HAL_GetTick>
 800165c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800165e:	e008      	b.n	8001672 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001660:	f7ff fab2 	bl	8000bc8 <HAL_GetTick>
 8001664:	4602      	mov	r2, r0
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	2b64      	cmp	r3, #100	; 0x64
 800166c:	d901      	bls.n	8001672 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800166e:	2303      	movs	r3, #3
 8001670:	e2a0      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001672:	4b88      	ldr	r3, [pc, #544]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800167a:	2b00      	cmp	r3, #0
 800167c:	d1f0      	bne.n	8001660 <HAL_RCC_OscConfig+0x2d0>
 800167e:	e000      	b.n	8001682 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001680:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0302 	and.w	r3, r3, #2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d060      	beq.n	8001750 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800168e:	69bb      	ldr	r3, [r7, #24]
 8001690:	2b04      	cmp	r3, #4
 8001692:	d005      	beq.n	80016a0 <HAL_RCC_OscConfig+0x310>
 8001694:	69bb      	ldr	r3, [r7, #24]
 8001696:	2b0c      	cmp	r3, #12
 8001698:	d119      	bne.n	80016ce <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b02      	cmp	r3, #2
 800169e:	d116      	bne.n	80016ce <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a0:	4b7c      	ldr	r3, [pc, #496]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	d005      	beq.n	80016b8 <HAL_RCC_OscConfig+0x328>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d101      	bne.n	80016b8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e27d      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b8:	4b76      	ldr	r3, [pc, #472]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	691b      	ldr	r3, [r3, #16]
 80016c4:	061b      	lsls	r3, r3, #24
 80016c6:	4973      	ldr	r1, [pc, #460]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016c8:	4313      	orrs	r3, r2
 80016ca:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016cc:	e040      	b.n	8001750 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	68db      	ldr	r3, [r3, #12]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d023      	beq.n	800171e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016d6:	4b6f      	ldr	r3, [pc, #444]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a6e      	ldr	r2, [pc, #440]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fa71 	bl	8000bc8 <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fa6d 	bl	8000bc8 <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e25b      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016fc:	4b65      	ldr	r3, [pc, #404]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d0f0      	beq.n	80016ea <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001708:	4b62      	ldr	r3, [pc, #392]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	691b      	ldr	r3, [r3, #16]
 8001714:	061b      	lsls	r3, r3, #24
 8001716:	495f      	ldr	r1, [pc, #380]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]
 800171c:	e018      	b.n	8001750 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800171e:	4b5d      	ldr	r3, [pc, #372]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a5c      	ldr	r2, [pc, #368]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001724:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001728:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172a:	f7ff fa4d 	bl	8000bc8 <HAL_GetTick>
 800172e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001730:	e008      	b.n	8001744 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001732:	f7ff fa49 	bl	8000bc8 <HAL_GetTick>
 8001736:	4602      	mov	r2, r0
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	1ad3      	subs	r3, r2, r3
 800173c:	2b02      	cmp	r3, #2
 800173e:	d901      	bls.n	8001744 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001740:	2303      	movs	r3, #3
 8001742:	e237      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001744:	4b53      	ldr	r3, [pc, #332]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800174c:	2b00      	cmp	r3, #0
 800174e:	d1f0      	bne.n	8001732 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f003 0308 	and.w	r3, r3, #8
 8001758:	2b00      	cmp	r3, #0
 800175a:	d03c      	beq.n	80017d6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01c      	beq.n	800179e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001764:	4b4b      	ldr	r3, [pc, #300]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176a:	4a4a      	ldr	r2, [pc, #296]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800176c:	f043 0301 	orr.w	r3, r3, #1
 8001770:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001774:	f7ff fa28 	bl	8000bc8 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800177c:	f7ff fa24 	bl	8000bc8 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b02      	cmp	r3, #2
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e212      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800178e:	4b41      	ldr	r3, [pc, #260]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001790:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001794:	f003 0302 	and.w	r3, r3, #2
 8001798:	2b00      	cmp	r3, #0
 800179a:	d0ef      	beq.n	800177c <HAL_RCC_OscConfig+0x3ec>
 800179c:	e01b      	b.n	80017d6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800179e:	4b3d      	ldr	r3, [pc, #244]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017a4:	4a3b      	ldr	r2, [pc, #236]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017a6:	f023 0301 	bic.w	r3, r3, #1
 80017aa:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017ae:	f7ff fa0b 	bl	8000bc8 <HAL_GetTick>
 80017b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017b4:	e008      	b.n	80017c8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017b6:	f7ff fa07 	bl	8000bc8 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	693b      	ldr	r3, [r7, #16]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	2b02      	cmp	r3, #2
 80017c2:	d901      	bls.n	80017c8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e1f5      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80017c8:	4b32      	ldr	r3, [pc, #200]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1ef      	bne.n	80017b6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	2b00      	cmp	r3, #0
 80017e0:	f000 80a6 	beq.w	8001930 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80017e4:	2300      	movs	r3, #0
 80017e6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017e8:	4b2a      	ldr	r3, [pc, #168]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d10d      	bne.n	8001810 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017f4:	4b27      	ldr	r3, [pc, #156]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017f8:	4a26      	ldr	r2, [pc, #152]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 80017fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017fe:	6593      	str	r3, [r2, #88]	; 0x58
 8001800:	4b24      	ldr	r3, [pc, #144]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001802:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001804:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800180c:	2301      	movs	r3, #1
 800180e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001810:	4b21      	ldr	r3, [pc, #132]	; (8001898 <HAL_RCC_OscConfig+0x508>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001818:	2b00      	cmp	r3, #0
 800181a:	d118      	bne.n	800184e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800181c:	4b1e      	ldr	r3, [pc, #120]	; (8001898 <HAL_RCC_OscConfig+0x508>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a1d      	ldr	r2, [pc, #116]	; (8001898 <HAL_RCC_OscConfig+0x508>)
 8001822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001826:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001828:	f7ff f9ce 	bl	8000bc8 <HAL_GetTick>
 800182c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800182e:	e008      	b.n	8001842 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001830:	f7ff f9ca 	bl	8000bc8 <HAL_GetTick>
 8001834:	4602      	mov	r2, r0
 8001836:	693b      	ldr	r3, [r7, #16]
 8001838:	1ad3      	subs	r3, r2, r3
 800183a:	2b02      	cmp	r3, #2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e1b8      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001842:	4b15      	ldr	r3, [pc, #84]	; (8001898 <HAL_RCC_OscConfig+0x508>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0f0      	beq.n	8001830 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_RCC_OscConfig+0x4d8>
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001858:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185c:	4a0d      	ldr	r2, [pc, #52]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 800185e:	f043 0301 	orr.w	r3, r3, #1
 8001862:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001866:	e029      	b.n	80018bc <HAL_RCC_OscConfig+0x52c>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	689b      	ldr	r3, [r3, #8]
 800186c:	2b05      	cmp	r3, #5
 800186e:	d115      	bne.n	800189c <HAL_RCC_OscConfig+0x50c>
 8001870:	4b08      	ldr	r3, [pc, #32]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001872:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001876:	4a07      	ldr	r2, [pc, #28]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001878:	f043 0304 	orr.w	r3, r3, #4
 800187c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001880:	4b04      	ldr	r3, [pc, #16]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001886:	4a03      	ldr	r2, [pc, #12]	; (8001894 <HAL_RCC_OscConfig+0x504>)
 8001888:	f043 0301 	orr.w	r3, r3, #1
 800188c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001890:	e014      	b.n	80018bc <HAL_RCC_OscConfig+0x52c>
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000
 8001898:	40007000 	.word	0x40007000
 800189c:	4b9d      	ldr	r3, [pc, #628]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 800189e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a2:	4a9c      	ldr	r2, [pc, #624]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 80018a4:	f023 0301 	bic.w	r3, r3, #1
 80018a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80018ac:	4b99      	ldr	r3, [pc, #612]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 80018ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018b2:	4a98      	ldr	r2, [pc, #608]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 80018b4:	f023 0304 	bic.w	r3, r3, #4
 80018b8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d016      	beq.n	80018f2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018c4:	f7ff f980 	bl	8000bc8 <HAL_GetTick>
 80018c8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018ca:	e00a      	b.n	80018e2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018cc:	f7ff f97c 	bl	8000bc8 <HAL_GetTick>
 80018d0:	4602      	mov	r2, r0
 80018d2:	693b      	ldr	r3, [r7, #16]
 80018d4:	1ad3      	subs	r3, r2, r3
 80018d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018da:	4293      	cmp	r3, r2
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e168      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80018e2:	4b8c      	ldr	r3, [pc, #560]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 80018e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018e8:	f003 0302 	and.w	r3, r3, #2
 80018ec:	2b00      	cmp	r3, #0
 80018ee:	d0ed      	beq.n	80018cc <HAL_RCC_OscConfig+0x53c>
 80018f0:	e015      	b.n	800191e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018f2:	f7ff f969 	bl	8000bc8 <HAL_GetTick>
 80018f6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018f8:	e00a      	b.n	8001910 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018fa:	f7ff f965 	bl	8000bc8 <HAL_GetTick>
 80018fe:	4602      	mov	r2, r0
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	1ad3      	subs	r3, r2, r3
 8001904:	f241 3288 	movw	r2, #5000	; 0x1388
 8001908:	4293      	cmp	r3, r2
 800190a:	d901      	bls.n	8001910 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800190c:	2303      	movs	r3, #3
 800190e:	e151      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001910:	4b80      	ldr	r3, [pc, #512]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1ed      	bne.n	80018fa <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800191e:	7ffb      	ldrb	r3, [r7, #31]
 8001920:	2b01      	cmp	r3, #1
 8001922:	d105      	bne.n	8001930 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001924:	4b7b      	ldr	r3, [pc, #492]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001926:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001928:	4a7a      	ldr	r2, [pc, #488]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 800192a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800192e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0320 	and.w	r3, r3, #32
 8001938:	2b00      	cmp	r3, #0
 800193a:	d03c      	beq.n	80019b6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001940:	2b00      	cmp	r3, #0
 8001942:	d01c      	beq.n	800197e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001944:	4b73      	ldr	r3, [pc, #460]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001946:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800194a:	4a72      	ldr	r2, [pc, #456]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 800194c:	f043 0301 	orr.w	r3, r3, #1
 8001950:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001954:	f7ff f938 	bl	8000bc8 <HAL_GetTick>
 8001958:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800195a:	e008      	b.n	800196e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800195c:	f7ff f934 	bl	8000bc8 <HAL_GetTick>
 8001960:	4602      	mov	r2, r0
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	2b02      	cmp	r3, #2
 8001968:	d901      	bls.n	800196e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800196a:	2303      	movs	r3, #3
 800196c:	e122      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800196e:	4b69      	ldr	r3, [pc, #420]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001970:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001974:	f003 0302 	and.w	r3, r3, #2
 8001978:	2b00      	cmp	r3, #0
 800197a:	d0ef      	beq.n	800195c <HAL_RCC_OscConfig+0x5cc>
 800197c:	e01b      	b.n	80019b6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800197e:	4b65      	ldr	r3, [pc, #404]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001980:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001984:	4a63      	ldr	r2, [pc, #396]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001986:	f023 0301 	bic.w	r3, r3, #1
 800198a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198e:	f7ff f91b 	bl	8000bc8 <HAL_GetTick>
 8001992:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001994:	e008      	b.n	80019a8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001996:	f7ff f917 	bl	8000bc8 <HAL_GetTick>
 800199a:	4602      	mov	r2, r0
 800199c:	693b      	ldr	r3, [r7, #16]
 800199e:	1ad3      	subs	r3, r2, r3
 80019a0:	2b02      	cmp	r3, #2
 80019a2:	d901      	bls.n	80019a8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80019a4:	2303      	movs	r3, #3
 80019a6:	e105      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80019a8:	4b5a      	ldr	r3, [pc, #360]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 80019aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1ef      	bne.n	8001996 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019ba:	2b00      	cmp	r3, #0
 80019bc:	f000 80f9 	beq.w	8001bb2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019c4:	2b02      	cmp	r3, #2
 80019c6:	f040 80cf 	bne.w	8001b68 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80019ca:	4b52      	ldr	r3, [pc, #328]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 80019cc:	68db      	ldr	r3, [r3, #12]
 80019ce:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	f003 0203 	and.w	r2, r3, #3
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019da:	429a      	cmp	r2, r3
 80019dc:	d12c      	bne.n	8001a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019de:	697b      	ldr	r3, [r7, #20]
 80019e0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019e8:	3b01      	subs	r3, #1
 80019ea:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d123      	bne.n	8001a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019fa:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019fc:	429a      	cmp	r2, r3
 80019fe:	d11b      	bne.n	8001a38 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a0a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001a0c:	429a      	cmp	r2, r3
 8001a0e:	d113      	bne.n	8001a38 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a1a:	085b      	lsrs	r3, r3, #1
 8001a1c:	3b01      	subs	r3, #1
 8001a1e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d109      	bne.n	8001a38 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001a24:	697b      	ldr	r3, [r7, #20]
 8001a26:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a2e:	085b      	lsrs	r3, r3, #1
 8001a30:	3b01      	subs	r3, #1
 8001a32:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001a34:	429a      	cmp	r2, r3
 8001a36:	d071      	beq.n	8001b1c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	2b0c      	cmp	r3, #12
 8001a3c:	d068      	beq.n	8001b10 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001a3e:	4b35      	ldr	r3, [pc, #212]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d105      	bne.n	8001a56 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001a4a:	4b32      	ldr	r3, [pc, #200]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d001      	beq.n	8001a5a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001a56:	2301      	movs	r3, #1
 8001a58:	e0ac      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a2d      	ldr	r2, [pc, #180]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001a60:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a64:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a66:	f7ff f8af 	bl	8000bc8 <HAL_GetTick>
 8001a6a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a6c:	e008      	b.n	8001a80 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6e:	f7ff f8ab 	bl	8000bc8 <HAL_GetTick>
 8001a72:	4602      	mov	r2, r0
 8001a74:	693b      	ldr	r3, [r7, #16]
 8001a76:	1ad3      	subs	r3, r2, r3
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	d901      	bls.n	8001a80 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	e099      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	4b24      	ldr	r3, [pc, #144]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d1f0      	bne.n	8001a6e <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a8c:	4b21      	ldr	r3, [pc, #132]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001a8e:	68da      	ldr	r2, [r3, #12]
 8001a90:	4b21      	ldr	r3, [pc, #132]	; (8001b18 <HAL_RCC_OscConfig+0x788>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a9c:	3a01      	subs	r2, #1
 8001a9e:	0112      	lsls	r2, r2, #4
 8001aa0:	4311      	orrs	r1, r2
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001aa6:	0212      	lsls	r2, r2, #8
 8001aa8:	4311      	orrs	r1, r2
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001aae:	0852      	lsrs	r2, r2, #1
 8001ab0:	3a01      	subs	r2, #1
 8001ab2:	0552      	lsls	r2, r2, #21
 8001ab4:	4311      	orrs	r1, r2
 8001ab6:	687a      	ldr	r2, [r7, #4]
 8001ab8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001aba:	0852      	lsrs	r2, r2, #1
 8001abc:	3a01      	subs	r2, #1
 8001abe:	0652      	lsls	r2, r2, #25
 8001ac0:	4311      	orrs	r1, r2
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001ac6:	06d2      	lsls	r2, r2, #27
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	4912      	ldr	r1, [pc, #72]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b10      	ldr	r3, [pc, #64]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a0f      	ldr	r2, [pc, #60]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001adc:	4b0d      	ldr	r3, [pc, #52]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001ae2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ae6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ae8:	f7ff f86e 	bl	8000bc8 <HAL_GetTick>
 8001aec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aee:	e008      	b.n	8001b02 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af0:	f7ff f86a 	bl	8000bc8 <HAL_GetTick>
 8001af4:	4602      	mov	r2, r0
 8001af6:	693b      	ldr	r3, [r7, #16]
 8001af8:	1ad3      	subs	r3, r2, r3
 8001afa:	2b02      	cmp	r3, #2
 8001afc:	d901      	bls.n	8001b02 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001afe:	2303      	movs	r3, #3
 8001b00:	e058      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b02:	4b04      	ldr	r3, [pc, #16]	; (8001b14 <HAL_RCC_OscConfig+0x784>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d0f0      	beq.n	8001af0 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b0e:	e050      	b.n	8001bb2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001b10:	2301      	movs	r3, #1
 8001b12:	e04f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
 8001b14:	40021000 	.word	0x40021000
 8001b18:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b1c:	4b27      	ldr	r3, [pc, #156]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d144      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001b28:	4b24      	ldr	r3, [pc, #144]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a23      	ldr	r2, [pc, #140]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001b2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001b34:	4b21      	ldr	r3, [pc, #132]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001b36:	68db      	ldr	r3, [r3, #12]
 8001b38:	4a20      	ldr	r2, [pc, #128]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001b3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001b40:	f7ff f842 	bl	8000bc8 <HAL_GetTick>
 8001b44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b46:	e008      	b.n	8001b5a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b48:	f7ff f83e 	bl	8000bc8 <HAL_GetTick>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	1ad3      	subs	r3, r2, r3
 8001b52:	2b02      	cmp	r3, #2
 8001b54:	d901      	bls.n	8001b5a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e02c      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b5a:	4b18      	ldr	r3, [pc, #96]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d0f0      	beq.n	8001b48 <HAL_RCC_OscConfig+0x7b8>
 8001b66:	e024      	b.n	8001bb2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b68:	69bb      	ldr	r3, [r7, #24]
 8001b6a:	2b0c      	cmp	r3, #12
 8001b6c:	d01f      	beq.n	8001bae <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b6e:	4b13      	ldr	r3, [pc, #76]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4a12      	ldr	r2, [pc, #72]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001b74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b7a:	f7ff f825 	bl	8000bc8 <HAL_GetTick>
 8001b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b80:	e008      	b.n	8001b94 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b82:	f7ff f821 	bl	8000bc8 <HAL_GetTick>
 8001b86:	4602      	mov	r2, r0
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	1ad3      	subs	r3, r2, r3
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e00f      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b94:	4b09      	ldr	r3, [pc, #36]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d1f0      	bne.n	8001b82 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001ba0:	4b06      	ldr	r3, [pc, #24]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001ba2:	68da      	ldr	r2, [r3, #12]
 8001ba4:	4905      	ldr	r1, [pc, #20]	; (8001bbc <HAL_RCC_OscConfig+0x82c>)
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <HAL_RCC_OscConfig+0x830>)
 8001ba8:	4013      	ands	r3, r2
 8001baa:	60cb      	str	r3, [r1, #12]
 8001bac:	e001      	b.n	8001bb2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e000      	b.n	8001bb4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001bb2:	2300      	movs	r3, #0
}
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	3720      	adds	r7, #32
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	feeefffc 	.word	0xfeeefffc

08001bc4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	e11d      	b.n	8001e18 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001bdc:	4b90      	ldr	r3, [pc, #576]	; (8001e20 <HAL_RCC_ClockConfig+0x25c>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	683a      	ldr	r2, [r7, #0]
 8001be6:	429a      	cmp	r2, r3
 8001be8:	d910      	bls.n	8001c0c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bea:	4b8d      	ldr	r3, [pc, #564]	; (8001e20 <HAL_RCC_ClockConfig+0x25c>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f023 020f 	bic.w	r2, r3, #15
 8001bf2:	498b      	ldr	r1, [pc, #556]	; (8001e20 <HAL_RCC_ClockConfig+0x25c>)
 8001bf4:	683b      	ldr	r3, [r7, #0]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bfa:	4b89      	ldr	r3, [pc, #548]	; (8001e20 <HAL_RCC_ClockConfig+0x25c>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f003 030f 	and.w	r3, r3, #15
 8001c02:	683a      	ldr	r2, [r7, #0]
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d001      	beq.n	8001c0c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e105      	b.n	8001e18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0302 	and.w	r3, r3, #2
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d010      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689a      	ldr	r2, [r3, #8]
 8001c1c:	4b81      	ldr	r3, [pc, #516]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c24:	429a      	cmp	r2, r3
 8001c26:	d908      	bls.n	8001c3a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c28:	4b7e      	ldr	r3, [pc, #504]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	497b      	ldr	r1, [pc, #492]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0301 	and.w	r3, r3, #1
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d079      	beq.n	8001d3a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	685b      	ldr	r3, [r3, #4]
 8001c4a:	2b03      	cmp	r3, #3
 8001c4c:	d11e      	bne.n	8001c8c <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001c4e:	4b75      	ldr	r3, [pc, #468]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d101      	bne.n	8001c5e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001c5a:	2301      	movs	r3, #1
 8001c5c:	e0dc      	b.n	8001e18 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001c5e:	f000 f9d1 	bl	8002004 <RCC_GetSysClockFreqFromPLLSource>
 8001c62:	4603      	mov	r3, r0
 8001c64:	4a70      	ldr	r2, [pc, #448]	; (8001e28 <HAL_RCC_ClockConfig+0x264>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d946      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001c6a:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d140      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001c76:	4b6b      	ldr	r3, [pc, #428]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001c7e:	4a69      	ldr	r2, [pc, #420]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001c80:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c84:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001c86:	2380      	movs	r3, #128	; 0x80
 8001c88:	617b      	str	r3, [r7, #20]
 8001c8a:	e035      	b.n	8001cf8 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	2b02      	cmp	r3, #2
 8001c92:	d107      	bne.n	8001ca4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c94:	4b63      	ldr	r3, [pc, #396]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d115      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001ca0:	2301      	movs	r3, #1
 8001ca2:	e0b9      	b.n	8001e18 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	685b      	ldr	r3, [r3, #4]
 8001ca8:	2b00      	cmp	r3, #0
 8001caa:	d107      	bne.n	8001cbc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001cac:	4b5d      	ldr	r3, [pc, #372]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0302 	and.w	r3, r3, #2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d109      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e0ad      	b.n	8001e18 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001cbc:	4b59      	ldr	r3, [pc, #356]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d101      	bne.n	8001ccc <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001cc8:	2301      	movs	r3, #1
 8001cca:	e0a5      	b.n	8001e18 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001ccc:	f000 f8b4 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	4a55      	ldr	r2, [pc, #340]	; (8001e28 <HAL_RCC_ClockConfig+0x264>)
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d90f      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001cd8:	4b52      	ldr	r3, [pc, #328]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d109      	bne.n	8001cf8 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001ce4:	4b4f      	ldr	r3, [pc, #316]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001ce6:	689b      	ldr	r3, [r3, #8]
 8001ce8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001cec:	4a4d      	ldr	r2, [pc, #308]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001cee:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001cf2:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001cf4:	2380      	movs	r3, #128	; 0x80
 8001cf6:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001cf8:	4b4a      	ldr	r3, [pc, #296]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f023 0203 	bic.w	r2, r3, #3
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	4947      	ldr	r1, [pc, #284]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001d06:	4313      	orrs	r3, r2
 8001d08:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001d0a:	f7fe ff5d 	bl	8000bc8 <HAL_GetTick>
 8001d0e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d10:	e00a      	b.n	8001d28 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001d12:	f7fe ff59 	bl	8000bc8 <HAL_GetTick>
 8001d16:	4602      	mov	r2, r0
 8001d18:	693b      	ldr	r3, [r7, #16]
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e077      	b.n	8001e18 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001d28:	4b3e      	ldr	r3, [pc, #248]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001d2a:	689b      	ldr	r3, [r3, #8]
 8001d2c:	f003 020c 	and.w	r2, r3, #12
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	009b      	lsls	r3, r3, #2
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d1eb      	bne.n	8001d12 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b80      	cmp	r3, #128	; 0x80
 8001d3e:	d105      	bne.n	8001d4c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	4a37      	ldr	r2, [pc, #220]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001d46:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001d4a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f003 0302 	and.w	r3, r3, #2
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d010      	beq.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4b31      	ldr	r3, [pc, #196]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001d5e:	689b      	ldr	r3, [r3, #8]
 8001d60:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d208      	bcs.n	8001d7a <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d68:	4b2e      	ldr	r3, [pc, #184]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001d6a:	689b      	ldr	r3, [r3, #8]
 8001d6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	492b      	ldr	r1, [pc, #172]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001d76:	4313      	orrs	r3, r2
 8001d78:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001d7a:	4b29      	ldr	r3, [pc, #164]	; (8001e20 <HAL_RCC_ClockConfig+0x25c>)
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	f003 030f 	and.w	r3, r3, #15
 8001d82:	683a      	ldr	r2, [r7, #0]
 8001d84:	429a      	cmp	r2, r3
 8001d86:	d210      	bcs.n	8001daa <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d88:	4b25      	ldr	r3, [pc, #148]	; (8001e20 <HAL_RCC_ClockConfig+0x25c>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f023 020f 	bic.w	r2, r3, #15
 8001d90:	4923      	ldr	r1, [pc, #140]	; (8001e20 <HAL_RCC_ClockConfig+0x25c>)
 8001d92:	683b      	ldr	r3, [r7, #0]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_RCC_ClockConfig+0x25c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 030f 	and.w	r3, r3, #15
 8001da0:	683a      	ldr	r2, [r7, #0]
 8001da2:	429a      	cmp	r2, r3
 8001da4:	d001      	beq.n	8001daa <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 8001da6:	2301      	movs	r3, #1
 8001da8:	e036      	b.n	8001e18 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f003 0304 	and.w	r3, r3, #4
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d008      	beq.n	8001dc8 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001db8:	689b      	ldr	r3, [r3, #8]
 8001dba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	68db      	ldr	r3, [r3, #12]
 8001dc2:	4918      	ldr	r1, [pc, #96]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	f003 0308 	and.w	r3, r3, #8
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d009      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001dd4:	4b13      	ldr	r3, [pc, #76]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001dd6:	689b      	ldr	r3, [r3, #8]
 8001dd8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	691b      	ldr	r3, [r3, #16]
 8001de0:	00db      	lsls	r3, r3, #3
 8001de2:	4910      	ldr	r1, [pc, #64]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001de4:	4313      	orrs	r3, r2
 8001de6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001de8:	f000 f826 	bl	8001e38 <HAL_RCC_GetSysClockFreq>
 8001dec:	4602      	mov	r2, r0
 8001dee:	4b0d      	ldr	r3, [pc, #52]	; (8001e24 <HAL_RCC_ClockConfig+0x260>)
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	091b      	lsrs	r3, r3, #4
 8001df4:	f003 030f 	and.w	r3, r3, #15
 8001df8:	490c      	ldr	r1, [pc, #48]	; (8001e2c <HAL_RCC_ClockConfig+0x268>)
 8001dfa:	5ccb      	ldrb	r3, [r1, r3]
 8001dfc:	f003 031f 	and.w	r3, r3, #31
 8001e00:	fa22 f303 	lsr.w	r3, r2, r3
 8001e04:	4a0a      	ldr	r2, [pc, #40]	; (8001e30 <HAL_RCC_ClockConfig+0x26c>)
 8001e06:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001e08:	4b0a      	ldr	r3, [pc, #40]	; (8001e34 <HAL_RCC_ClockConfig+0x270>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	f7fe fe8b 	bl	8000b28 <HAL_InitTick>
 8001e12:	4603      	mov	r3, r0
 8001e14:	73fb      	strb	r3, [r7, #15]

  return status;
 8001e16:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3718      	adds	r7, #24
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40022000 	.word	0x40022000
 8001e24:	40021000 	.word	0x40021000
 8001e28:	04c4b400 	.word	0x04c4b400
 8001e2c:	08002140 	.word	0x08002140
 8001e30:	20000000 	.word	0x20000000
 8001e34:	20000004 	.word	0x20000004

08001e38 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	; 0x24
 8001e3c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	61fb      	str	r3, [r7, #28]
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e46:	4b3e      	ldr	r3, [pc, #248]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e48:	689b      	ldr	r3, [r3, #8]
 8001e4a:	f003 030c 	and.w	r3, r3, #12
 8001e4e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e50:	4b3b      	ldr	r3, [pc, #236]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e52:	68db      	ldr	r3, [r3, #12]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001e5a:	693b      	ldr	r3, [r7, #16]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d005      	beq.n	8001e6c <HAL_RCC_GetSysClockFreq+0x34>
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	2b0c      	cmp	r3, #12
 8001e64:	d121      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d11e      	bne.n	8001eaa <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001e6c:	4b34      	ldr	r3, [pc, #208]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0308 	and.w	r3, r3, #8
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d107      	bne.n	8001e88 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001e78:	4b31      	ldr	r3, [pc, #196]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e7e:	0a1b      	lsrs	r3, r3, #8
 8001e80:	f003 030f 	and.w	r3, r3, #15
 8001e84:	61fb      	str	r3, [r7, #28]
 8001e86:	e005      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001e88:	4b2d      	ldr	r3, [pc, #180]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	091b      	lsrs	r3, r3, #4
 8001e8e:	f003 030f 	and.w	r3, r3, #15
 8001e92:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001e94:	4a2b      	ldr	r2, [pc, #172]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d10d      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001ea8:	e00a      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	2b04      	cmp	r3, #4
 8001eae:	d102      	bne.n	8001eb6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001eb0:	4b25      	ldr	r3, [pc, #148]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001eb2:	61bb      	str	r3, [r7, #24]
 8001eb4:	e004      	b.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	d101      	bne.n	8001ec0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001ebc:	4b23      	ldr	r3, [pc, #140]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ebe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001ec0:	693b      	ldr	r3, [r7, #16]
 8001ec2:	2b0c      	cmp	r3, #12
 8001ec4:	d134      	bne.n	8001f30 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001ec6:	4b1e      	ldr	r3, [pc, #120]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	f003 0303 	and.w	r3, r3, #3
 8001ece:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ed0:	68bb      	ldr	r3, [r7, #8]
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d003      	beq.n	8001ede <HAL_RCC_GetSysClockFreq+0xa6>
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d003      	beq.n	8001ee4 <HAL_RCC_GetSysClockFreq+0xac>
 8001edc:	e005      	b.n	8001eea <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ede:	4b1a      	ldr	r3, [pc, #104]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ee0:	617b      	str	r3, [r7, #20]
      break;
 8001ee2:	e005      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x114>)
 8001ee6:	617b      	str	r3, [r7, #20]
      break;
 8001ee8:	e002      	b.n	8001ef0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001eea:	69fb      	ldr	r3, [r7, #28]
 8001eec:	617b      	str	r3, [r7, #20]
      break;
 8001eee:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ef0:	4b13      	ldr	r3, [pc, #76]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	091b      	lsrs	r3, r3, #4
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	3301      	adds	r3, #1
 8001efc:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001efe:	4b10      	ldr	r3, [pc, #64]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f00:	68db      	ldr	r3, [r3, #12]
 8001f02:	0a1b      	lsrs	r3, r3, #8
 8001f04:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f08:	697a      	ldr	r2, [r7, #20]
 8001f0a:	fb03 f202 	mul.w	r2, r3, r2
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f14:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001f16:	4b0a      	ldr	r3, [pc, #40]	; (8001f40 <HAL_RCC_GetSysClockFreq+0x108>)
 8001f18:	68db      	ldr	r3, [r3, #12]
 8001f1a:	0e5b      	lsrs	r3, r3, #25
 8001f1c:	f003 0303 	and.w	r3, r3, #3
 8001f20:	3301      	adds	r3, #1
 8001f22:	005b      	lsls	r3, r3, #1
 8001f24:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001f26:	697a      	ldr	r2, [r7, #20]
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001f30:	69bb      	ldr	r3, [r7, #24]
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3724      	adds	r7, #36	; 0x24
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
 8001f3e:	bf00      	nop
 8001f40:	40021000 	.word	0x40021000
 8001f44:	08002150 	.word	0x08002150
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200

08001f50 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f58:	2300      	movs	r3, #0
 8001f5a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f5c:	4b27      	ldr	r3, [pc, #156]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d003      	beq.n	8001f70 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f68:	f7ff f93e 	bl	80011e8 <HAL_PWREx_GetVoltageRange>
 8001f6c:	6178      	str	r0, [r7, #20]
 8001f6e:	e014      	b.n	8001f9a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f70:	4b22      	ldr	r3, [pc, #136]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f74:	4a21      	ldr	r2, [pc, #132]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f7a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f7c:	4b1f      	ldr	r3, [pc, #124]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f84:	60fb      	str	r3, [r7, #12]
 8001f86:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f88:	f7ff f92e 	bl	80011e8 <HAL_PWREx_GetVoltageRange>
 8001f8c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f8e:	4b1b      	ldr	r3, [pc, #108]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f92:	4a1a      	ldr	r2, [pc, #104]	; (8001ffc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8001f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001f98:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fa0:	d10b      	bne.n	8001fba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2b80      	cmp	r3, #128	; 0x80
 8001fa6:	d913      	bls.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	2ba0      	cmp	r3, #160	; 0xa0
 8001fac:	d902      	bls.n	8001fb4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fae:	2302      	movs	r3, #2
 8001fb0:	613b      	str	r3, [r7, #16]
 8001fb2:	e00d      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fb4:	2301      	movs	r3, #1
 8001fb6:	613b      	str	r3, [r7, #16]
 8001fb8:	e00a      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	2b7f      	cmp	r3, #127	; 0x7f
 8001fbe:	d902      	bls.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e004      	b.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b70      	cmp	r3, #112	; 0x70
 8001fca:	d101      	bne.n	8001fd0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fcc:	2301      	movs	r3, #1
 8001fce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fd0:	4b0b      	ldr	r3, [pc, #44]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f023 020f 	bic.w	r2, r3, #15
 8001fd8:	4909      	ldr	r1, [pc, #36]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fda:	693b      	ldr	r3, [r7, #16]
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001fe0:	4b07      	ldr	r3, [pc, #28]	; (8002000 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 030f 	and.w	r3, r3, #15
 8001fe8:	693a      	ldr	r2, [r7, #16]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d001      	beq.n	8001ff2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e000      	b.n	8001ff4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8001ff2:	2300      	movs	r3, #0
}
 8001ff4:	4618      	mov	r0, r3
 8001ff6:	3718      	adds	r7, #24
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40021000 	.word	0x40021000
 8002000:	40022000 	.word	0x40022000

08002004 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002004:	b480      	push	{r7}
 8002006:	b087      	sub	sp, #28
 8002008:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800200a:	4b2d      	ldr	r3, [pc, #180]	; (80020c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800200c:	68db      	ldr	r3, [r3, #12]
 800200e:	f003 0303 	and.w	r3, r3, #3
 8002012:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	2b03      	cmp	r3, #3
 8002018:	d00b      	beq.n	8002032 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	2b03      	cmp	r3, #3
 800201e:	d825      	bhi.n	800206c <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2b01      	cmp	r3, #1
 8002024:	d008      	beq.n	8002038 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2b02      	cmp	r3, #2
 800202a:	d11f      	bne.n	800206c <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 800202c:	4b25      	ldr	r3, [pc, #148]	; (80020c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800202e:	613b      	str	r3, [r7, #16]
    break;
 8002030:	e01f      	b.n	8002072 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002032:	4b25      	ldr	r3, [pc, #148]	; (80020c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002034:	613b      	str	r3, [r7, #16]
    break;
 8002036:	e01c      	b.n	8002072 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002038:	4b21      	ldr	r3, [pc, #132]	; (80020c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f003 0308 	and.w	r3, r3, #8
 8002040:	2b00      	cmp	r3, #0
 8002042:	d107      	bne.n	8002054 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002044:	4b1e      	ldr	r3, [pc, #120]	; (80020c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002046:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800204a:	0a1b      	lsrs	r3, r3, #8
 800204c:	f003 030f 	and.w	r3, r3, #15
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	e005      	b.n	8002060 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002054:	4b1a      	ldr	r3, [pc, #104]	; (80020c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	091b      	lsrs	r3, r3, #4
 800205a:	f003 030f 	and.w	r3, r3, #15
 800205e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002060:	4a1a      	ldr	r2, [pc, #104]	; (80020cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002062:	697b      	ldr	r3, [r7, #20]
 8002064:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002068:	613b      	str	r3, [r7, #16]
    break;
 800206a:	e002      	b.n	8002072 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 800206c:	2300      	movs	r3, #0
 800206e:	613b      	str	r3, [r7, #16]
    break;
 8002070:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002072:	4b13      	ldr	r3, [pc, #76]	; (80020c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002074:	68db      	ldr	r3, [r3, #12]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	3301      	adds	r3, #1
 800207e:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002080:	4b0f      	ldr	r3, [pc, #60]	; (80020c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002082:	68db      	ldr	r3, [r3, #12]
 8002084:	0a1b      	lsrs	r3, r3, #8
 8002086:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	fb03 f202 	mul.w	r2, r3, r2
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	fbb2 f3f3 	udiv	r3, r2, r3
 8002096:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002098:	4b09      	ldr	r3, [pc, #36]	; (80020c0 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800209a:	68db      	ldr	r3, [r3, #12]
 800209c:	0e5b      	lsrs	r3, r3, #25
 800209e:	f003 0303 	and.w	r3, r3, #3
 80020a2:	3301      	adds	r3, #1
 80020a4:	005b      	lsls	r3, r3, #1
 80020a6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80020a8:	693a      	ldr	r2, [r7, #16]
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80020b2:	683b      	ldr	r3, [r7, #0]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	371c      	adds	r7, #28
 80020b8:	46bd      	mov	sp, r7
 80020ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020be:	4770      	bx	lr
 80020c0:	40021000 	.word	0x40021000
 80020c4:	00f42400 	.word	0x00f42400
 80020c8:	007a1200 	.word	0x007a1200
 80020cc:	08002150 	.word	0x08002150

080020d0 <__libc_init_array>:
 80020d0:	b570      	push	{r4, r5, r6, lr}
 80020d2:	4d0d      	ldr	r5, [pc, #52]	; (8002108 <__libc_init_array+0x38>)
 80020d4:	4c0d      	ldr	r4, [pc, #52]	; (800210c <__libc_init_array+0x3c>)
 80020d6:	1b64      	subs	r4, r4, r5
 80020d8:	10a4      	asrs	r4, r4, #2
 80020da:	2600      	movs	r6, #0
 80020dc:	42a6      	cmp	r6, r4
 80020de:	d109      	bne.n	80020f4 <__libc_init_array+0x24>
 80020e0:	4d0b      	ldr	r5, [pc, #44]	; (8002110 <__libc_init_array+0x40>)
 80020e2:	4c0c      	ldr	r4, [pc, #48]	; (8002114 <__libc_init_array+0x44>)
 80020e4:	f000 f820 	bl	8002128 <_init>
 80020e8:	1b64      	subs	r4, r4, r5
 80020ea:	10a4      	asrs	r4, r4, #2
 80020ec:	2600      	movs	r6, #0
 80020ee:	42a6      	cmp	r6, r4
 80020f0:	d105      	bne.n	80020fe <__libc_init_array+0x2e>
 80020f2:	bd70      	pop	{r4, r5, r6, pc}
 80020f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80020f8:	4798      	blx	r3
 80020fa:	3601      	adds	r6, #1
 80020fc:	e7ee      	b.n	80020dc <__libc_init_array+0xc>
 80020fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8002102:	4798      	blx	r3
 8002104:	3601      	adds	r6, #1
 8002106:	e7f2      	b.n	80020ee <__libc_init_array+0x1e>
 8002108:	08002180 	.word	0x08002180
 800210c:	08002180 	.word	0x08002180
 8002110:	08002180 	.word	0x08002180
 8002114:	08002184 	.word	0x08002184

08002118 <memset>:
 8002118:	4402      	add	r2, r0
 800211a:	4603      	mov	r3, r0
 800211c:	4293      	cmp	r3, r2
 800211e:	d100      	bne.n	8002122 <memset+0xa>
 8002120:	4770      	bx	lr
 8002122:	f803 1b01 	strb.w	r1, [r3], #1
 8002126:	e7f9      	b.n	800211c <memset+0x4>

08002128 <_init>:
 8002128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800212a:	bf00      	nop
 800212c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800212e:	bc08      	pop	{r3}
 8002130:	469e      	mov	lr, r3
 8002132:	4770      	bx	lr

08002134 <_fini>:
 8002134:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002136:	bf00      	nop
 8002138:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800213a:	bc08      	pop	{r3}
 800213c:	469e      	mov	lr, r3
 800213e:	4770      	bx	lr
